--- a/ext/gd/config.m4
+++ b/ext/gd/config.m4
@@ -286,6 +286,9 @@ AC_DEFUN([PHP_GD_CHECK_VERSION],[
   PHP_CHECK_LIBRARY(gd, gdNewDynamicCtxEx,      [AC_DEFINE(HAVE_GD_DYNAMIC_CTX_EX,   1, [ ])], [], [ -L$GD_LIB $GD_SHARED_LIBADD ])
   PHP_CHECK_LIBRARY(gd, gdImageConvolution,     [AC_DEFINE(HAVE_GD_IMAGE_CONVOLUTION,      1, [ ])], [], [ -L$GD_LIB $GD_SHARED_LIBADD ])
   PHP_CHECK_LIBRARY(gd, gdImagePixelate,        [AC_DEFINE(HAVE_GD_IMAGE_PIXELATE,         1, [ ])], [], [ -L$GD_LIB $GD_SHARED_LIBADD ])
+  PHP_CHECK_LIBRARY(gd, gdImageFlipBoth,        [AC_DEFINE(HAVE_GD_IMAGE_FLIP,       1, [ ])], [], [ -L$GD_LIB $GD_SHARED_LIBADD ])
+  PHP_CHECK_LIBRARY(gd, gdImageCreateFromJpegEx,[AC_DEFINE(HAVE_GD_JPGEX,            1, [ ])], [], [ -L$GD_LIB $GD_SHARED_LIBADD ])
+  PHP_CHECK_LIBRARY(gd, gdSetErrorMethod,       [AC_DEFINE(HAVE_LIBGD21,             1, [ ])], [], [ -L$GD_LIB $GD_SHARED_LIBADD ])
 ])
 
 dnl
@@ -326,6 +329,7 @@ dnl These are always available with bund
   AC_DEFINE(HAVE_LIBGD15,             1, [ ])
   AC_DEFINE(HAVE_LIBGD20,             1, [ ])
   AC_DEFINE(HAVE_LIBGD204,            1, [ ])
+  AC_DEFINE(HAVE_LIBGD21,             1, [ ])
   AC_DEFINE(HAVE_GD_IMAGESETTILE,     1, [ ])
   AC_DEFINE(HAVE_GD_IMAGESETBRUSH,    1, [ ])
   AC_DEFINE(HAVE_GDIMAGECOLORRESOLVE, 1, [ ])
@@ -342,6 +346,7 @@ dnl These are always available with bund
   AC_DEFINE(HAVE_GD_FONTMUTEX,        1, [ ])
   AC_DEFINE(HAVE_GD_DYNAMIC_CTX_EX,   1, [ ])
   AC_DEFINE(HAVE_GD_GIF_CTX,          1, [ ])
+  AC_DEFINE(HAVE_GD_IMAGE_FLIP,       1, [ ])
 
 dnl Make sure the libgd/ is first in the include path
   GDLIB_CFLAGS="-DHAVE_LIBPNG"
@@ -356,6 +361,7 @@ dnl enable the support in bundled GD lib
 
   if test -n "$GD_JPEG_DIR"; then
     AC_DEFINE(HAVE_GD_JPG, 1, [ ])
+    AC_DEFINE(HAVE_GD_JPGEX, 1, [ ])
     GDLIB_CFLAGS="$GDLIB_CFLAGS -DHAVE_LIBJPEG"
   fi
 
@@ -380,8 +386,12 @@ else
 
  if test "$PHP_GD" != "no"; then
   GD_MODULE_TYPE=external
-  extra_sources="gdcache.c libgd/gd_compat.c libgd/gd_filter.c libgd/gd_pixelate.c libgd/gd_arc.c \
-                 libgd/gd_rotate.c libgd/gd_color.c"
+  if test -n "$HAVE_LIBGD21"; then
+    extra_sources="libgd/gd_compat.c"
+  else
+    extra_sources="gdcache.c libgd/gd_compat.c libgd/gd_filter.c libgd/gd_pixelate.c libgd/gd_arc.c \
+                   libgd/gd_rotate.c libgd/gd_color.c"
+  fi
 
 dnl Various checks for GD features
   PHP_GD_ZLIB
@@ -415,22 +425,26 @@ dnl Library path
 
   PHP_EXPAND_PATH($GD_INCLUDE, GD_INCLUDE)
 
-  dnl
-  dnl Check for gd 2.0.4 greater availability
-  dnl
-  old_CPPFLAGS=$CPPFLAGS
-  CPPFLAGS=-I$GD_INCLUDE
-  AC_TRY_COMPILE([
+  if test -n "$HAVE_LIBGD21"; then
+    AC_DEFINE(HAVE_LIBGD204, 1, [ ])
+  else
+    dnl
+    dnl Check for gd 2.0.4 greater availability
+    dnl
+    old_CPPFLAGS=$CPPFLAGS
+    CPPFLAGS=-I$GD_INCLUDE
+    AC_TRY_COMPILE([
 #include <gd.h>
 #include <stdlib.h>
   ], [
 gdIOCtx *ctx;
 ctx = malloc(sizeof(gdIOCtx));
 ctx->gd_free = 1;
-  ], [
-    AC_DEFINE(HAVE_LIBGD204, 1, [ ])
-  ])
-  CPPFLAGS=$old_CPPFLAGS
+    ], [
+      AC_DEFINE(HAVE_LIBGD204, 1, [ ])
+    ])
+    CPPFLAGS=$old_CPPFLAGS
+  fi
 
  fi
 fi
@@ -441,9 +455,8 @@ dnl
 if test "$PHP_GD" != "no"; then
   PHP_NEW_EXTENSION(gd, gd.c $extra_sources, $ext_shared,, \\$(GDLIB_CFLAGS))
 
-  PHP_ADD_BUILD_DIR($ext_builddir/libgd)
-
-  if test "$GD_MODULE_TYPE" = "builtin"; then
+  if test "$GD_MODULE_TYPE" = "builtin"; then 
+    PHP_ADD_BUILD_DIR($ext_builddir/libgd)
     GDLIB_CFLAGS="-I$ext_srcdir/libgd $GDLIB_CFLAGS"
     GD_HEADER_DIRS="ext/gd/ ext/gd/libgd/"
 
@@ -451,6 +464,9 @@ if test "$PHP_GD" != "no"; then
       AC_MSG_ERROR([GD build test failed. Please check the config.log for details.])
     ], [ $GD_SHARED_LIBADD ], [char foobar () {}])
   else
+    if test "$HAVE_LIBGD21" = "no"; then
+      PHP_ADD_BUILD_DIR($ext_builddir/libgd)
+    fi
     GD_HEADER_DIRS="ext/gd/"
     GDLIB_CFLAGS="-I$GD_INCLUDE $GDLIB_CFLAGS"
     PHP_ADD_INCLUDE($GD_INCLUDE)
--- a/ext/gd/gd.c
+++ b/ext/gd/gd.c
@@ -73,9 +73,6 @@ static void php_free_ps_enc(zend_rsrc_li
 #include <gdfontl.h>  /* 4 Large font */
 #include <gdfontg.h>  /* 5 Giant font */
 
-#ifdef HAVE_GD_WBMP
-#include "libgd/wbmp.h"
-#endif
 #ifdef ENABLE_GD_TTF
 # ifdef HAVE_LIBFREETYPE
 #  include <ft2build.h>
@@ -239,7 +236,7 @@ ZEND_BEGIN_ARG_INFO(arginfo_imagesavealp
 	ZEND_ARG_INFO(0, save)
 ZEND_END_ARG_INFO()
 
-#if HAVE_GD_BUNDLED
+#if defined(HAVE_GD_BUNDLED) || defined(HAVE_LIBGD21)
 ZEND_BEGIN_ARG_INFO(arginfo_imagelayereffect, 0)
 	ZEND_ARG_INFO(0, im)
 	ZEND_ARG_INFO(0, effect)
@@ -366,7 +363,7 @@ ZEND_BEGIN_ARG_INFO(arginfo_imagecreatef
 ZEND_END_ARG_INFO()
 #endif
 
-#if defined(HAVE_GD_XPM) && defined(HAVE_GD_BUNDLED)
+#if defined(HAVE_GD_XPM) && (defined(HAVE_GD_BUNDLED) || defined(HAVE_LIBGD21))
 ZEND_BEGIN_ARG_INFO(arginfo_imagecreatefromxpm, 0)
 	ZEND_ARG_INFO(0, filename)
 ZEND_END_ARG_INFO()
@@ -396,7 +393,7 @@ ZEND_BEGIN_ARG_INFO(arginfo_imagecreatef
 ZEND_END_ARG_INFO()
 #endif
 
-#if HAVE_GD_BUNDLED
+#if defined(HAVE_GD_BUNDLED) || defined(HAVE_LIBGD21)
 ZEND_BEGIN_ARG_INFO_EX(arginfo_imagexbm, 0, 0, 2)
 	ZEND_ARG_INFO(0, im)
 	ZEND_ARG_INFO(0, filename)
@@ -883,17 +880,21 @@ ZEND_BEGIN_ARG_INFO(arginfo_imageconvolu
 	ZEND_ARG_INFO(0, offset)
 ZEND_END_ARG_INFO()
 
-#ifdef HAVE_GD_BUNDLED
-ZEND_BEGIN_ARG_INFO(arginfo_imageantialias, 0)
+#ifdef HAVE_GD_IMAGE_FLIP
+ZEND_BEGIN_ARG_INFO(arginfo_imageflip, 0)
 	ZEND_ARG_INFO(0, im)
-	ZEND_ARG_INFO(0, on)
+	ZEND_ARG_INFO(0, mode)
 ZEND_END_ARG_INFO()
+#endif
 
-ZEND_BEGIN_ARG_INFO(arginfo_imageflip, 0)
+#ifdef HAVE_GD_BUNDLED
+ZEND_BEGIN_ARG_INFO(arginfo_imageantialias, 0)
 	ZEND_ARG_INFO(0, im)
-	ZEND_ARG_INFO(0, mode)
+	ZEND_ARG_INFO(0, on)
 ZEND_END_ARG_INFO()
+#endif
 
+#if defined(HAVE_GD_BUNDLED) || defined(HAVE_LIBGD21)
 ZEND_BEGIN_ARG_INFO(arginfo_imagecrop, 0)
 	ZEND_ARG_INFO(0, im)
 	ZEND_ARG_INFO(0, rect)
@@ -992,9 +993,14 @@ const zend_function_entry gd_functions[]
 
 	PHP_FE(imagerotate,     						arginfo_imagerotate)
 
+#ifdef HAVE_GD_IMAGE_FLIP
+	PHP_FE(imageflip,								arginfo_imageflip)
+#endif
+
 #ifdef HAVE_GD_BUNDLED
 	PHP_FE(imageantialias,							arginfo_imageantialias)
-	PHP_FE(imageflip,								arginfo_imageflip)
+#endif
+#if defined(HAVE_GD_BUNDLED) || defined(HAVE_LIBGD21)
 	PHP_FE(imagecrop,								arginfo_imagecrop)
 	PHP_FE(imagecropauto,							arginfo_imagecropauto)
 	PHP_FE(imagescale,								arginfo_imagescale)
@@ -1032,7 +1038,7 @@ const zend_function_entry gd_functions[]
 #ifdef HAVE_GD_XBM
 	PHP_FE(imagecreatefromxbm,						arginfo_imagecreatefromxbm)
 #endif
-#if defined(HAVE_GD_XPM) && defined(HAVE_GD_BUNDLED)
+#if defined(HAVE_GD_XPM) && (defined(HAVE_GD_BUNDLED) || defined(HAVE_LIBGD21))
 	PHP_FE(imagecreatefromxpm,						arginfo_imagecreatefromxpm)
 #endif
 	PHP_FE(imagecreatefromgd,						arginfo_imagecreatefromgd)
@@ -1112,7 +1118,7 @@ const zend_function_entry gd_functions[]
 #ifdef HAVE_GD_WBMP
 	PHP_FE(image2wbmp,								arginfo_image2wbmp)
 #endif
-#if HAVE_GD_BUNDLED
+#if defined(HAVE_GD_BUNDLED) || defined(HAVE_LIBGD21)
 	PHP_FE(imagelayereffect,						arginfo_imagelayereffect)
 	PHP_FE(imagexbm,                                arginfo_imagexbm)
 #endif
@@ -1180,6 +1186,18 @@ static void php_free_gd_font(zend_rsrc_l
 }
 /* }}} */
 
+#ifdef HAVE_LIBGD21
+/* {{{ php_gd_error_method
+ */
+void php_gd_error_method(int type, const char *format, va_list args)
+{
+	TSRMLS_FETCH();
+
+	php_verror(NULL, "", type, format, args TSRMLS_CC);
+}
+/* }}} */
+#endif
+
 /* {{{ PHP_MSHUTDOWN_FUNCTION
  */
 #if HAVE_LIBT1 || HAVE_GD_FONTMUTEX
@@ -1215,7 +1233,9 @@ PHP_MINIT_FUNCTION(gd)
 	le_ps_font = zend_register_list_destructors_ex(php_free_ps_font, NULL, "gd PS font", module_number);
 	le_ps_enc = zend_register_list_destructors_ex(php_free_ps_enc, NULL, "gd PS encoding", module_number);
 #endif
-
+#ifdef HAVE_LIBGD21
+	gdSetErrorMethod(php_gd_error_method);
+#endif
 	REGISTER_INI_ENTRIES();
 
 	REGISTER_LONG_CONSTANT("IMG_GIF", 1, CONST_CS | CONST_PERSISTENT);
@@ -1246,17 +1266,18 @@ PHP_MINIT_FUNCTION(gd)
 #ifdef GD2_FMT_COMPRESSED
 	REGISTER_LONG_CONSTANT("IMG_GD2_COMPRESSED", GD2_FMT_COMPRESSED, CONST_CS | CONST_PERSISTENT);
 #endif
-#if HAVE_GD_BUNDLED
+#ifdef HAVE_GD_IMAGE_FLIP
+	REGISTER_LONG_CONSTANT("IMG_FLIP_HORIZONTAL", GD_FLIP_HORINZONTAL, CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("IMG_FLIP_VERTICAL", GD_FLIP_VERTICAL, CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("IMG_FLIP_BOTH", GD_FLIP_BOTH, CONST_CS | CONST_PERSISTENT);
+#endif
+#if defined(HAVE_GD_BUNDLED) || defined(HAVE_LIBGD21)
 	REGISTER_LONG_CONSTANT("IMG_EFFECT_REPLACE", gdEffectReplace, CONST_CS | CONST_PERSISTENT);
 	REGISTER_LONG_CONSTANT("IMG_EFFECT_ALPHABLEND", gdEffectAlphaBlend, CONST_CS | CONST_PERSISTENT);
 	REGISTER_LONG_CONSTANT("IMG_EFFECT_NORMAL", gdEffectNormal, CONST_CS | CONST_PERSISTENT);
 	REGISTER_LONG_CONSTANT("IMG_EFFECT_OVERLAY", gdEffectOverlay, CONST_CS | CONST_PERSISTENT);
 	REGISTER_LONG_CONSTANT("GD_BUNDLED", 1, CONST_CS | CONST_PERSISTENT);
 
-	REGISTER_LONG_CONSTANT("IMG_FLIP_HORIZONTAL", GD_FLIP_HORINZONTAL, CONST_CS | CONST_PERSISTENT);
-	REGISTER_LONG_CONSTANT("IMG_FLIP_VERTICAL", GD_FLIP_VERTICAL, CONST_CS | CONST_PERSISTENT);
-	REGISTER_LONG_CONSTANT("IMG_FLIP_BOTH", GD_FLIP_BOTH, CONST_CS | CONST_PERSISTENT);
-
 	REGISTER_LONG_CONSTANT("IMG_CROP_DEFAULT", GD_CROP_DEFAULT, CONST_CS | CONST_PERSISTENT);
 	REGISTER_LONG_CONSTANT("IMG_CROP_TRANSPARENT", GD_CROP_TRANSPARENT, CONST_CS | CONST_PERSISTENT);
 	REGISTER_LONG_CONSTANT("IMG_CROP_BLACK", GD_CROP_BLACK, CONST_CS | CONST_PERSISTENT);
@@ -1359,9 +1380,9 @@ PHP_RSHUTDOWN_FUNCTION(gd)
 #endif
 /* }}} */
 
-#if HAVE_GD_BUNDLED
+#if defined(HAVE_GD_BUNDLED)
 #define PHP_GD_VERSION_STRING "bundled (2.1.0 compatible)"
-#else
+#elif 
 # ifdef GD_VERSION_STRING
 #  define PHP_GD_VERSION_STRING GD_VERSION_STRING
 # else
@@ -1405,8 +1426,6 @@ PHP_MINFO_FUNCTION(gd)
 	php_info_print_table_row(2, "T1Lib Support", "enabled");
 #endif
 
-/* this next part is stupid ... if I knew better, I'd put them all on one row (cmv) */
-
 #ifdef HAVE_GD_GIF_READ
 	php_info_print_table_row(2, "GIF Read Support", "enabled");
 #endif
@@ -1415,13 +1434,10 @@ PHP_MINFO_FUNCTION(gd)
 #endif
 #ifdef HAVE_GD_JPG
 	{
-		char tmp[12];
-		snprintf(tmp, sizeof(tmp), "%s", gdJpegGetVersionString());
 		php_info_print_table_row(2, "JPEG Support", "enabled");
-		php_info_print_table_row(2, "libJPEG Version", tmp);
+		php_info_print_table_row(2, "libJPEG Version", gdJpegGetVersionString());
 	}
 #endif
-
 #ifdef HAVE_GD_PNG
 	php_info_print_table_row(2, "PNG Support", "enabled");
 	php_info_print_table_row(2, "libPNG Version", gdPngGetVersionString());
@@ -1429,7 +1445,7 @@ PHP_MINFO_FUNCTION(gd)
 #ifdef HAVE_GD_WBMP
 	php_info_print_table_row(2, "WBMP Support", "enabled");
 #endif
-#if defined(HAVE_GD_XPM) && defined(HAVE_GD_BUNDLED)
+#if defined(HAVE_GD_XPM) && (defined(HAVE_GD_BUNDLED) || defined(HAVE_LIBGD21))
 	php_info_print_table_row(2, "XPM Support", "enabled");
 	{
 		char tmp[12];
@@ -1440,7 +1456,7 @@ PHP_MINFO_FUNCTION(gd)
 #ifdef HAVE_GD_XBM
 	php_info_print_table_row(2, "XBM Support", "enabled");
 #endif
-#if defined(USE_GD_JISX0208) && defined(HAVE_GD_BUNDLED)
+#if defined(USE_GD_JISX0208) && (defined(HAVE_GD_BUNDLED) || defined(HAVE_LIBGD21))
 	php_info_print_table_row(2, "JIS-mapped Japanese Font Support", "enabled");
 #endif
 #ifdef HAVE_GD_WEBP
@@ -1504,7 +1520,7 @@ PHP_FUNCTION(gd_info)
 #else
 	add_assoc_bool(return_value, "WBMP Support", 0);
 #endif
-#if defined(HAVE_GD_XPM) && defined(HAVE_GD_BUNDLED)
+#if defined(HAVE_GD_XPM) && (defined(HAVE_GD_BUNDLED) || defined(HAVE_LIBGD21))
 	add_assoc_bool(return_value, "XPM Support", 1);
 #else
 	add_assoc_bool(return_value, "XPM Support", 0);
@@ -1514,7 +1530,7 @@ PHP_FUNCTION(gd_info)
 #else
 	add_assoc_bool(return_value, "XBM Support", 0);
 #endif
-#if defined(USE_GD_JISX0208) && defined(HAVE_GD_BUNDLED)
+#if defined(USE_GD_JISX0208) && (defined(HAVE_GD_BUNDLED) || defined(HAVE_LIBGD21))
 	add_assoc_bool(return_value, "JIS-mapped Japanese Font Support", 1);
 #else
 	add_assoc_bool(return_value, "JIS-mapped Japanese Font Support", 0);
@@ -1647,13 +1663,9 @@ PHP_FUNCTION(imageloadfont)
 		body_size = font->w * font->h * font->nchars;
 	}
 
-	if (overflow2(font->nchars, font->h)) {
-		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Error reading font, invalid font header");
-		efree(font);
-		php_stream_close(stream);
-		RETURN_FALSE;
-	}
-	if (overflow2(font->nchars * font->h, font->w )) {
+	if ((font->nchars <= 0 || font->h <= 0 || font->w <= 0 ) || \
+		(font->nchars > INT_MAX / font->h) || \
+		(font->nchars * font->h > INT_MAX / font->w)) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Error reading font, invalid font header");
 		efree(font);
 		php_stream_close(stream);
@@ -1976,7 +1988,7 @@ PHP_FUNCTION(imagesavealpha)
 }
 /* }}} */
 
-#if HAVE_GD_BUNDLED
+#if defined(HAVE_GD_BUNDLED) || defined(HAVE_LIBGD21)
 /* {{{ proto bool imagelayereffect(resource im, int effect)
    Set the alpha blending flag to use the bundled libgd layering effects */
 PHP_FUNCTION(imagelayereffect)
@@ -2367,7 +2379,7 @@ PHP_FUNCTION(imagetypes)
 #ifdef HAVE_GD_WBMP
 	ret |= 8;
 #endif
-#if defined(HAVE_GD_XPM) && defined(HAVE_GD_BUNDLED)
+#if defined(HAVE_GD_XPM) && (defined(HAVE_GD_BUNDLED) || defined(HAVE_LIBGD21))
 	ret |= 16;
 #endif
 
@@ -2379,6 +2391,23 @@ PHP_FUNCTION(imagetypes)
 }
 /* }}} */
 
+/* {{{ _php_ctx_getmbi
+ */
+
+static _php_ctx_getmbi(gdIOCtx *ctx)
+{
+	int i, mbi = 0;
+
+	do {
+		i = (ctx->getC)(ctx);
+		if (i < 0) {
+			break;
+		}
+		mbi = (mbi << 7) | (i & 0x7f);
+	} while (i & 0x80);
+}
+/* }}} */
+
 /* {{{ _php_image_type
  */
 static const char php_sig_gd2[3] = {'g', 'd', '2'};
@@ -2408,7 +2437,7 @@ static int _php_image_type (char data[8]
 		gdIOCtx *io_ctx;
 		io_ctx = gdNewDynamicCtxEx(8, data, 0);
 		if (io_ctx) {
-			if (getmbi((int(*)(void *)) io_ctx->getC, io_ctx) == 0 && skipheader((int(*)(void *)) io_ctx->getC, io_ctx) == 0 ) {
+			if (_php_ctx_getmbi(io_ctx) == 0 && _php_ctx_getmbi(io_ctx) >= 0) {
 #if HAVE_LIBGD204
 				io_ctx->gd_free(io_ctx);
 #else
@@ -2559,7 +2588,7 @@ static void _php_image_create_from(INTER
 	gdImagePtr im = NULL;
 	php_stream *stream;
 	FILE * fp = NULL;
-#ifdef HAVE_GD_JPG
+#ifdef HAVE_GD_JPGEX
 	long ignore_warning;
 #endif
 	if (image_type == PHP_GDIMG_TYPE_GD2PART) {
@@ -2654,7 +2683,7 @@ static void _php_image_create_from(INTER
 			case PHP_GDIMG_TYPE_GD2PART:
 				im = (*func_p)(fp, srcx, srcy, width, height);
 				break;
-#if defined(HAVE_GD_XPM) && defined(HAVE_GD_BUNDLED)
+#if defined(HAVE_GD_XPM) && (defined(HAVE_GD_BUNDLED) || defined(HAVE_LIBGD21))
 			case PHP_GDIMG_TYPE_XPM:
 				im = gdImageCreateFromXpm(file);
 				break;
@@ -2662,9 +2691,9 @@ static void _php_image_create_from(INTER
 
 #ifdef HAVE_GD_JPG
 			case PHP_GDIMG_TYPE_JPG:
+#ifdef HAVE_GD_JPGEX
 				ignore_warning = INI_INT("gd.jpeg_ignore_warning");
-#ifdef HAVE_GD_BUNDLED
-				im = gdImageCreateFromJpeg(fp, ignore_warning);
+				im = gdImageCreateFromJpegEx(fp, ignore_warning);
 #else
 				im = gdImageCreateFromJpeg(fp);
 #endif
@@ -2744,7 +2773,7 @@ PHP_FUNCTION(imagecreatefromxbm)
 /* }}} */
 #endif /* HAVE_GD_XBM */
 
-#if defined(HAVE_GD_XPM) && defined(HAVE_GD_BUNDLED)
+#if defined(HAVE_GD_XPM) && (defined(HAVE_GD_BUNDLED) || defined(HAVE_LIBGD21))
 /* {{{ proto resource imagecreatefromxpm(string filename)
    Create a new image from XPM file or URL */
 PHP_FUNCTION(imagecreatefromxpm)
@@ -2952,7 +2981,7 @@ static void _php_image_output(INTERNAL_F
 
 /* {{{ proto int imagexbm(int im, string filename [, int foreground])
    Output XBM image to browser or file */
-#if HAVE_GD_BUNDLED
+#if defined(HAVE_GD_BUNDLED) || defined(HAVE_LIBGD21)
 PHP_FUNCTION(imagexbm)
 {
 	_php_image_output_ctx(INTERNAL_FUNCTION_PARAM_PASSTHRU, PHP_GDIMG_TYPE_XBM, "XBM", gdImageXbmCtx);
@@ -4722,7 +4751,7 @@ static void _php_image_convert(INTERNAL_
 	int int_threshold;
 	int x, y;
 	float x_ratio, y_ratio;
-#ifdef HAVE_GD_JPG
+#ifdef HAVE_GD_JPGEX
     long ignore_warning;
 #endif
 	
@@ -4775,9 +4804,9 @@ static void _php_image_convert(INTERNAL_
 
 #ifdef HAVE_GD_JPG
 		case PHP_GDIMG_TYPE_JPG:
+#ifdef HAVE_GD_JPGEX
 			ignore_warning = INI_INT("gd.jpeg_ignore_warning");
-#ifdef HAVE_GD_BUNDLED
-			im_org = gdImageCreateFromJpeg(org, ignore_warning);
+			im_org = gdImageCreateFromJpegEx(org, ignore_warning);
 #else
 			im_org = gdImageCreateFromJpeg(org);
 #endif
@@ -5189,26 +5218,7 @@ PHP_FUNCTION(imageconvolution)
 /* }}} */
 /* End section: Filters */
 
-#ifdef HAVE_GD_BUNDLED
-/* {{{ proto bool imageantialias(resource im, bool on)
-   Should antialiased functions used or not*/
-PHP_FUNCTION(imageantialias)
-{
-	zval *IM;
-	zend_bool alias;
-	gdImagePtr im;
-
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "rb", &IM, &alias) == FAILURE) {
-		return;
-	}
-
-	ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, "Image", le_gd);
-	gdImageAntialias(im, alias);
-	RETURN_TRUE;
-}
-/* }}} */
-
-
+#ifdef HAVE_GD_IMAGE_FLIP
 /* {{{ proto void imageflip(resource im, int mode)
    Flip an image (in place) horizontally, vertically or both directions. */
 PHP_FUNCTION(imageflip)
@@ -5244,7 +5254,30 @@ PHP_FUNCTION(imageflip)
 	RETURN_TRUE;
 }
 /* }}} */
+#endif
 
+#ifdef HAVE_GD_BUNDLED
+/* {{{ proto bool imageantialias(resource im, bool on)
+   Should antialiased functions used or not*/
+PHP_FUNCTION(imageantialias)
+{
+	zval *IM;
+	zend_bool alias;
+	gdImagePtr im;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "rb", &IM, &alias) == FAILURE) {
+		return;
+	}
+
+	ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, "Image", le_gd);
+	gdImageAntialias(im, alias);
+	RETURN_TRUE;
+}
+/* }}} */
+#endif
+
+
+#if defined(HAVE_GD_BUNDLED) || defined(HAVE_LIBGD21)
 /* {{{ proto void imagecrop(resource im, array rect)
    Crop an image using the given coordinates and size, x, y, width and height. */
 PHP_FUNCTION(imagecrop)
@@ -5352,7 +5385,7 @@ PHP_FUNCTION(imagecropauto)
 /* }}} */
 
 /* {{{ proto resource imagescale(resource im, new_width[, new_height[, method]])
-   Crop an image using the given coordinates and size, x, y, width and height. */
+   Scale an image using the given new width and height. */
 PHP_FUNCTION(imagescale)
 {
 	zval *IM;
--- a/ext/gd/gd_ctx.c
+++ b/ext/gd/gd_ctx.c
@@ -46,6 +46,33 @@ static void _php_image_output_ctxfree(st
 	}
 }
 
+static void _php_image_stream_putc(struct gdIOCtx *ctx, int c)  {
+	char ch = (char) c;
+	php_stream * stream = (php_stream *)ctx->data;
+	TSRMLS_FETCH();
+	php_stream_write(stream, &ch, 1);
+}
+
+static int _php_image_stream_putbuf(struct gdIOCtx *ctx, const void* buf, int l)
+{
+	php_stream * stream = (php_stream *)ctx->data;
+	TSRMLS_FETCH();
+	return php_stream_write(stream, (void *)buf, l);
+}
+
+static void _php_image_stream_ctxfree(struct gdIOCtx *ctx)
+{
+	TSRMLS_FETCH();
+
+	if(ctx->data) {
+		php_stream_close((php_stream *) ctx->data);
+		ctx->data = NULL;
+	}
+	if(ctx) {
+		efree(ctx);
+	}
+}
+
 /* {{{ _php_image_output_ctx */
 static void _php_image_output_ctx(INTERNAL_FUNCTION_PARAMETERS, int image_type, char *tn, void (*func_p)())
 {
@@ -54,11 +81,12 @@ static void _php_image_output_ctx(INTERN
 	int file_len = 0;
 	long quality, basefilter;
 	gdImagePtr im;
-	FILE *fp = NULL;
 	int argc = ZEND_NUM_ARGS();
 	int q = -1, i;
 	int f = -1;
 	gdIOCtx *ctx = NULL;
+	zval *to_zval = NULL;
+	php_stream *stream;
 
 	/* The third (quality) parameter for Wbmp stands for the threshold when called from image2wbmp().
 	 * The third (quality) parameter for Wbmp and Xbm stands for the foreground color index when called
@@ -75,7 +103,7 @@ static void _php_image_output_ctx(INTERN
 		 * PHP_GDIMG_TYPE_WBM 
 		 * PHP_GDIMG_TYPE_WEBP 
 		 * */
-		if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "r|p!ll", &imgind, &file, &file_len, &quality, &basefilter) == FAILURE) {
+		if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "r|z/!ll", &imgind, &to_zval, &quality, &basefilter) == FAILURE) {
 			return;
 		}
 	}
@@ -89,19 +117,21 @@ static void _php_image_output_ctx(INTERN
 		}
 	}
 
-	if (argc > 1 && file_len) {
-		if (strlen(file) != file_len) {
-			RETURN_FALSE;
-		}
-		PHP_GD_CHECK_OPEN_BASEDIR(file, "Invalid filename");
-
-		fp = VCWD_FOPEN(file, "wb");
-		if (!fp) {
-			php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unable to open '%s' for writing: %s", file, strerror(errno));
+	if (argc > 1 && to_zval != NULL) {
+		if (Z_TYPE_P(to_zval) == IS_RESOURCE) {
+			php_stream_from_zval_no_verify(stream, &to_zval);
+			if (stream == NULL) {
+				RETURN_FALSE;
+			}
+		} else if (Z_TYPE_P(to_zval) == IS_STRING) {
+			stream = php_stream_open_wrapper(Z_STRVAL_P(to_zval), "wb", REPORT_ERRORS|IGNORE_PATH|IGNORE_URL_WIN, NULL);
+			if (stream == NULL) {
+				RETURN_FALSE;
+			}
+		} else {
+			php_error_docref(NULL TSRMLS_CC, E_WARNING, "Invalid 2nd parameter, it must a filename or a stream");
 			RETURN_FALSE;
 		}
-
-		ctx = gdNewFileCtx(fp);
 	} else {
 		ctx = emalloc(sizeof(gdIOCtx));
 		ctx->putC = _php_image_output_putc;
@@ -115,6 +145,14 @@ static void _php_image_output_ctx(INTERN
 #endif
 	}
 
+	if (!ctx)	{
+		ctx = emalloc(sizeof(gdIOCtx));
+		ctx->putC = _php_image_stream_putc;
+		ctx->putBuf = _php_image_stream_putbuf;
+		ctx->gd_free = _php_image_stream_ctxfree;
+		ctx->data = (void *)stream;
+	}
+
 	switch(image_type) {
 		case PHP_GDIMG_CONVERT_WBM:
 			if(q<0||q>255) {
@@ -151,12 +189,11 @@ static void _php_image_output_ctx(INTERN
 			break;
 	}
 
+#if HAVE_LIBGD204
 	ctx->gd_free(ctx);
-
-	if(fp) {
-		fflush(fp);
-		fclose(fp);
-	}
+#else
+	ctx->free(ctx);
+#endif
 
 	RETURN_TRUE;
 }
--- a/ext/gd/libgd/gd_compat.h
+++ b/ext/gd/libgd/gd_compat.h
@@ -10,6 +10,8 @@
 const char * gdPngGetVersionString();
 const char * gdJpegGetVersionString();
 int gdJpegGetVersionInt();
+
+#if !defined(HAVE_LIBGD21)
 int overflow2(int a, int b);
 int getmbi (int (*getin) (void *in), void *in);
 int skipheader (int (*getin) (void *in), void *in);
@@ -65,5 +67,6 @@ gdImagePtr gdImageRotate (gdImagePtr src
 
 int gdImageColorMatch (gdImagePtr im1, gdImagePtr im2);
 
-#endif
+#endif /* !HAVE_LIBGD21 */
 
+#endif /* GD_COMPAT_H */
--- a/ext/gd/libgd/gd.h
+++ b/ext/gd/libgd/gd.h
@@ -362,8 +362,12 @@ gdImagePtr gdImageCreateFromPng(FILE *fd
 gdImagePtr gdImageCreateFromPngCtx(gdIOCtxPtr in);
 gdImagePtr gdImageCreateFromWBMP(FILE *inFile);
 gdImagePtr gdImageCreateFromWBMPCtx(gdIOCtx *infile);
-gdImagePtr gdImageCreateFromJpeg(FILE *infile, int ignore_warning);
-gdImagePtr gdImageCreateFromJpegCtx(gdIOCtx *infile, int ignore_warning);
+gdImagePtr gdImageCreateFromJpeg(FILE *infile);
+gdImagePtr gdImageCreateFromJpegEx(FILE *infile, int ignore_warning);
+gdImagePtr gdImageCreateFromJpegCtx(gdIOCtx *infile);
+gdImagePtr gdImageCreateFromJpegCtxEx(gdIOCtx *infile, int ignore_warning);
+gdImagePtr gdImageCreateFromJpegPtr (int size, void *data);
+gdImagePtr gdImageCreateFromJpegPtrEx (int size, void *data, int ignore_warning);
 gdImagePtr gdImageCreateFromWebp(FILE *fd);
 gdImagePtr gdImageCreateFromWebpCtx(gdIOCtxPtr in);
 gdImagePtr gdImageCreateFromWebpPtr (int size, void *data);
--- a/ext/gd/libgd/gd_jpeg.c
+++ b/ext/gd/libgd/gd_jpeg.c
@@ -269,21 +269,31 @@ void gdImageJpegCtx (gdImagePtr im, gdIO
 	gdFree (row);
 }
 
-gdImagePtr gdImageCreateFromJpeg (FILE * inFile, int ignore_warning)
+gdImagePtr gdImageCreateFromJpeg (FILE * inFile)
+{
+	return gdImageCreateFromJpegEx(inFile, 1);
+}
+
+gdImagePtr gdImageCreateFromJpegEx (FILE * inFile, int ignore_warning)
 {
 	gdImagePtr im;
 	gdIOCtx *in = gdNewFileCtx(inFile);
-	im = gdImageCreateFromJpegCtx(in, ignore_warning);
+	im = gdImageCreateFromJpegCtxEx(in, ignore_warning);
 	in->gd_free (in);
 
 	return im;
 }
 
-gdImagePtr gdImageCreateFromJpegPtr (int size, void *data, int ignore_warning)
+gdImagePtr gdImageCreateFromJpegPtr (int size, void *data)
+{
+	return gdImageCreateFromJpegPtrEx(size, data, 1);
+}
+
+gdImagePtr gdImageCreateFromJpegPtrEx (int size, void *data, int ignore_warning)
 {
 	gdImagePtr im;
 	gdIOCtx *in = gdNewDynamicCtxEx(size, data, 0);
-	im = gdImageCreateFromJpegCtx(in, ignore_warning);
+	im = gdImageCreateFromJpegCtxEx(in, ignore_warning);
 	in->gd_free(in);
 
 	return im;
@@ -298,7 +308,12 @@ static int CMYKToRGB(int c, int m, int y
  * Create a gd-format image from the JPEG-format INFILE.  Returns the
  * image, or NULL upon error.
  */
-gdImagePtr gdImageCreateFromJpegCtx (gdIOCtx * infile, int ignore_warning)
+gdImagePtr gdImageCreateFromJpegCtx (gdIOCtx * infile)
+{
+	return gdImageCreateFromJpegCtxEx(infile, 1);
+}
+
+gdImagePtr gdImageCreateFromJpegCtxEx (gdIOCtx * infile, int ignore_warning)
 {
 	struct jpeg_decompress_struct cinfo;
 	struct jpeg_error_mgr jerr;
--- a/ext/gd/php_gd.h
+++ b/ext/gd/php_gd.h
@@ -123,9 +123,15 @@ PHP_FUNCTION(imagegrabscreen);
 
 PHP_FUNCTION(imagerotate);
 
+#ifdef HAVE_GD_IMAGE_FLIP
+PHP_FUNCTION(imageflip);
+#endif
+
 #ifdef HAVE_GD_BUNDLED
 PHP_FUNCTION(imageantialias);
-PHP_FUNCTION(imageflip);
+#endif
+
+#if defined(HAVE_GD_BUNDLED) || defined(HAVE_LIBGD21)
 PHP_FUNCTION(imagecrop);
 PHP_FUNCTION(imagecropauto);
 PHP_FUNCTION(imagescale);
@@ -151,7 +157,7 @@ PHP_FUNCTION(imagecreatefromwbmp);
 PHP_FUNCTION(imagecreatefromgd);
 PHP_FUNCTION(imagecreatefromgd2);
 PHP_FUNCTION(imagecreatefromgd2part);
-#if defined(HAVE_GD_XPM) && defined(HAVE_GD_BUNDLED)
+#if defined(HAVE_GD_XPM) && (defined(HAVE_GD_BUNDLED) || defined(HAVE_LIBGD21))
 PHP_FUNCTION(imagecreatefromxpm);
 #endif
 
@@ -202,7 +208,7 @@ PHP_FUNCTION(image2wbmp);
 
 PHP_FUNCTION(imagecolormatch);
 
-#if HAVE_GD_BUNDLED
+#if defined(HAVE_GD_BUNDLED) || defined(HAVE_LIBGD21)
 PHP_FUNCTION(imagelayereffect);
 PHP_FUNCTION(imagexbm);
 #endif
