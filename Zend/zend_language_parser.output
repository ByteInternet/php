Terminals unused in grammar

   T_CHARACTER
   T_BAD_CHARACTER
   "comment (T_COMMENT)"
   "doc comment (T_DOC_COMMENT)"
   "open tag (T_OPEN_TAG)"
   "open tag with echo (T_OPEN_TAG_WITH_ECHO)"
   "close tag (T_CLOSE_TAG)"
   "whitespace (T_WHITESPACE)"


State 231 conflicts: 1 shift/reduce
State 736 conflicts: 2 shift/reduce


Grammar

    0 $accept: start "end of file"

    1 start: top_statement_list

    2 $@1: /* empty */

    3 top_statement_list: top_statement_list $@1 top_statement
    4                   | /* empty */

    5 namespace_name: "identifier (T_STRING)"
    6               | namespace_name "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"

    7 top_statement: statement
    8              | function_declaration_statement
    9              | class_declaration_statement
   10              | "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';'
   11              | "namespace (T_NAMESPACE)" namespace_name ';'

   12 $@2: /* empty */

   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' $@2 top_statement_list '}'

   14 $@3: /* empty */

   15 top_statement: "namespace (T_NAMESPACE)" '{' $@3 top_statement_list '}'
   16              | "use (T_USE)" use_declarations ';'
   17              | "use (T_USE)" "function (T_FUNCTION)" use_function_declarations ';'
   18              | "use (T_USE)" "const (T_CONST)" use_const_declarations ';'
   19              | constant_declaration ';'

   20 use_declarations: use_declarations ',' use_declaration
   21                 | use_declaration

   22 use_declaration: namespace_name
   23                | namespace_name "as (T_AS)" "identifier (T_STRING)"
   24                | "\\ (T_NS_SEPARATOR)" namespace_name
   25                | "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)"

   26 use_function_declarations: use_function_declarations ',' use_function_declaration
   27                          | use_function_declaration

   28 use_function_declaration: namespace_name
   29                         | namespace_name "as (T_AS)" "identifier (T_STRING)"
   30                         | "\\ (T_NS_SEPARATOR)" namespace_name
   31                         | "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)"

   32 use_const_declarations: use_const_declarations ',' use_const_declaration
   33                       | use_const_declaration

   34 use_const_declaration: namespace_name
   35                      | namespace_name "as (T_AS)" "identifier (T_STRING)"
   36                      | "\\ (T_NS_SEPARATOR)" namespace_name
   37                      | "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)"

   38 constant_declaration: constant_declaration ',' "identifier (T_STRING)" '=' static_scalar
   39                     | "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar

   40 $@4: /* empty */

   41 inner_statement_list: inner_statement_list $@4 inner_statement
   42                     | /* empty */

   43 inner_statement: statement
   44                | function_declaration_statement
   45                | class_declaration_statement
   46                | "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';'

   47 statement: unticked_statement
   48          | "identifier (T_STRING)" ':'

   49 unticked_statement: '{' inner_statement_list '}'

   50 $@5: /* empty */

   51 $@6: /* empty */

   52 unticked_statement: "if (T_IF)" parenthesis_expr $@5 statement $@6 elseif_list else_single

   53 $@7: /* empty */

   54 $@8: /* empty */

   55 unticked_statement: "if (T_IF)" parenthesis_expr ':' $@7 inner_statement_list $@8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

   56 $@9: /* empty */

   57 @10: /* empty */

   58 unticked_statement: "while (T_WHILE)" $@9 parenthesis_expr @10 while_statement

   59 $@11: /* empty */

   60 $@12: /* empty */

   61 unticked_statement: "do (T_DO)" $@11 statement "while (T_WHILE)" $@12 parenthesis_expr ';'

   62 $@13: /* empty */

   63 $@14: /* empty */

   64 $@15: /* empty */

   65 unticked_statement: "for (T_FOR)" '(' for_expr ';' $@13 for_expr ';' $@14 for_expr ')' $@15 for_statement

   66 $@16: /* empty */

   67 unticked_statement: "switch (T_SWITCH)" parenthesis_expr $@16 switch_case_list
   68                   | "break (T_BREAK)" ';'
   69                   | "break (T_BREAK)" expr ';'
   70                   | "continue (T_CONTINUE)" ';'
   71                   | "continue (T_CONTINUE)" expr ';'
   72                   | "return (T_RETURN)" ';'
   73                   | "return (T_RETURN)" expr_without_variable ';'
   74                   | "return (T_RETURN)" variable ';'
   75                   | yield_expr ';'
   76                   | "global (T_GLOBAL)" global_var_list ';'
   77                   | "static (T_STATIC)" static_var_list ';'
   78                   | "echo (T_ECHO)" echo_expr_list ';'
   79                   | T_INLINE_HTML
   80                   | expr ';'
   81                   | "unset (T_UNSET)" '(' unset_variables ')' ';'

   82 $@17: /* empty */

   83 $@18: /* empty */

   84 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" $@17 foreach_variable foreach_optional_arg ')' $@18 foreach_statement

   85 $@19: /* empty */

   86 $@20: /* empty */

   87 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" $@19 foreach_variable foreach_optional_arg ')' $@20 foreach_statement

   88 $@21: /* empty */

   89 unticked_statement: "declare (T_DECLARE)" $@21 '(' declare_list ')' declare_statement
   90                   | ';'

   91 $@22: /* empty */

   92 $@23: /* empty */

   93 unticked_statement: "try (T_TRY)" $@22 '{' inner_statement_list '}' catch_statement $@23 finally_statement
   94                   | "throw (T_THROW)" expr ';'
   95                   | "goto (T_GOTO)" "identifier (T_STRING)" ';'

   96 catch_statement: /* empty */

   97 $@24: /* empty */

   98 $@25: /* empty */

   99 $@26: /* empty */

  100 $@27: /* empty */

  101 catch_statement: "catch (T_CATCH)" '(' $@24 fully_qualified_class_name $@25 "variable (T_VARIABLE)" ')' $@26 '{' inner_statement_list '}' $@27 additional_catches

  102 finally_statement: /* empty */

  103 $@28: /* empty */

  104 finally_statement: "finally (T_FINALLY)" $@28 '{' inner_statement_list '}'

  105 additional_catches: non_empty_additional_catches
  106                   | /* empty */

  107 non_empty_additional_catches: additional_catch
  108                             | non_empty_additional_catches additional_catch

  109 @29: /* empty */

  110 $@30: /* empty */

  111 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @29 "variable (T_VARIABLE)" ')' $@30 '{' inner_statement_list '}'

  112 unset_variables: unset_variable
  113                | unset_variables ',' unset_variable

  114 unset_variable: variable

  115 function_declaration_statement: unticked_function_declaration_statement

  116 class_declaration_statement: unticked_class_declaration_statement

  117 is_reference: /* empty */
  118             | '&'

  119 is_variadic: /* empty */
  120            | "... (T_ELLIPSIS)"

  121 $@31: /* empty */

  122 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" $@31 '(' parameter_list ')' '{' inner_statement_list '}'

  123 $@32: /* empty */

  124 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from $@32 implements_list '{' class_statement_list '}'

  125 $@33: /* empty */

  126 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" $@33 interface_extends_list '{' class_statement_list '}'

  127 class_entry_type: "class (T_CLASS)"
  128                 | "abstract (T_ABSTRACT)" "class (T_CLASS)"
  129                 | "trait (T_TRAIT)"
  130                 | "final (T_FINAL)" "class (T_CLASS)"

  131 extends_from: /* empty */
  132             | "extends (T_EXTENDS)" fully_qualified_class_name

  133 interface_entry: "interface (T_INTERFACE)"

  134 interface_extends_list: /* empty */
  135                       | "extends (T_EXTENDS)" interface_list

  136 implements_list: /* empty */
  137                | "implements (T_IMPLEMENTS)" interface_list

  138 interface_list: fully_qualified_class_name
  139               | interface_list ',' fully_qualified_class_name

  140 foreach_optional_arg: /* empty */
  141                     | "=> (T_DOUBLE_ARROW)" foreach_variable

  142 foreach_variable: variable
  143                 | '&' variable

  144 $@34: /* empty */

  145 foreach_variable: "list (T_LIST)" '(' $@34 assignment_list ')'

  146 for_statement: statement
  147              | ':' inner_statement_list "endfor (T_ENDFOR)" ';'

  148 foreach_statement: statement
  149                  | ':' inner_statement_list "endforeach (T_ENDFOREACH)" ';'

  150 declare_statement: statement
  151                  | ':' inner_statement_list "enddeclare (T_ENDDECLARE)" ';'

  152 declare_list: "identifier (T_STRING)" '=' static_scalar
  153             | declare_list ',' "identifier (T_STRING)" '=' static_scalar

  154 switch_case_list: '{' case_list '}'
  155                 | '{' ';' case_list '}'
  156                 | ':' case_list "endswitch (T_ENDSWITCH)" ';'
  157                 | ':' ';' case_list "endswitch (T_ENDSWITCH)" ';'

  158 case_list: /* empty */

  159 $@35: /* empty */

  160 case_list: case_list "case (T_CASE)" expr case_separator $@35 inner_statement_list

  161 $@36: /* empty */

  162 case_list: case_list "default (T_DEFAULT)" case_separator $@36 inner_statement_list

  163 case_separator: ':'
  164               | ';'

  165 while_statement: statement
  166                | ':' inner_statement_list "endwhile (T_ENDWHILE)" ';'

  167 elseif_list: /* empty */

  168 $@37: /* empty */

  169 elseif_list: elseif_list "elseif (T_ELSEIF)" parenthesis_expr $@37 statement

  170 new_elseif_list: /* empty */

  171 $@38: /* empty */

  172 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" parenthesis_expr ':' $@38 inner_statement_list

  173 else_single: /* empty */
  174            | "else (T_ELSE)" statement

  175 new_else_single: /* empty */
  176                | "else (T_ELSE)" ':' inner_statement_list

  177 parameter_list: non_empty_parameter_list
  178               | /* empty */

  179 non_empty_parameter_list: parameter
  180                         | non_empty_parameter_list ',' parameter

  181 parameter: optional_class_type is_reference is_variadic "variable (T_VARIABLE)"
  182          | optional_class_type is_reference is_variadic "variable (T_VARIABLE)" '=' static_scalar

  183 optional_class_type: /* empty */
  184                    | "array (T_ARRAY)"
  185                    | "callable (T_CALLABLE)"
  186                    | fully_qualified_class_name

  187 function_call_parameter_list: '(' ')'
  188                             | '(' non_empty_function_call_parameter_list ')'
  189                             | '(' yield_expr ')'

  190 non_empty_function_call_parameter_list: expr_without_variable
  191                                       | variable
  192                                       | '&' w_variable
  193                                       | "... (T_ELLIPSIS)" expr
  194                                       | non_empty_function_call_parameter_list ',' expr_without_variable
  195                                       | non_empty_function_call_parameter_list ',' variable
  196                                       | non_empty_function_call_parameter_list ',' '&' w_variable
  197                                       | non_empty_function_call_parameter_list ',' "... (T_ELLIPSIS)" expr

  198 global_var_list: global_var_list ',' global_var
  199                | global_var

  200 global_var: "variable (T_VARIABLE)"
  201           | '$' r_variable
  202           | '$' '{' expr '}'

  203 static_var_list: static_var_list ',' "variable (T_VARIABLE)"
  204                | static_var_list ',' "variable (T_VARIABLE)" '=' static_scalar
  205                | "variable (T_VARIABLE)"
  206                | "variable (T_VARIABLE)" '=' static_scalar

  207 class_statement_list: class_statement_list class_statement
  208                     | /* empty */

  209 $@39: /* empty */

  210 class_statement: variable_modifiers $@39 class_variable_declaration ';'
  211                | class_constant_declaration ';'
  212                | trait_use_statement

  213 $@40: /* empty */

  214 class_statement: method_modifiers function is_reference "identifier (T_STRING)" $@40 '(' parameter_list ')' method_body

  215 trait_use_statement: "use (T_USE)" trait_list trait_adaptations

  216 trait_list: fully_qualified_class_name
  217           | trait_list ',' fully_qualified_class_name

  218 trait_adaptations: ';'
  219                  | '{' trait_adaptation_list '}'

  220 trait_adaptation_list: /* empty */
  221                      | non_empty_trait_adaptation_list

  222 non_empty_trait_adaptation_list: trait_adaptation_statement
  223                                | non_empty_trait_adaptation_list trait_adaptation_statement

  224 trait_adaptation_statement: trait_precedence ';'
  225                           | trait_alias ';'

  226 trait_precedence: trait_method_reference_fully_qualified "insteadof (T_INSTEADOF)" trait_reference_list

  227 trait_reference_list: fully_qualified_class_name
  228                     | trait_reference_list ',' fully_qualified_class_name

  229 trait_method_reference: "identifier (T_STRING)"
  230                       | trait_method_reference_fully_qualified

  231 trait_method_reference_fully_qualified: fully_qualified_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

  232 trait_alias: trait_method_reference "as (T_AS)" trait_modifiers "identifier (T_STRING)"
  233            | trait_method_reference "as (T_AS)" member_modifier

  234 trait_modifiers: /* empty */
  235                | member_modifier

  236 method_body: ';'
  237            | '{' inner_statement_list '}'

  238 variable_modifiers: non_empty_member_modifiers
  239                   | "var (T_VAR)"

  240 method_modifiers: /* empty */
  241                 | non_empty_member_modifiers

  242 non_empty_member_modifiers: member_modifier
  243                           | non_empty_member_modifiers member_modifier

  244 member_modifier: "public (T_PUBLIC)"
  245                | "protected (T_PROTECTED)"
  246                | "private (T_PRIVATE)"
  247                | "static (T_STATIC)"
  248                | "abstract (T_ABSTRACT)"
  249                | "final (T_FINAL)"

  250 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)"
  251                           | class_variable_declaration ',' "variable (T_VARIABLE)" '=' static_scalar
  252                           | "variable (T_VARIABLE)"
  253                           | "variable (T_VARIABLE)" '=' static_scalar

  254 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" '=' static_scalar
  255                           | "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar

  256 echo_expr_list: echo_expr_list ',' expr
  257               | expr

  258 for_expr: /* empty */
  259         | non_empty_for_expr

  260 $@41: /* empty */

  261 non_empty_for_expr: non_empty_for_expr ',' $@41 expr
  262                   | expr

  263 chaining_method_or_property: chaining_method_or_property variable_property
  264                            | variable_property

  265 chaining_dereference: chaining_dereference '[' dim_offset ']'
  266                     | '[' dim_offset ']'

  267 $@42: /* empty */

  268 chaining_instance_call: chaining_dereference $@42 chaining_method_or_property
  269                       | chaining_dereference
  270                       | chaining_method_or_property

  271 instance_call: /* empty */

  272 $@43: /* empty */

  273 instance_call: $@43 chaining_instance_call

  274 $@44: /* empty */

  275 new_expr: "new (T_NEW)" class_name_reference $@44 ctor_arguments

  276 $@45: /* empty */

  277 expr_without_variable: "list (T_LIST)" '(' $@45 assignment_list ')' '=' expr
  278                      | variable '=' expr
  279                      | variable '=' '&' variable

  280 $@46: /* empty */

  281 expr_without_variable: variable '=' '&' "new (T_NEW)" class_name_reference $@46 ctor_arguments
  282                      | "clone (T_CLONE)" expr
  283                      | variable "+= (T_PLUS_EQUAL)" expr
  284                      | variable "-= (T_MINUS_EQUAL)" expr
  285                      | variable "*= (T_MUL_EQUAL)" expr
  286                      | variable "**= (T_POW_EQUAL)" expr
  287                      | variable "/= (T_DIV_EQUAL)" expr
  288                      | variable ".= (T_CONCAT_EQUAL)" expr
  289                      | variable "%= (T_MOD_EQUAL)" expr
  290                      | variable "&= (T_AND_EQUAL)" expr
  291                      | variable "|= (T_OR_EQUAL)" expr
  292                      | variable "^= (T_XOR_EQUAL)" expr
  293                      | variable "<<= (T_SL_EQUAL)" expr
  294                      | variable ">>= (T_SR_EQUAL)" expr
  295                      | rw_variable "++ (T_INC)"
  296                      | "++ (T_INC)" rw_variable
  297                      | rw_variable "-- (T_DEC)"
  298                      | "-- (T_DEC)" rw_variable

  299 $@47: /* empty */

  300 expr_without_variable: expr "|| (T_BOOLEAN_OR)" $@47 expr

  301 $@48: /* empty */

  302 expr_without_variable: expr "&& (T_BOOLEAN_AND)" $@48 expr

  303 $@49: /* empty */

  304 expr_without_variable: expr "or (T_LOGICAL_OR)" $@49 expr

  305 $@50: /* empty */

  306 expr_without_variable: expr "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr "xor (T_LOGICAL_XOR)" expr
  308                      | expr '|' expr
  309                      | expr '&' expr
  310                      | expr '^' expr
  311                      | expr '.' expr
  312                      | expr '+' expr
  313                      | expr '-' expr
  314                      | expr '*' expr
  315                      | expr "** (T_POW)" expr
  316                      | expr '/' expr
  317                      | expr '%' expr
  318                      | expr "<< (T_SL)" expr
  319                      | expr ">> (T_SR)" expr
  320                      | '+' expr
  321                      | '-' expr
  322                      | '!' expr
  323                      | '~' expr
  324                      | expr "=== (T_IS_IDENTICAL)" expr
  325                      | expr "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr "== (T_IS_EQUAL)" expr
  327                      | expr "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr '<' expr
  329                      | expr "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr '>' expr
  331                      | expr ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr "instanceof (T_INSTANCEOF)" class_name_reference
  333                      | parenthesis_expr
  334                      | new_expr

  335 @51: /* empty */

  336 expr_without_variable: '(' new_expr ')' @51 instance_call

  337 $@52: /* empty */

  338 $@53: /* empty */

  339 expr_without_variable: expr '?' $@52 expr ':' $@53 expr

  340 $@54: /* empty */

  341 expr_without_variable: expr '?' ':' $@54 expr
  342                      | internal_functions_in_yacc
  343                      | "(int) (T_INT_CAST)" expr
  344                      | "(double) (T_DOUBLE_CAST)" expr
  345                      | "(string) (T_STRING_CAST)" expr
  346                      | "(array) (T_ARRAY_CAST)" expr
  347                      | "(object) (T_OBJECT_CAST)" expr
  348                      | "(bool) (T_BOOL_CAST)" expr
  349                      | "(unset) (T_UNSET_CAST)" expr
  350                      | "exit (T_EXIT)" exit_expr

  351 $@55: /* empty */

  352 expr_without_variable: '@' $@55 expr
  353                      | scalar
  354                      | combined_scalar_offset
  355                      | combined_scalar
  356                      | '`' backticks_expr '`'
  357                      | "print (T_PRINT)" expr
  358                      | "yield (T_YIELD)"

  359 @56: /* empty */

  360 expr_without_variable: function is_reference @56 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

  361 @57: /* empty */

  362 expr_without_variable: "static (T_STATIC)" function is_reference @57 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

  363 yield_expr: "yield (T_YIELD)" expr_without_variable
  364           | "yield (T_YIELD)" variable
  365           | "yield (T_YIELD)" expr "=> (T_DOUBLE_ARROW)" expr_without_variable
  366           | "yield (T_YIELD)" expr "=> (T_DOUBLE_ARROW)" variable

  367 combined_scalar_offset: combined_scalar '[' dim_offset ']'
  368                       | combined_scalar_offset '[' dim_offset ']'
  369                       | "quoted-string (T_CONSTANT_ENCAPSED_STRING)" '[' dim_offset ']'

  370 combined_scalar: "array (T_ARRAY)" '(' array_pair_list ')'
  371                | '[' array_pair_list ']'

  372 function: "function (T_FUNCTION)"

  373 lexical_vars: /* empty */
  374             | "use (T_USE)" '(' lexical_var_list ')'

  375 lexical_var_list: lexical_var_list ',' "variable (T_VARIABLE)"
  376                 | lexical_var_list ',' '&' "variable (T_VARIABLE)"
  377                 | "variable (T_VARIABLE)"
  378                 | '&' "variable (T_VARIABLE)"

  379 @58: /* empty */

  380 function_call: namespace_name @58 function_call_parameter_list

  381 @59: /* empty */

  382 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name @59 function_call_parameter_list

  383 @60: /* empty */

  384 function_call: "\\ (T_NS_SEPARATOR)" namespace_name @60 function_call_parameter_list

  385 @61: /* empty */

  386 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name @61 function_call_parameter_list

  387 $@62: /* empty */

  388 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@62 function_call_parameter_list

  389 $@63: /* empty */

  390 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name $@63 function_call_parameter_list

  391 $@64: /* empty */

  392 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@64 function_call_parameter_list

  393 $@65: /* empty */

  394 function_call: variable_without_objects $@65 function_call_parameter_list

  395 class_name: "static (T_STATIC)"
  396           | namespace_name
  397           | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  398           | "\\ (T_NS_SEPARATOR)" namespace_name

  399 fully_qualified_class_name: namespace_name
  400                           | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  401                           | "\\ (T_NS_SEPARATOR)" namespace_name

  402 class_name_reference: class_name
  403                     | dynamic_class_name_reference

  404 $@66: /* empty */

  405 $@67: /* empty */

  406 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" $@66 object_property $@67 dynamic_class_name_variable_properties
  407                             | base_variable

  408 dynamic_class_name_variable_properties: dynamic_class_name_variable_properties dynamic_class_name_variable_property
  409                                       | /* empty */

  410 dynamic_class_name_variable_property: "-> (T_OBJECT_OPERATOR)" object_property

  411 exit_expr: /* empty */
  412          | '(' ')'
  413          | parenthesis_expr

  414 backticks_expr: /* empty */
  415               | "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"
  416               | encaps_list

  417 ctor_arguments: /* empty */
  418               | function_call_parameter_list

  419 common_scalar: "integer number (T_LNUMBER)"
  420              | "floating-point number (T_DNUMBER)"
  421              | "quoted-string (T_CONSTANT_ENCAPSED_STRING)"
  422              | "__LINE__ (T_LINE)"
  423              | "__FILE__ (T_FILE)"
  424              | "__DIR__ (T_DIR)"
  425              | "__TRAIT__ (T_TRAIT_C)"
  426              | "__METHOD__ (T_METHOD_C)"
  427              | "__FUNCTION__ (T_FUNC_C)"
  428              | "__NAMESPACE__ (T_NS_C)"
  429              | "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)"
  430              | "heredoc start (T_START_HEREDOC)" "heredoc end (T_END_HEREDOC)"

  431 static_class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

  432 static_scalar: static_scalar_value
  433              | "array (T_ARRAY)" '(' static_array_pair_list ')'
  434              | '[' static_array_pair_list ']'

  435 static_scalar_value: common_scalar
  436                    | static_class_name_scalar
  437                    | namespace_name
  438                    | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  439                    | "\\ (T_NS_SEPARATOR)" namespace_name
  440                    | static_class_constant
  441                    | "__CLASS__ (T_CLASS_C)"
  442                    | static_operation

  443 static_operation: static_scalar_value '+' static_scalar_value
  444                 | static_scalar_value '-' static_scalar_value
  445                 | static_scalar_value '*' static_scalar_value
  446                 | static_scalar_value '/' static_scalar_value
  447                 | static_scalar_value '%' static_scalar_value
  448                 | '!' static_scalar_value
  449                 | '~' static_scalar_value
  450                 | static_scalar_value '|' static_scalar_value
  451                 | static_scalar_value '&' static_scalar_value
  452                 | static_scalar_value '^' static_scalar_value
  453                 | static_scalar_value "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value '.' static_scalar_value
  456                 | static_scalar_value "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value '<' static_scalar_value
  466                 | static_scalar_value '>' static_scalar_value
  467                 | static_scalar_value "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value '?' ':' static_scalar_value
  470                 | static_scalar_value '?' static_scalar_value ':' static_scalar_value
  471                 | '+' static_scalar_value
  472                 | '-' static_scalar_value
  473                 | '(' static_scalar_value ')'

  474 scalar: "variable name (T_STRING_VARNAME)"
  475       | class_name_scalar
  476       | class_constant
  477       | namespace_name
  478       | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  479       | "\\ (T_NS_SEPARATOR)" namespace_name
  480       | common_scalar
  481       | '"' encaps_list '"'
  482       | "heredoc start (T_START_HEREDOC)" encaps_list "heredoc end (T_END_HEREDOC)"
  483       | "__CLASS__ (T_CLASS_C)"

  484 static_array_pair_list: /* empty */
  485                       | non_empty_static_array_pair_list possible_comma

  486 possible_comma: /* empty */
  487               | ','

  488 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar "=> (T_DOUBLE_ARROW)" static_scalar
  489                                 | non_empty_static_array_pair_list ',' static_scalar
  490                                 | static_scalar "=> (T_DOUBLE_ARROW)" static_scalar
  491                                 | static_scalar

  492 expr: r_variable
  493     | expr_without_variable

  494 parenthesis_expr: '(' expr ')'
  495                 | '(' yield_expr ')'

  496 r_variable: variable

  497 w_variable: variable

  498 rw_variable: variable

  499 $@68: /* empty */

  500 $@69: /* empty */

  501 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" $@68 object_property $@69 method_or_not variable_properties
  502         | base_variable_with_function_calls

  503 variable_properties: variable_properties variable_property
  504                    | /* empty */

  505 $@70: /* empty */

  506 variable_property: "-> (T_OBJECT_OPERATOR)" object_property $@70 method_or_not

  507 array_method_dereference: array_method_dereference '[' dim_offset ']'
  508                         | method '[' dim_offset ']'

  509 @71: /* empty */

  510 method: @71 function_call_parameter_list

  511 method_or_not: method
  512              | array_method_dereference
  513              | /* empty */

  514 variable_without_objects: reference_variable
  515                         | simple_indirect_reference reference_variable

  516 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects
  517              | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

  518 variable_class_name: reference_variable

  519 array_function_dereference: array_function_dereference '[' dim_offset ']'

  520 $@72: /* empty */

  521 array_function_dereference: function_call $@72 '[' dim_offset ']'

  522 base_variable_with_function_calls: base_variable
  523                                  | array_function_dereference
  524                                  | function_call

  525 base_variable: reference_variable
  526              | simple_indirect_reference reference_variable
  527              | static_member

  528 reference_variable: reference_variable '[' dim_offset ']'
  529                   | reference_variable '{' expr '}'
  530                   | compound_variable

  531 compound_variable: "variable (T_VARIABLE)"
  532                  | '$' '{' expr '}'

  533 dim_offset: /* empty */
  534           | expr

  535 object_property: object_dim_list

  536 $@73: /* empty */

  537 object_property: variable_without_objects $@73

  538 object_dim_list: object_dim_list '[' dim_offset ']'
  539                | object_dim_list '{' expr '}'
  540                | variable_name

  541 variable_name: "identifier (T_STRING)"
  542              | '{' expr '}'

  543 simple_indirect_reference: '$'
  544                          | simple_indirect_reference '$'

  545 assignment_list: assignment_list ',' assignment_list_element
  546                | assignment_list_element

  547 assignment_list_element: variable

  548 $@74: /* empty */

  549 assignment_list_element: "list (T_LIST)" '(' $@74 assignment_list ')'
  550                        | /* empty */

  551 array_pair_list: /* empty */
  552                | non_empty_array_pair_list possible_comma

  553 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" expr
  554                          | non_empty_array_pair_list ',' expr
  555                          | expr "=> (T_DOUBLE_ARROW)" expr
  556                          | expr
  557                          | non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  558                          | non_empty_array_pair_list ',' '&' w_variable
  559                          | expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  560                          | '&' w_variable

  561 encaps_list: encaps_list encaps_var
  562            | encaps_list "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"
  563            | encaps_var
  564            | "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" encaps_var

  565 encaps_var: "variable (T_VARIABLE)"

  566 $@75: /* empty */

  567 encaps_var: "variable (T_VARIABLE)" '[' $@75 encaps_var_offset ']'
  568           | "variable (T_VARIABLE)" "-> (T_OBJECT_OPERATOR)" "identifier (T_STRING)"
  569           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" expr '}'
  570           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr ']' '}'
  571           | "{$ (T_CURLY_OPEN)" variable '}'

  572 encaps_var_offset: "identifier (T_STRING)"
  573                  | "number (T_NUM_STRING)"
  574                  | "variable (T_VARIABLE)"

  575 internal_functions_in_yacc: "isset (T_ISSET)" '(' isset_variables ')'
  576                           | "empty (T_EMPTY)" '(' variable ')'
  577                           | "empty (T_EMPTY)" '(' expr_without_variable ')'
  578                           | "include (T_INCLUDE)" expr
  579                           | "include_once (T_INCLUDE_ONCE)" expr
  580                           | "eval (T_EVAL)" '(' expr ')'
  581                           | "require (T_REQUIRE)" expr
  582                           | "require_once (T_REQUIRE_ONCE)" expr

  583 isset_variables: isset_variable

  584 $@76: /* empty */

  585 isset_variables: isset_variables ',' $@76 isset_variable

  586 isset_variable: variable
  587               | expr_without_variable

  588 class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"
  589               | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

  590 static_class_name_scalar: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "class (T_CLASS)"

  591 class_name_scalar: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "class (T_CLASS)"


Terminals, with rules where they appear

"end of file" (0) 0
'!' (33) 322 448
'"' (34) 481
'$' (36) 201 202 532 543 544
'%' (37) 317 447
'&' (38) 118 143 192 196 279 281 309 376 378 451 557 558 559 560
'(' (40) 10 46 65 81 84 87 89 101 111 122 145 187 188 189 214 277 336
    360 362 370 374 412 433 473 494 495 549 575 576 577 580
')' (41) 10 46 65 81 84 87 89 101 111 122 145 187 188 189 214 277 336
    360 362 370 374 412 433 473 494 495 549 575 576 577 580
'*' (42) 314 445
'+' (43) 312 320 443 471
',' (44) 20 26 32 38 113 139 153 180 194 195 196 197 198 203 204 217
    228 250 251 254 256 261 375 376 487 488 489 545 553 554 557 558
    585
'-' (45) 313 321 444 472
'.' (46) 311 455
'/' (47) 316 446
':' (58) 48 55 147 149 151 156 157 163 166 172 176 339 341 469 470
';' (59) 10 11 16 17 18 19 46 55 61 65 68 69 70 71 72 73 74 75 76 77
    78 80 81 90 94 95 147 149 151 155 156 157 164 166 210 211 218 224
    225 236
'<' (60) 328 465
'=' (61) 38 39 152 153 182 204 206 251 253 254 255 277 278 279 281
'>' (62) 330 466
'?' (63) 339 341 469 470
'@' (64) 352
'[' (91) 265 266 367 368 369 371 434 507 508 519 521 528 538 567 570
']' (93) 265 266 367 368 369 371 434 507 508 519 521 528 538 567 570
'^' (94) 310 452
'`' (96) 356
'{' (123) 13 15 49 93 101 104 111 122 124 126 154 155 202 219 237 360
    362 529 532 539 542
'|' (124) 308 450
'}' (125) 13 15 49 93 101 104 111 122 124 126 154 155 202 219 237 360
    362 529 532 539 542 569 570 571
'~' (126) 323 449
error (256)
"require_once (T_REQUIRE_ONCE)" (258) 582
"require (T_REQUIRE)" (259) 581
"eval (T_EVAL)" (260) 580
"include_once (T_INCLUDE_ONCE)" (261) 579
"include (T_INCLUDE)" (262) 578
"or (T_LOGICAL_OR)" (263) 304 458
"xor (T_LOGICAL_XOR)" (264) 307 456
"and (T_LOGICAL_AND)" (265) 306 457
"print (T_PRINT)" (266) 357
"yield (T_YIELD)" (267) 358 363 364 365 366
"**= (T_POW_EQUAL)" (268) 286
">>= (T_SR_EQUAL)" (269) 294
"<<= (T_SL_EQUAL)" (270) 293
"^= (T_XOR_EQUAL)" (271) 292
"|= (T_OR_EQUAL)" (272) 291
"&= (T_AND_EQUAL)" (273) 290
"%= (T_MOD_EQUAL)" (274) 289
".= (T_CONCAT_EQUAL)" (275) 288
"/= (T_DIV_EQUAL)" (276) 287
"*= (T_MUL_EQUAL)" (277) 285
"-= (T_MINUS_EQUAL)" (278) 284
"+= (T_PLUS_EQUAL)" (279) 283
"|| (T_BOOLEAN_OR)" (280) 300 460
"&& (T_BOOLEAN_AND)" (281) 302 459
"!== (T_IS_NOT_IDENTICAL)" (282) 325 462
"=== (T_IS_IDENTICAL)" (283) 324 461
"!= (T_IS_NOT_EQUAL)" (284) 327 464
"== (T_IS_EQUAL)" (285) 326 463
">= (T_IS_GREATER_OR_EQUAL)" (286) 331 468
"<= (T_IS_SMALLER_OR_EQUAL)" (287) 329 467
">> (T_SR)" (288) 319 454
"<< (T_SL)" (289) 318 453
"instanceof (T_INSTANCEOF)" (290) 332
"(unset) (T_UNSET_CAST)" (291) 349
"(bool) (T_BOOL_CAST)" (292) 348
"(object) (T_OBJECT_CAST)" (293) 347
"(array) (T_ARRAY_CAST)" (294) 346
"(string) (T_STRING_CAST)" (295) 345
"(double) (T_DOUBLE_CAST)" (296) 344
"(int) (T_INT_CAST)" (297) 343
"-- (T_DEC)" (298) 297 298
"++ (T_INC)" (299) 295 296
"** (T_POW)" (300) 315
"clone (T_CLONE)" (301) 282
"new (T_NEW)" (302) 275 281
"exit (T_EXIT)" (303) 350
"if (T_IF)" (304) 52 55
"elseif (T_ELSEIF)" (305) 169 172
"else (T_ELSE)" (306) 174 176
"endif (T_ENDIF)" (307) 55
"integer number (T_LNUMBER)" (308) 419
"floating-point number (T_DNUMBER)" (309) 420
"identifier (T_STRING)" (310) 5 6 23 25 29 31 35 37 38 39 48 95 122
    124 126 152 153 214 229 231 232 254 255 431 541 568 572 588 589
"variable name (T_STRING_VARNAME)" (311) 474 570
"variable (T_VARIABLE)" (312) 101 111 181 182 200 203 204 205 206 250
    251 252 253 375 376 377 378 531 565 567 568 574
"number (T_NUM_STRING)" (313) 573
T_INLINE_HTML (314) 79
T_CHARACTER (315)
T_BAD_CHARACTER (316)
"quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" (317) 415
    429 562 564
"quoted-string (T_CONSTANT_ENCAPSED_STRING)" (318) 369 421
"echo (T_ECHO)" (319) 78
"do (T_DO)" (320) 61
"while (T_WHILE)" (321) 58 61
"endwhile (T_ENDWHILE)" (322) 166
"for (T_FOR)" (323) 65
"endfor (T_ENDFOR)" (324) 147
"foreach (T_FOREACH)" (325) 84 87
"endforeach (T_ENDFOREACH)" (326) 149
"declare (T_DECLARE)" (327) 89
"enddeclare (T_ENDDECLARE)" (328) 151
"as (T_AS)" (329) 23 25 29 31 35 37 84 87 232 233
"switch (T_SWITCH)" (330) 67
"endswitch (T_ENDSWITCH)" (331) 156 157
"case (T_CASE)" (332) 160
"default (T_DEFAULT)" (333) 162
"break (T_BREAK)" (334) 68 69
"continue (T_CONTINUE)" (335) 70 71
"goto (T_GOTO)" (336) 95
"function (T_FUNCTION)" (337) 17 372
"const (T_CONST)" (338) 18 39 255
"return (T_RETURN)" (339) 72 73 74
"try (T_TRY)" (340) 93
"catch (T_CATCH)" (341) 101 111
"finally (T_FINALLY)" (342) 104
"throw (T_THROW)" (343) 94
"use (T_USE)" (344) 16 17 18 215 374
"insteadof (T_INSTEADOF)" (345) 226
"global (T_GLOBAL)" (346) 76
"public (T_PUBLIC)" (347) 244
"protected (T_PROTECTED)" (348) 245
"private (T_PRIVATE)" (349) 246
"final (T_FINAL)" (350) 130 249
"abstract (T_ABSTRACT)" (351) 128 248
"static (T_STATIC)" (352) 77 247 362 395
"var (T_VAR)" (353) 239
"unset (T_UNSET)" (354) 81
"isset (T_ISSET)" (355) 575
"empty (T_EMPTY)" (356) 576 577
"__halt_compiler (T_HALT_COMPILER)" (357) 10 46
"class (T_CLASS)" (358) 127 128 130 590 591
"trait (T_TRAIT)" (359) 129
"interface (T_INTERFACE)" (360) 133
"extends (T_EXTENDS)" (361) 132 135
"implements (T_IMPLEMENTS)" (362) 137
"-> (T_OBJECT_OPERATOR)" (363) 406 410 501 506 568
"=> (T_DOUBLE_ARROW)" (364) 141 365 366 488 490 553 555 557 559
"list (T_LIST)" (365) 145 277 549
"array (T_ARRAY)" (366) 184 370 433
"callable (T_CALLABLE)" (367) 185
"__CLASS__ (T_CLASS_C)" (368) 441 483
"__TRAIT__ (T_TRAIT_C)" (369) 425
"__METHOD__ (T_METHOD_C)" (370) 426
"__FUNCTION__ (T_FUNC_C)" (371) 427
"__LINE__ (T_LINE)" (372) 422
"__FILE__ (T_FILE)" (373) 423
"comment (T_COMMENT)" (374)
"doc comment (T_DOC_COMMENT)" (375)
"open tag (T_OPEN_TAG)" (376)
"open tag with echo (T_OPEN_TAG_WITH_ECHO)" (377)
"close tag (T_CLOSE_TAG)" (378)
"whitespace (T_WHITESPACE)" (379)
"heredoc start (T_START_HEREDOC)" (380) 429 430 482
"heredoc end (T_END_HEREDOC)" (381) 429 430 482
"${ (T_DOLLAR_OPEN_CURLY_BRACES)" (382) 569 570
"{$ (T_CURLY_OPEN)" (383) 571
":: (T_PAAMAYIM_NEKUDOTAYIM)" (384) 231 386 388 390 392 431 516 517
    588 589 590 591
"namespace (T_NAMESPACE)" (385) 11 13 15 382 397 400 438 478
"__NAMESPACE__ (T_NS_C)" (386) 428
"__DIR__ (T_DIR)" (387) 424
"\\ (T_NS_SEPARATOR)" (388) 6 24 25 30 31 36 37 382 384 397 398 400
    401 438 439 478 479
"... (T_ELLIPSIS)" (389) 120 193 197


Nonterminals, with rules where they appear

$accept (163)
    on left: 0
start (164)
    on left: 1, on right: 0
top_statement_list (165)
    on left: 3 4, on right: 1 3 13 15
$@1 (166)
    on left: 2, on right: 3
namespace_name (167)
    on left: 5 6, on right: 6 11 13 22 23 24 25 28 29 30 31 34 35 36
    37 380 382 384 396 397 398 399 400 401 437 438 439 477 478 479
top_statement (168)
    on left: 7 8 9 10 11 13 15 16 17 18 19, on right: 3
$@2 (169)
    on left: 12, on right: 13
$@3 (170)
    on left: 14, on right: 15
use_declarations (171)
    on left: 20 21, on right: 16 20
use_declaration (172)
    on left: 22 23 24 25, on right: 20 21
use_function_declarations (173)
    on left: 26 27, on right: 17 26
use_function_declaration (174)
    on left: 28 29 30 31, on right: 26 27
use_const_declarations (175)
    on left: 32 33, on right: 18 32
use_const_declaration (176)
    on left: 34 35 36 37, on right: 32 33
constant_declaration (177)
    on left: 38 39, on right: 19 38
inner_statement_list (178)
    on left: 41 42, on right: 41 49 55 93 101 104 111 122 147 149 151
    160 162 166 172 176 237 360 362
$@4 (179)
    on left: 40, on right: 41
inner_statement (180)
    on left: 43 44 45 46, on right: 41
statement (181)
    on left: 47 48, on right: 7 43 52 61 146 148 150 165 169 174
unticked_statement (182)
    on left: 49 52 55 58 61 65 67 68 69 70 71 72 73 74 75 76 77 78
    79 80 81 84 87 89 90 93 94 95, on right: 47
$@5 (183)
    on left: 50, on right: 52
$@6 (184)
    on left: 51, on right: 52
$@7 (185)
    on left: 53, on right: 55
$@8 (186)
    on left: 54, on right: 55
$@9 (187)
    on left: 56, on right: 58
@10 (188)
    on left: 57, on right: 58
$@11 (189)
    on left: 59, on right: 61
$@12 (190)
    on left: 60, on right: 61
$@13 (191)
    on left: 62, on right: 65
$@14 (192)
    on left: 63, on right: 65
$@15 (193)
    on left: 64, on right: 65
$@16 (194)
    on left: 66, on right: 67
$@17 (195)
    on left: 82, on right: 84
$@18 (196)
    on left: 83, on right: 84
$@19 (197)
    on left: 85, on right: 87
$@20 (198)
    on left: 86, on right: 87
$@21 (199)
    on left: 88, on right: 89
$@22 (200)
    on left: 91, on right: 93
$@23 (201)
    on left: 92, on right: 93
catch_statement (202)
    on left: 96 101, on right: 93
$@24 (203)
    on left: 97, on right: 101
$@25 (204)
    on left: 98, on right: 101
$@26 (205)
    on left: 99, on right: 101
$@27 (206)
    on left: 100, on right: 101
finally_statement (207)
    on left: 102 104, on right: 93
$@28 (208)
    on left: 103, on right: 104
additional_catches (209)
    on left: 105 106, on right: 101
non_empty_additional_catches (210)
    on left: 107 108, on right: 105 108
additional_catch (211)
    on left: 111, on right: 107 108
@29 (212)
    on left: 109, on right: 111
$@30 (213)
    on left: 110, on right: 111
unset_variables (214)
    on left: 112 113, on right: 81 113
unset_variable (215)
    on left: 114, on right: 112 113
function_declaration_statement (216)
    on left: 115, on right: 8 44
class_declaration_statement (217)
    on left: 116, on right: 9 45
is_reference (218)
    on left: 117 118, on right: 122 181 182 214 360 362
is_variadic (219)
    on left: 119 120, on right: 181 182
unticked_function_declaration_statement (220)
    on left: 122, on right: 115
$@31 (221)
    on left: 121, on right: 122
unticked_class_declaration_statement (222)
    on left: 124 126, on right: 116
$@32 (223)
    on left: 123, on right: 124
$@33 (224)
    on left: 125, on right: 126
class_entry_type (225)
    on left: 127 128 129 130, on right: 124
extends_from (226)
    on left: 131 132, on right: 124
interface_entry (227)
    on left: 133, on right: 126
interface_extends_list (228)
    on left: 134 135, on right: 126
implements_list (229)
    on left: 136 137, on right: 124
interface_list (230)
    on left: 138 139, on right: 135 137 139
foreach_optional_arg (231)
    on left: 140 141, on right: 84 87
foreach_variable (232)
    on left: 142 143 145, on right: 84 87 141
$@34 (233)
    on left: 144, on right: 145
for_statement (234)
    on left: 146 147, on right: 65
foreach_statement (235)
    on left: 148 149, on right: 84 87
declare_statement (236)
    on left: 150 151, on right: 89
declare_list (237)
    on left: 152 153, on right: 89 153
switch_case_list (238)
    on left: 154 155 156 157, on right: 67
case_list (239)
    on left: 158 160 162, on right: 154 155 156 157 160 162
$@35 (240)
    on left: 159, on right: 160
$@36 (241)
    on left: 161, on right: 162
case_separator (242)
    on left: 163 164, on right: 160 162
while_statement (243)
    on left: 165 166, on right: 58
elseif_list (244)
    on left: 167 169, on right: 52 169
$@37 (245)
    on left: 168, on right: 169
new_elseif_list (246)
    on left: 170 172, on right: 55 172
$@38 (247)
    on left: 171, on right: 172
else_single (248)
    on left: 173 174, on right: 52
new_else_single (249)
    on left: 175 176, on right: 55
parameter_list (250)
    on left: 177 178, on right: 122 214 360 362
non_empty_parameter_list (251)
    on left: 179 180, on right: 177 180
parameter (252)
    on left: 181 182, on right: 179 180
optional_class_type (253)
    on left: 183 184 185 186, on right: 181 182
function_call_parameter_list (254)
    on left: 187 188 189, on right: 380 382 384 386 388 390 392 394
    418 510
non_empty_function_call_parameter_list (255)
    on left: 190 191 192 193 194 195 196 197, on right: 188 194 195
    196 197
global_var_list (256)
    on left: 198 199, on right: 76 198
global_var (257)
    on left: 200 201 202, on right: 198 199
static_var_list (258)
    on left: 203 204 205 206, on right: 77 203 204
class_statement_list (259)
    on left: 207 208, on right: 124 126 207
class_statement (260)
    on left: 210 211 212 214, on right: 207
$@39 (261)
    on left: 209, on right: 210
$@40 (262)
    on left: 213, on right: 214
trait_use_statement (263)
    on left: 215, on right: 212
trait_list (264)
    on left: 216 217, on right: 215 217
trait_adaptations (265)
    on left: 218 219, on right: 215
trait_adaptation_list (266)
    on left: 220 221, on right: 219
non_empty_trait_adaptation_list (267)
    on left: 222 223, on right: 221 223
trait_adaptation_statement (268)
    on left: 224 225, on right: 222 223
trait_precedence (269)
    on left: 226, on right: 224
trait_reference_list (270)
    on left: 227 228, on right: 226 228
trait_method_reference (271)
    on left: 229 230, on right: 232 233
trait_method_reference_fully_qualified (272)
    on left: 231, on right: 226 230
trait_alias (273)
    on left: 232 233, on right: 225
trait_modifiers (274)
    on left: 234 235, on right: 232
method_body (275)
    on left: 236 237, on right: 214
variable_modifiers (276)
    on left: 238 239, on right: 210
method_modifiers (277)
    on left: 240 241, on right: 214
non_empty_member_modifiers (278)
    on left: 242 243, on right: 238 241 243
member_modifier (279)
    on left: 244 245 246 247 248 249, on right: 233 235 242 243
class_variable_declaration (280)
    on left: 250 251 252 253, on right: 210 250 251
class_constant_declaration (281)
    on left: 254 255, on right: 211 254
echo_expr_list (282)
    on left: 256 257, on right: 78 256
for_expr (283)
    on left: 258 259, on right: 65
non_empty_for_expr (284)
    on left: 261 262, on right: 259 261
$@41 (285)
    on left: 260, on right: 261
chaining_method_or_property (286)
    on left: 263 264, on right: 263 268 270
chaining_dereference (287)
    on left: 265 266, on right: 265 268 269
chaining_instance_call (288)
    on left: 268 269 270, on right: 273
$@42 (289)
    on left: 267, on right: 268
instance_call (290)
    on left: 271 273, on right: 336
$@43 (291)
    on left: 272, on right: 273
new_expr (292)
    on left: 275, on right: 334 336
$@44 (293)
    on left: 274, on right: 275
expr_without_variable (294)
    on left: 277 278 279 281 282 283 284 285 286 287 288 289 290 291
    292 293 294 295 296 297 298 300 302 304 306 307 308 309 310 311
    312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327
    328 329 330 331 332 333 334 336 339 341 342 343 344 345 346 347
    348 349 350 352 353 354 355 356 357 358 360 362, on right: 73 87
    190 194 363 365 493 577 587
$@45 (295)
    on left: 276, on right: 277
$@46 (296)
    on left: 280, on right: 281
$@47 (297)
    on left: 299, on right: 300
$@48 (298)
    on left: 301, on right: 302
$@49 (299)
    on left: 303, on right: 304
$@50 (300)
    on left: 305, on right: 306
@51 (301)
    on left: 335, on right: 336
$@52 (302)
    on left: 337, on right: 339
$@53 (303)
    on left: 338, on right: 339
$@54 (304)
    on left: 340, on right: 341
$@55 (305)
    on left: 351, on right: 352
@56 (306)
    on left: 359, on right: 360
@57 (307)
    on left: 361, on right: 362
yield_expr (308)
    on left: 363 364 365 366, on right: 75 189 495
combined_scalar_offset (309)
    on left: 367 368 369, on right: 354 368
combined_scalar (310)
    on left: 370 371, on right: 355 367
function (311)
    on left: 372, on right: 122 214 360 362
lexical_vars (312)
    on left: 373 374, on right: 360 362
lexical_var_list (313)
    on left: 375 376 377 378, on right: 374 375 376
function_call (314)
    on left: 380 382 384 386 388 390 392 394, on right: 521 524
@58 (315)
    on left: 379, on right: 380
@59 (316)
    on left: 381, on right: 382
@60 (317)
    on left: 383, on right: 384
@61 (318)
    on left: 385, on right: 386
$@62 (319)
    on left: 387, on right: 388
$@63 (320)
    on left: 389, on right: 390
$@64 (321)
    on left: 391, on right: 392
$@65 (322)
    on left: 393, on right: 394
class_name (323)
    on left: 395 396 397 398, on right: 386 388 402 431 516 588 590
    591
fully_qualified_class_name (324)
    on left: 399 400 401, on right: 101 111 132 138 139 186 216 217
    227 228 231
class_name_reference (325)
    on left: 402 403, on right: 275 281 332
dynamic_class_name_reference (326)
    on left: 406 407, on right: 403
$@66 (327)
    on left: 404, on right: 406
$@67 (328)
    on left: 405, on right: 406
dynamic_class_name_variable_properties (329)
    on left: 408 409, on right: 406 408
dynamic_class_name_variable_property (330)
    on left: 410, on right: 408
exit_expr (331)
    on left: 411 412 413, on right: 350
backticks_expr (332)
    on left: 414 415 416, on right: 356
ctor_arguments (333)
    on left: 417 418, on right: 275 281
common_scalar (334)
    on left: 419 420 421 422 423 424 425 426 427 428 429 430, on right:
    435 480
static_class_constant (335)
    on left: 431, on right: 440
static_scalar (336)
    on left: 432 433 434, on right: 38 39 152 153 182 204 206 251 253
    254 255 488 489 490 491
static_scalar_value (337)
    on left: 435 436 437 438 439 440 441 442, on right: 432 443 444
    445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460
    461 462 463 464 465 466 467 468 469 470 471 472 473
static_operation (338)
    on left: 443 444 445 446 447 448 449 450 451 452 453 454 455 456
    457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472
    473, on right: 442
scalar (339)
    on left: 474 475 476 477 478 479 480 481 482 483, on right: 353
static_array_pair_list (340)
    on left: 484 485, on right: 433 434
possible_comma (341)
    on left: 486 487, on right: 485 552
non_empty_static_array_pair_list (342)
    on left: 488 489 490 491, on right: 485 488 489
expr (343)
    on left: 492 493, on right: 69 71 80 94 160 193 197 202 256 257
    261 262 277 278 282 283 284 285 286 287 288 289 290 291 292 293
    294 300 302 304 306 307 308 309 310 311 312 313 314 315 316 317
    318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 339
    341 343 344 345 346 347 348 349 352 357 365 366 494 529 532 534
    539 542 553 554 555 556 557 559 569 570 578 579 580 581 582
parenthesis_expr (344)
    on left: 494 495, on right: 52 55 58 61 67 169 172 333 413
r_variable (345)
    on left: 496, on right: 201 492
w_variable (346)
    on left: 497, on right: 192 196 557 558 559 560
rw_variable (347)
    on left: 498, on right: 295 296 297 298
variable (348)
    on left: 501 502, on right: 74 84 114 142 143 191 195 278 279 281
    283 284 285 286 287 288 289 290 291 292 293 294 364 366 496 497
    498 547 571 576 586
$@68 (349)
    on left: 499, on right: 501
$@69 (350)
    on left: 500, on right: 501
variable_properties (351)
    on left: 503 504, on right: 501 503
variable_property (352)
    on left: 506, on right: 263 264 503
$@70 (353)
    on left: 505, on right: 506
array_method_dereference (354)
    on left: 507 508, on right: 507 512
method (355)
    on left: 510, on right: 508 511
@71 (356)
    on left: 509, on right: 510
method_or_not (357)
    on left: 511 512 513, on right: 501 506
variable_without_objects (358)
    on left: 514 515, on right: 388 392 394 516 517 537
static_member (359)
    on left: 516 517, on right: 527
variable_class_name (360)
    on left: 518, on right: 390 392 517 589
array_function_dereference (361)
    on left: 519 521, on right: 519 523
$@72 (362)
    on left: 520, on right: 521
base_variable_with_function_calls (363)
    on left: 522 523 524, on right: 501 502
base_variable (364)
    on left: 525 526 527, on right: 406 407 522
reference_variable (365)
    on left: 528 529 530, on right: 514 515 518 525 526 528 529
compound_variable (366)
    on left: 531 532, on right: 530
dim_offset (367)
    on left: 533 534, on right: 265 266 367 368 369 507 508 519 521
    528 538
object_property (368)
    on left: 535 537, on right: 406 410 501 506
$@73 (369)
    on left: 536, on right: 537
object_dim_list (370)
    on left: 538 539 540, on right: 535 538 539
variable_name (371)
    on left: 541 542, on right: 386 390 540
simple_indirect_reference (372)
    on left: 543 544, on right: 515 526 544
assignment_list (373)
    on left: 545 546, on right: 145 277 545 549
assignment_list_element (374)
    on left: 547 549 550, on right: 545 546
$@74 (375)
    on left: 548, on right: 549
array_pair_list (376)
    on left: 551 552, on right: 370 371
non_empty_array_pair_list (377)
    on left: 553 554 555 556 557 558 559 560, on right: 552 553 554
    557 558
encaps_list (378)
    on left: 561 562 563 564, on right: 416 481 482 561 562
encaps_var (379)
    on left: 565 567 568 569 570 571, on right: 561 563 564
$@75 (380)
    on left: 566, on right: 567
encaps_var_offset (381)
    on left: 572 573 574, on right: 567
internal_functions_in_yacc (382)
    on left: 575 576 577 578 579 580 581 582, on right: 342
isset_variables (383)
    on left: 583 585, on right: 575 585
$@76 (384)
    on left: 584, on right: 585
isset_variable (385)
    on left: 586 587, on right: 583 585
class_constant (386)
    on left: 588 589, on right: 476
static_class_name_scalar (387)
    on left: 590, on right: 436
class_name_scalar (388)
    on left: 591, on right: 475


state 0

    0 $accept: . start "end of file"

    $default  reduce using rule 4 (top_statement_list)

    start               go to state 1
    top_statement_list  go to state 2


state 1

    0 $accept: start . "end of file"

    "end of file"  shift, and go to state 3


state 2

    1 start: top_statement_list .
    3 top_statement_list: top_statement_list . $@1 top_statement

    "end of file"  reduce using rule 1 (start)
    $default       reduce using rule 2 ($@1)

    $@1  go to state 4


state 3

    0 $accept: start "end of file" .

    $default  accept


state 4

    3 top_statement_list: top_statement_list $@1 . top_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "const (T_CONST)"                             shift, and go to state 49
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "use (T_USE)"                                 shift, and go to state 53
    "global (T_GLOBAL)"                           shift, and go to state 54
    "final (T_FINAL)"                             shift, and go to state 55
    "abstract (T_ABSTRACT)"                       shift, and go to state 56
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 61
    "class (T_CLASS)"                             shift, and go to state 62
    "trait (T_TRAIT)"                             shift, and go to state 63
    "interface (T_INTERFACE)"                     shift, and go to state 64
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 74
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 79
    '{'                                           shift, and go to state 80
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                           go to state 84
    top_statement                            go to state 85
    constant_declaration                     go to state 86
    statement                                go to state 87
    unticked_statement                       go to state 88
    function_declaration_statement           go to state 89
    class_declaration_statement              go to state 90
    unticked_function_declaration_statement  go to state 91
    unticked_class_declaration_statement     go to state 92
    class_entry_type                         go to state 93
    interface_entry                          go to state 94
    new_expr                                 go to state 95
    expr_without_variable                    go to state 96
    yield_expr                               go to state 97
    combined_scalar_offset                   go to state 98
    combined_scalar                          go to state 99
    function                                 go to state 100
    function_call                            go to state 101
    class_name                               go to state 102
    common_scalar                            go to state 103
    scalar                                   go to state 104
    expr                                     go to state 105
    parenthesis_expr                         go to state 106
    r_variable                               go to state 107
    rw_variable                              go to state 108
    variable                                 go to state 109
    variable_without_objects                 go to state 110
    static_member                            go to state 111
    variable_class_name                      go to state 112
    array_function_dereference               go to state 113
    base_variable_with_function_calls        go to state 114
    base_variable                            go to state 115
    reference_variable                       go to state 116
    compound_variable                        go to state 117
    simple_indirect_reference                go to state 118
    internal_functions_in_yacc               go to state 119
    class_constant                           go to state 120
    class_name_scalar                        go to state 121


state 5

  582 internal_functions_in_yacc: "require_once (T_REQUIRE_ONCE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 127
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 6

  581 internal_functions_in_yacc: "require (T_REQUIRE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 128
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 7

  580 internal_functions_in_yacc: "eval (T_EVAL)" . '(' expr ')'

    '('  shift, and go to state 129


state 8

  579 internal_functions_in_yacc: "include_once (T_INCLUDE_ONCE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 130
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 9

  578 internal_functions_in_yacc: "include (T_INCLUDE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 131
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 10

  357 expr_without_variable: "print (T_PRINT)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 132
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 11

  358 expr_without_variable: "yield (T_YIELD)" .
  363 yield_expr: "yield (T_YIELD)" . expr_without_variable
  364           | "yield (T_YIELD)" . variable
  365           | "yield (T_YIELD)" . expr "=> (T_DOUBLE_ARROW)" expr_without_variable
  366           | "yield (T_YIELD)" . expr "=> (T_DOUBLE_ARROW)" variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 358 (expr_without_variable)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 133
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 134
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 135
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 12

  320 expr_without_variable: '+' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 136
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 13

  321 expr_without_variable: '-' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 137
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 14

  322 expr_without_variable: '!' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 138
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 15

  323 expr_without_variable: '~' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 139
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 16

  352 expr_without_variable: '@' . $@55 expr

    $default  reduce using rule 351 ($@55)

    $@55  go to state 140


state 17

  349 expr_without_variable: "(unset) (T_UNSET_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 141
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 18

  348 expr_without_variable: "(bool) (T_BOOL_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 142
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 19

  347 expr_without_variable: "(object) (T_OBJECT_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 143
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 20

  346 expr_without_variable: "(array) (T_ARRAY_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 144
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 21

  345 expr_without_variable: "(string) (T_STRING_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 145
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 22

  344 expr_without_variable: "(double) (T_DOUBLE_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 146
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 23

  343 expr_without_variable: "(int) (T_INT_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 147
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 24

  298 expr_without_variable: "-- (T_DEC)" . rw_variable

    "identifier (T_STRING)"    shift, and go to state 123
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 148
    "namespace (T_NAMESPACE)"  shift, and go to state 149
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 150
    '$'                        shift, and go to state 81

    namespace_name                     go to state 151
    function_call                      go to state 101
    class_name                         go to state 152
    rw_variable                        go to state 153
    variable                           go to state 154
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 155
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118


state 25

  296 expr_without_variable: "++ (T_INC)" . rw_variable

    "identifier (T_STRING)"    shift, and go to state 123
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 148
    "namespace (T_NAMESPACE)"  shift, and go to state 149
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 150
    '$'                        shift, and go to state 81

    namespace_name                     go to state 151
    function_call                      go to state 101
    class_name                         go to state 152
    rw_variable                        go to state 156
    variable                           go to state 154
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 155
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118


state 26

  371 combined_scalar: '[' . array_pair_list ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '&'                                           shift, and go to state 157
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 551 (array_pair_list)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 158
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    array_pair_list                    go to state 159
    non_empty_array_pair_list          go to state 160
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 27

  282 expr_without_variable: "clone (T_CLONE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 161
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 28

  275 new_expr: "new (T_NEW)" . class_name_reference $@44 ctor_arguments

    "identifier (T_STRING)"    shift, and go to state 123
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 148
    "namespace (T_NAMESPACE)"  shift, and go to state 162
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 163
    '$'                        shift, and go to state 81

    namespace_name                go to state 164
    class_name                    go to state 165
    class_name_reference          go to state 166
    dynamic_class_name_reference  go to state 167
    static_member                 go to state 111
    variable_class_name           go to state 168
    base_variable                 go to state 169
    reference_variable            go to state 170
    compound_variable             go to state 117
    simple_indirect_reference     go to state 171


state 29

  350 expr_without_variable: "exit (T_EXIT)" . exit_expr

    '('  shift, and go to state 172

    $default  reduce using rule 411 (exit_expr)

    exit_expr         go to state 173
    parenthesis_expr  go to state 174


state 30

   52 unticked_statement: "if (T_IF)" . parenthesis_expr $@5 statement $@6 elseif_list else_single
   55                   | "if (T_IF)" . parenthesis_expr ':' $@7 inner_statement_list $@8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    '('  shift, and go to state 175

    parenthesis_expr  go to state 176


state 31

  419 common_scalar: "integer number (T_LNUMBER)" .

    $default  reduce using rule 419 (common_scalar)


state 32

  420 common_scalar: "floating-point number (T_DNUMBER)" .

    $default  reduce using rule 420 (common_scalar)


state 33

    5 namespace_name: "identifier (T_STRING)" .
   48 statement: "identifier (T_STRING)" . ':'

    ':'  shift, and go to state 177

    $default  reduce using rule 5 (namespace_name)


state 34

  474 scalar: "variable name (T_STRING_VARNAME)" .

    $default  reduce using rule 474 (scalar)


state 35

  531 compound_variable: "variable (T_VARIABLE)" .

    $default  reduce using rule 531 (compound_variable)


state 36

   79 unticked_statement: T_INLINE_HTML .

    $default  reduce using rule 79 (unticked_statement)


state 37

  369 combined_scalar_offset: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" . '[' dim_offset ']'
  421 common_scalar: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" .

    '['  shift, and go to state 178

    $default  reduce using rule 421 (common_scalar)


state 38

   78 unticked_statement: "echo (T_ECHO)" . echo_expr_list ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    echo_expr_list                     go to state 179
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 180
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 39

   61 unticked_statement: "do (T_DO)" . $@11 statement "while (T_WHILE)" $@12 parenthesis_expr ';'

    $default  reduce using rule 59 ($@11)

    $@11  go to state 181


state 40

   58 unticked_statement: "while (T_WHILE)" . $@9 parenthesis_expr @10 while_statement

    $default  reduce using rule 56 ($@9)

    $@9  go to state 182


state 41

   65 unticked_statement: "for (T_FOR)" . '(' for_expr ';' $@13 for_expr ';' $@14 for_expr ')' $@15 for_statement

    '('  shift, and go to state 183


state 42

   84 unticked_statement: "foreach (T_FOREACH)" . '(' variable "as (T_AS)" $@17 foreach_variable foreach_optional_arg ')' $@18 foreach_statement
   87                   | "foreach (T_FOREACH)" . '(' expr_without_variable "as (T_AS)" $@19 foreach_variable foreach_optional_arg ')' $@20 foreach_statement

    '('  shift, and go to state 184


state 43

   89 unticked_statement: "declare (T_DECLARE)" . $@21 '(' declare_list ')' declare_statement

    $default  reduce using rule 88 ($@21)

    $@21  go to state 185


state 44

   67 unticked_statement: "switch (T_SWITCH)" . parenthesis_expr $@16 switch_case_list

    '('  shift, and go to state 175

    parenthesis_expr  go to state 186


state 45

   68 unticked_statement: "break (T_BREAK)" . ';'
   69                   | "break (T_BREAK)" . expr ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 187
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 188
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 46

   70 unticked_statement: "continue (T_CONTINUE)" . ';'
   71                   | "continue (T_CONTINUE)" . expr ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 189
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 190
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 47

   95 unticked_statement: "goto (T_GOTO)" . "identifier (T_STRING)" ';'

    "identifier (T_STRING)"  shift, and go to state 191


state 48

  372 function: "function (T_FUNCTION)" .

    $default  reduce using rule 372 (function)


state 49

   39 constant_declaration: "const (T_CONST)" . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 192


state 50

   72 unticked_statement: "return (T_RETURN)" . ';'
   73                   | "return (T_RETURN)" . expr_without_variable ';'
   74                   | "return (T_RETURN)" . variable ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 193
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 194
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 195
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 196
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 51

   93 unticked_statement: "try (T_TRY)" . $@22 '{' inner_statement_list '}' catch_statement $@23 finally_statement

    $default  reduce using rule 91 ($@22)

    $@22  go to state 197


state 52

   94 unticked_statement: "throw (T_THROW)" . expr ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 198
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 53

   16 top_statement: "use (T_USE)" . use_declarations ';'
   17              | "use (T_USE)" . "function (T_FUNCTION)" use_function_declarations ';'
   18              | "use (T_USE)" . "const (T_CONST)" use_const_declarations ';'

    "identifier (T_STRING)"  shift, and go to state 123
    "function (T_FUNCTION)"  shift, and go to state 199
    "const (T_CONST)"        shift, and go to state 200
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 201

    namespace_name    go to state 202
    use_declarations  go to state 203
    use_declaration   go to state 204


state 54

   76 unticked_statement: "global (T_GLOBAL)" . global_var_list ';'

    "variable (T_VARIABLE)"  shift, and go to state 205
    '$'                      shift, and go to state 206

    global_var_list  go to state 207
    global_var       go to state 208


state 55

  130 class_entry_type: "final (T_FINAL)" . "class (T_CLASS)"

    "class (T_CLASS)"  shift, and go to state 209


state 56

  128 class_entry_type: "abstract (T_ABSTRACT)" . "class (T_CLASS)"

    "class (T_CLASS)"  shift, and go to state 210


state 57

   77 unticked_statement: "static (T_STATIC)" . static_var_list ';'
  362 expr_without_variable: "static (T_STATIC)" . function is_reference @57 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'
  395 class_name: "static (T_STATIC)" .

    "variable (T_VARIABLE)"  shift, and go to state 211
    "function (T_FUNCTION)"  shift, and go to state 48

    $default  reduce using rule 395 (class_name)

    static_var_list  go to state 212
    function         go to state 213


state 58

   81 unticked_statement: "unset (T_UNSET)" . '(' unset_variables ')' ';'

    '('  shift, and go to state 214


state 59

  575 internal_functions_in_yacc: "isset (T_ISSET)" . '(' isset_variables ')'

    '('  shift, and go to state 215


state 60

  576 internal_functions_in_yacc: "empty (T_EMPTY)" . '(' variable ')'
  577                           | "empty (T_EMPTY)" . '(' expr_without_variable ')'

    '('  shift, and go to state 216


state 61

   10 top_statement: "__halt_compiler (T_HALT_COMPILER)" . '(' ')' ';'

    '('  shift, and go to state 217


state 62

  127 class_entry_type: "class (T_CLASS)" .

    $default  reduce using rule 127 (class_entry_type)


state 63

  129 class_entry_type: "trait (T_TRAIT)" .

    $default  reduce using rule 129 (class_entry_type)


state 64

  133 interface_entry: "interface (T_INTERFACE)" .

    $default  reduce using rule 133 (interface_entry)


state 65

  277 expr_without_variable: "list (T_LIST)" . '(' $@45 assignment_list ')' '=' expr

    '('  shift, and go to state 218


state 66

  370 combined_scalar: "array (T_ARRAY)" . '(' array_pair_list ')'

    '('  shift, and go to state 219


state 67

  483 scalar: "__CLASS__ (T_CLASS_C)" .

    $default  reduce using rule 483 (scalar)


state 68

  425 common_scalar: "__TRAIT__ (T_TRAIT_C)" .

    $default  reduce using rule 425 (common_scalar)


state 69

  426 common_scalar: "__METHOD__ (T_METHOD_C)" .

    $default  reduce using rule 426 (common_scalar)


state 70

  427 common_scalar: "__FUNCTION__ (T_FUNC_C)" .

    $default  reduce using rule 427 (common_scalar)


state 71

  422 common_scalar: "__LINE__ (T_LINE)" .

    $default  reduce using rule 422 (common_scalar)


state 72

  423 common_scalar: "__FILE__ (T_FILE)" .

    $default  reduce using rule 423 (common_scalar)


state 73

  429 common_scalar: "heredoc start (T_START_HEREDOC)" . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)"
  430              | "heredoc start (T_START_HEREDOC)" . "heredoc end (T_END_HEREDOC)"
  482 scalar: "heredoc start (T_START_HEREDOC)" . encaps_list "heredoc end (T_END_HEREDOC)"

    "variable (T_VARIABLE)"                                     shift, and go to state 220
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 221
    "heredoc end (T_END_HEREDOC)"                               shift, and go to state 222
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 223
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 224

    encaps_list  go to state 225
    encaps_var   go to state 226


state 74

   11 top_statement: "namespace (T_NAMESPACE)" . namespace_name ';'
   13              | "namespace (T_NAMESPACE)" . namespace_name '{' $@2 top_statement_list '}'
   15              | "namespace (T_NAMESPACE)" . '{' $@3 top_statement_list '}'
  382 function_call: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name @59 function_call_parameter_list
  397 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name
  478 scalar: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "identifier (T_STRING)"  shift, and go to state 123
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 227
    '{'                      shift, and go to state 228

    namespace_name  go to state 229


state 75

  428 common_scalar: "__NAMESPACE__ (T_NS_C)" .

    $default  reduce using rule 428 (common_scalar)


state 76

  424 common_scalar: "__DIR__ (T_DIR)" .

    $default  reduce using rule 424 (common_scalar)


state 77

  384 function_call: "\\ (T_NS_SEPARATOR)" . namespace_name @60 function_call_parameter_list
  398 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name
  479 scalar: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 123

    namespace_name  go to state 230


state 78

  336 expr_without_variable: '(' . new_expr ')' @51 instance_call
  494 parenthesis_expr: '(' . expr ')'
  495                 | '(' . yield_expr ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 231
    expr_without_variable              go to state 96
    yield_expr                         go to state 232
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 233
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 79

   90 unticked_statement: ';' .

    $default  reduce using rule 90 (unticked_statement)


state 80

   49 unticked_statement: '{' . inner_statement_list '}'

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 234


state 81

  532 compound_variable: '$' . '{' expr '}'
  543 simple_indirect_reference: '$' .

    '{'  shift, and go to state 235

    $default  reduce using rule 543 (simple_indirect_reference)


state 82

  356 expr_without_variable: '`' . backticks_expr '`'

    "variable (T_VARIABLE)"                                     shift, and go to state 220
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 236
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 223
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 224

    $default  reduce using rule 414 (backticks_expr)

    backticks_expr  go to state 237
    encaps_list     go to state 238
    encaps_var      go to state 226


state 83

  481 scalar: '"' . encaps_list '"'

    "variable (T_VARIABLE)"                                     shift, and go to state 220
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 239
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 223
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 224

    encaps_list  go to state 240
    encaps_var   go to state 226


state 84

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  380 function_call: namespace_name . @58 function_call_parameter_list
  396 class_name: namespace_name .
  477 scalar: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 241

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 396 (class_name)
    '('                            reduce using rule 379 (@58)
    $default                       reduce using rule 477 (scalar)

    @58  go to state 242


state 85

    3 top_statement_list: top_statement_list $@1 top_statement .

    $default  reduce using rule 3 (top_statement_list)


state 86

   19 top_statement: constant_declaration . ';'
   38 constant_declaration: constant_declaration . ',' "identifier (T_STRING)" '=' static_scalar

    ','  shift, and go to state 243
    ';'  shift, and go to state 244


state 87

    7 top_statement: statement .

    $default  reduce using rule 7 (top_statement)


state 88

   47 statement: unticked_statement .

    $default  reduce using rule 47 (statement)


state 89

    8 top_statement: function_declaration_statement .

    $default  reduce using rule 8 (top_statement)


state 90

    9 top_statement: class_declaration_statement .

    $default  reduce using rule 9 (top_statement)


state 91

  115 function_declaration_statement: unticked_function_declaration_statement .

    $default  reduce using rule 115 (function_declaration_statement)


state 92

  116 class_declaration_statement: unticked_class_declaration_statement .

    $default  reduce using rule 116 (class_declaration_statement)


state 93

  124 unticked_class_declaration_statement: class_entry_type . "identifier (T_STRING)" extends_from $@32 implements_list '{' class_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 245


state 94

  126 unticked_class_declaration_statement: interface_entry . "identifier (T_STRING)" $@33 interface_extends_list '{' class_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 246


state 95

  334 expr_without_variable: new_expr .

    $default  reduce using rule 334 (expr_without_variable)


state 96

  493 expr: expr_without_variable .

    $default  reduce using rule 493 (expr)


state 97

   75 unticked_statement: yield_expr . ';'

    ';'  shift, and go to state 247


state 98

  354 expr_without_variable: combined_scalar_offset .
  368 combined_scalar_offset: combined_scalar_offset . '[' dim_offset ']'

    '['  shift, and go to state 248

    $default  reduce using rule 354 (expr_without_variable)


state 99

  355 expr_without_variable: combined_scalar .
  367 combined_scalar_offset: combined_scalar . '[' dim_offset ']'

    '['  shift, and go to state 249

    $default  reduce using rule 355 (expr_without_variable)


state 100

  122 unticked_function_declaration_statement: function . is_reference "identifier (T_STRING)" $@31 '(' parameter_list ')' '{' inner_statement_list '}'
  360 expr_without_variable: function . is_reference @56 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '&'  shift, and go to state 250

    $default  reduce using rule 117 (is_reference)

    is_reference  go to state 251


state 101

  521 array_function_dereference: function_call . $@72 '[' dim_offset ']'
  524 base_variable_with_function_calls: function_call .

    '['       reduce using rule 520 ($@72)
    $default  reduce using rule 524 (base_variable_with_function_calls)

    $@72  go to state 252


state 102

  386 function_call: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name @61 function_call_parameter_list
  388              | class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@62 function_call_parameter_list
  516 static_member: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects
  588 class_constant: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"
  591 class_name_scalar: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "class (T_CLASS)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 253


state 103

  480 scalar: common_scalar .

    $default  reduce using rule 480 (scalar)


state 104

  353 expr_without_variable: scalar .

    $default  reduce using rule 353 (expr_without_variable)


state 105

   80 unticked_statement: expr . ';'
  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280
    ';'                           shift, and go to state 281


state 106

  333 expr_without_variable: parenthesis_expr .

    $default  reduce using rule 333 (expr_without_variable)


state 107

  492 expr: r_variable .

    $default  reduce using rule 492 (expr)


state 108

  295 expr_without_variable: rw_variable . "++ (T_INC)"
  297                      | rw_variable . "-- (T_DEC)"

    "-- (T_DEC)"  shift, and go to state 282
    "++ (T_INC)"  shift, and go to state 283


state 109

  278 expr_without_variable: variable . '=' expr
  279                      | variable . '=' '&' variable
  281                      | variable . '=' '&' "new (T_NEW)" class_name_reference $@46 ctor_arguments
  283                      | variable . "+= (T_PLUS_EQUAL)" expr
  284                      | variable . "-= (T_MINUS_EQUAL)" expr
  285                      | variable . "*= (T_MUL_EQUAL)" expr
  286                      | variable . "**= (T_POW_EQUAL)" expr
  287                      | variable . "/= (T_DIV_EQUAL)" expr
  288                      | variable . ".= (T_CONCAT_EQUAL)" expr
  289                      | variable . "%= (T_MOD_EQUAL)" expr
  290                      | variable . "&= (T_AND_EQUAL)" expr
  291                      | variable . "|= (T_OR_EQUAL)" expr
  292                      | variable . "^= (T_XOR_EQUAL)" expr
  293                      | variable . "<<= (T_SL_EQUAL)" expr
  294                      | variable . ">>= (T_SR_EQUAL)" expr
  496 r_variable: variable .
  498 rw_variable: variable .

    '='                    shift, and go to state 284
    "**= (T_POW_EQUAL)"    shift, and go to state 285
    ">>= (T_SR_EQUAL)"     shift, and go to state 286
    "<<= (T_SL_EQUAL)"     shift, and go to state 287
    "^= (T_XOR_EQUAL)"     shift, and go to state 288
    "|= (T_OR_EQUAL)"      shift, and go to state 289
    "&= (T_AND_EQUAL)"     shift, and go to state 290
    "%= (T_MOD_EQUAL)"     shift, and go to state 291
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 292
    "/= (T_DIV_EQUAL)"     shift, and go to state 293
    "*= (T_MUL_EQUAL)"     shift, and go to state 294
    "-= (T_MINUS_EQUAL)"   shift, and go to state 295
    "+= (T_PLUS_EQUAL)"    shift, and go to state 296

    "-- (T_DEC)"  reduce using rule 498 (rw_variable)
    "++ (T_INC)"  reduce using rule 498 (rw_variable)
    $default      reduce using rule 496 (r_variable)


state 110

  394 function_call: variable_without_objects . $@65 function_call_parameter_list

    $default  reduce using rule 393 ($@65)

    $@65  go to state 297


state 111

  527 base_variable: static_member .

    $default  reduce using rule 527 (base_variable)


state 112

  390 function_call: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name $@63 function_call_parameter_list
  392              | variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@64 function_call_parameter_list
  517 static_member: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects
  589 class_constant: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 298


state 113

  519 array_function_dereference: array_function_dereference . '[' dim_offset ']'
  523 base_variable_with_function_calls: array_function_dereference .

    '['  shift, and go to state 299

    $default  reduce using rule 523 (base_variable_with_function_calls)


state 114

  501 variable: base_variable_with_function_calls . "-> (T_OBJECT_OPERATOR)" $@68 object_property $@69 method_or_not variable_properties
  502         | base_variable_with_function_calls .

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 300

    $default  reduce using rule 502 (variable)


state 115

  522 base_variable_with_function_calls: base_variable .

    $default  reduce using rule 522 (base_variable_with_function_calls)


state 116

  514 variable_without_objects: reference_variable .
  518 variable_class_name: reference_variable .
  525 base_variable: reference_variable .
  528 reference_variable: reference_variable . '[' dim_offset ']'
  529                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 301
    '{'  shift, and go to state 302

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 518 (variable_class_name)
    '('                            reduce using rule 514 (variable_without_objects)
    $default                       reduce using rule 525 (base_variable)


state 117

  530 reference_variable: compound_variable .

    $default  reduce using rule 530 (reference_variable)


state 118

  515 variable_without_objects: simple_indirect_reference . reference_variable
  526 base_variable: simple_indirect_reference . reference_variable
  544 simple_indirect_reference: simple_indirect_reference . '$'

    "variable (T_VARIABLE)"  shift, and go to state 35
    '$'                      shift, and go to state 303

    reference_variable  go to state 304
    compound_variable   go to state 117


state 119

  342 expr_without_variable: internal_functions_in_yacc .

    $default  reduce using rule 342 (expr_without_variable)


state 120

  476 scalar: class_constant .

    $default  reduce using rule 476 (scalar)


state 121

  475 scalar: class_name_scalar .

    $default  reduce using rule 475 (scalar)


state 122

  358 expr_without_variable: "yield (T_YIELD)" .

    $default  reduce using rule 358 (expr_without_variable)


state 123

    5 namespace_name: "identifier (T_STRING)" .

    $default  reduce using rule 5 (namespace_name)


state 124

  362 expr_without_variable: "static (T_STATIC)" . function is_reference @57 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'
  395 class_name: "static (T_STATIC)" .

    "function (T_FUNCTION)"  shift, and go to state 48

    $default  reduce using rule 395 (class_name)

    function  go to state 213


state 125

  382 function_call: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name @59 function_call_parameter_list
  397 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name
  478 scalar: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 227


state 126

  360 expr_without_variable: function . is_reference @56 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '&'  shift, and go to state 250

    $default  reduce using rule 117 (is_reference)

    is_reference  go to state 305


state 127

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  582 internal_functions_in_yacc: "require_once (T_REQUIRE_ONCE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 582 (internal_functions_in_yacc)


state 128

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  581 internal_functions_in_yacc: "require (T_REQUIRE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 581 (internal_functions_in_yacc)


state 129

  580 internal_functions_in_yacc: "eval (T_EVAL)" '(' . expr ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 306
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 130

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  579 internal_functions_in_yacc: "include_once (T_INCLUDE_ONCE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 579 (internal_functions_in_yacc)


state 131

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  578 internal_functions_in_yacc: "include (T_INCLUDE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 578 (internal_functions_in_yacc)


state 132

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  357                      | "print (T_PRINT)" expr .

    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 357 (expr_without_variable)


state 133

  363 yield_expr: "yield (T_YIELD)" expr_without_variable .
  493 expr: expr_without_variable .

    ')'       reduce using rule 363 (yield_expr)
    ';'       reduce using rule 363 (yield_expr)
    $default  reduce using rule 493 (expr)


state 134

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  365 yield_expr: "yield (T_YIELD)" expr . "=> (T_DOUBLE_ARROW)" expr_without_variable
  366           | "yield (T_YIELD)" expr . "=> (T_DOUBLE_ARROW)" variable

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280
    "=> (T_DOUBLE_ARROW)"         shift, and go to state 307


state 135

  278 expr_without_variable: variable . '=' expr
  279                      | variable . '=' '&' variable
  281                      | variable . '=' '&' "new (T_NEW)" class_name_reference $@46 ctor_arguments
  283                      | variable . "+= (T_PLUS_EQUAL)" expr
  284                      | variable . "-= (T_MINUS_EQUAL)" expr
  285                      | variable . "*= (T_MUL_EQUAL)" expr
  286                      | variable . "**= (T_POW_EQUAL)" expr
  287                      | variable . "/= (T_DIV_EQUAL)" expr
  288                      | variable . ".= (T_CONCAT_EQUAL)" expr
  289                      | variable . "%= (T_MOD_EQUAL)" expr
  290                      | variable . "&= (T_AND_EQUAL)" expr
  291                      | variable . "|= (T_OR_EQUAL)" expr
  292                      | variable . "^= (T_XOR_EQUAL)" expr
  293                      | variable . "<<= (T_SL_EQUAL)" expr
  294                      | variable . ">>= (T_SR_EQUAL)" expr
  364 yield_expr: "yield (T_YIELD)" variable .
  496 r_variable: variable .
  498 rw_variable: variable .

    '='                    shift, and go to state 284
    "**= (T_POW_EQUAL)"    shift, and go to state 285
    ">>= (T_SR_EQUAL)"     shift, and go to state 286
    "<<= (T_SL_EQUAL)"     shift, and go to state 287
    "^= (T_XOR_EQUAL)"     shift, and go to state 288
    "|= (T_OR_EQUAL)"      shift, and go to state 289
    "&= (T_AND_EQUAL)"     shift, and go to state 290
    "%= (T_MOD_EQUAL)"     shift, and go to state 291
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 292
    "/= (T_DIV_EQUAL)"     shift, and go to state 293
    "*= (T_MUL_EQUAL)"     shift, and go to state 294
    "-= (T_MINUS_EQUAL)"   shift, and go to state 295
    "+= (T_PLUS_EQUAL)"    shift, and go to state 296

    "-- (T_DEC)"  reduce using rule 498 (rw_variable)
    "++ (T_INC)"  reduce using rule 498 (rw_variable)
    ')'           reduce using rule 364 (yield_expr)
    ';'           reduce using rule 364 (yield_expr)
    $default      reduce using rule 496 (r_variable)


state 136

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  320                      | '+' expr .
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    "** (T_POW)"  shift, and go to state 280

    $default  reduce using rule 320 (expr_without_variable)


state 137

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  321                      | '-' expr .
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    "** (T_POW)"  shift, and go to state 280

    $default  reduce using rule 321 (expr_without_variable)


state 138

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  322                      | '!' expr .
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 279
    "** (T_POW)"                 shift, and go to state 280

    $default  reduce using rule 322 (expr_without_variable)


state 139

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  323                      | '~' expr .
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    "** (T_POW)"  shift, and go to state 280

    $default  reduce using rule 323 (expr_without_variable)


state 140

  352 expr_without_variable: '@' $@55 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 308
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 141

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  349                      | "(unset) (T_UNSET_CAST)" expr .

    "** (T_POW)"  shift, and go to state 280

    $default  reduce using rule 349 (expr_without_variable)


state 142

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  348                      | "(bool) (T_BOOL_CAST)" expr .

    "** (T_POW)"  shift, and go to state 280

    $default  reduce using rule 348 (expr_without_variable)


state 143

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  347                      | "(object) (T_OBJECT_CAST)" expr .

    "** (T_POW)"  shift, and go to state 280

    $default  reduce using rule 347 (expr_without_variable)


state 144

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  346                      | "(array) (T_ARRAY_CAST)" expr .

    "** (T_POW)"  shift, and go to state 280

    $default  reduce using rule 346 (expr_without_variable)


state 145

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  345                      | "(string) (T_STRING_CAST)" expr .

    "** (T_POW)"  shift, and go to state 280

    $default  reduce using rule 345 (expr_without_variable)


state 146

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  344                      | "(double) (T_DOUBLE_CAST)" expr .

    "** (T_POW)"  shift, and go to state 280

    $default  reduce using rule 344 (expr_without_variable)


state 147

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  343                      | "(int) (T_INT_CAST)" expr .

    "** (T_POW)"  shift, and go to state 280

    $default  reduce using rule 343 (expr_without_variable)


state 148

  395 class_name: "static (T_STATIC)" .

    $default  reduce using rule 395 (class_name)


state 149

  382 function_call: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name @59 function_call_parameter_list
  397 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 309


state 150

  384 function_call: "\\ (T_NS_SEPARATOR)" . namespace_name @60 function_call_parameter_list
  398 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 123

    namespace_name  go to state 310


state 151

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  380 function_call: namespace_name . @58 function_call_parameter_list
  396 class_name: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 241

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 396 (class_name)
    $default                       reduce using rule 379 (@58)

    @58  go to state 242


state 152

  386 function_call: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name @61 function_call_parameter_list
  388              | class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@62 function_call_parameter_list
  516 static_member: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 311


state 153

  298 expr_without_variable: "-- (T_DEC)" rw_variable .

    $default  reduce using rule 298 (expr_without_variable)


state 154

  498 rw_variable: variable .

    $default  reduce using rule 498 (rw_variable)


state 155

  390 function_call: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name $@63 function_call_parameter_list
  392              | variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@64 function_call_parameter_list
  517 static_member: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 312


state 156

  296 expr_without_variable: "++ (T_INC)" rw_variable .

    $default  reduce using rule 296 (expr_without_variable)


state 157

  560 non_empty_array_pair_list: '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 123
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 148
    "namespace (T_NAMESPACE)"  shift, and go to state 149
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 150
    '$'                        shift, and go to state 81

    namespace_name                     go to state 151
    function_call                      go to state 101
    class_name                         go to state 152
    w_variable                         go to state 313
    variable                           go to state 314
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 155
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118


state 158

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  555 non_empty_array_pair_list: expr . "=> (T_DOUBLE_ARROW)" expr
  556                          | expr .
  559                          | expr . "=> (T_DOUBLE_ARROW)" '&' w_variable

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280
    "=> (T_DOUBLE_ARROW)"         shift, and go to state 315

    $default  reduce using rule 556 (non_empty_array_pair_list)


state 159

  371 combined_scalar: '[' array_pair_list . ']'

    ']'  shift, and go to state 316


state 160

  552 array_pair_list: non_empty_array_pair_list . possible_comma
  553 non_empty_array_pair_list: non_empty_array_pair_list . ',' expr "=> (T_DOUBLE_ARROW)" expr
  554                          | non_empty_array_pair_list . ',' expr
  557                          | non_empty_array_pair_list . ',' expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  558                          | non_empty_array_pair_list . ',' '&' w_variable

    ','  shift, and go to state 317

    $default  reduce using rule 486 (possible_comma)

    possible_comma  go to state 318


state 161

  282 expr_without_variable: "clone (T_CLONE)" expr .
  300                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    $default  reduce using rule 282 (expr_without_variable)


state 162

  397 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 319


state 163

  398 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 123

    namespace_name  go to state 320


state 164

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  396 class_name: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 241

    $default  reduce using rule 396 (class_name)


state 165

  402 class_name_reference: class_name .
  516 static_member: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 321

    $default  reduce using rule 402 (class_name_reference)


state 166

  275 new_expr: "new (T_NEW)" class_name_reference . $@44 ctor_arguments

    $default  reduce using rule 274 ($@44)

    $@44  go to state 322


state 167

  403 class_name_reference: dynamic_class_name_reference .

    $default  reduce using rule 403 (class_name_reference)


state 168

  517 static_member: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 323


state 169

  406 dynamic_class_name_reference: base_variable . "-> (T_OBJECT_OPERATOR)" $@66 object_property $@67 dynamic_class_name_variable_properties
  407                             | base_variable .

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 324

    $default  reduce using rule 407 (dynamic_class_name_reference)


state 170

  518 variable_class_name: reference_variable .
  525 base_variable: reference_variable .
  528 reference_variable: reference_variable . '[' dim_offset ']'
  529                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 301
    '{'  shift, and go to state 302

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 518 (variable_class_name)
    $default                       reduce using rule 525 (base_variable)


state 171

  526 base_variable: simple_indirect_reference . reference_variable
  544 simple_indirect_reference: simple_indirect_reference . '$'

    "variable (T_VARIABLE)"  shift, and go to state 35
    '$'                      shift, and go to state 303

    reference_variable  go to state 325
    compound_variable   go to state 117


state 172

  412 exit_expr: '(' . ')'
  494 parenthesis_expr: '(' . expr ')'
  495                 | '(' . yield_expr ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ')'                                           shift, and go to state 326
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    yield_expr                         go to state 232
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 233
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 173

  350 expr_without_variable: "exit (T_EXIT)" exit_expr .

    $default  reduce using rule 350 (expr_without_variable)


state 174

  413 exit_expr: parenthesis_expr .

    $default  reduce using rule 413 (exit_expr)


state 175

  494 parenthesis_expr: '(' . expr ')'
  495                 | '(' . yield_expr ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    yield_expr                         go to state 232
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 233
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 176

   52 unticked_statement: "if (T_IF)" parenthesis_expr . $@5 statement $@6 elseif_list else_single
   55                   | "if (T_IF)" parenthesis_expr . ':' $@7 inner_statement_list $@8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    ':'  shift, and go to state 327

    $default  reduce using rule 50 ($@5)

    $@5  go to state 328


state 177

   48 statement: "identifier (T_STRING)" ':' .

    $default  reduce using rule 48 (statement)


state 178

  369 combined_scalar_offset: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 533 (dim_offset)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 329
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    dim_offset                         go to state 330
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 179

   78 unticked_statement: "echo (T_ECHO)" echo_expr_list . ';'
  256 echo_expr_list: echo_expr_list . ',' expr

    ','  shift, and go to state 331
    ';'  shift, and go to state 332


state 180

  257 echo_expr_list: expr .
  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 257 (echo_expr_list)


state 181

   61 unticked_statement: "do (T_DO)" $@11 . statement "while (T_WHILE)" $@12 parenthesis_expr ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 79
    '{'                                           shift, and go to state 80
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    statement                          go to state 333
    unticked_statement                 go to state 88
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    yield_expr                         go to state 97
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 105
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 182

   58 unticked_statement: "while (T_WHILE)" $@9 . parenthesis_expr @10 while_statement

    '('  shift, and go to state 175

    parenthesis_expr  go to state 334


state 183

   65 unticked_statement: "for (T_FOR)" '(' . for_expr ';' $@13 for_expr ';' $@14 for_expr ')' $@15 for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 258 (for_expr)

    namespace_name                     go to state 84
    for_expr                           go to state 335
    non_empty_for_expr                 go to state 336
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 337
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 184

   84 unticked_statement: "foreach (T_FOREACH)" '(' . variable "as (T_AS)" $@17 foreach_variable foreach_optional_arg ')' $@18 foreach_statement
   87                   | "foreach (T_FOREACH)" '(' . expr_without_variable "as (T_AS)" $@19 foreach_variable foreach_optional_arg ')' $@20 foreach_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 338
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 195
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 339
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 185

   89 unticked_statement: "declare (T_DECLARE)" $@21 . '(' declare_list ')' declare_statement

    '('  shift, and go to state 340


state 186

   67 unticked_statement: "switch (T_SWITCH)" parenthesis_expr . $@16 switch_case_list

    $default  reduce using rule 66 ($@16)

    $@16  go to state 341


state 187

   68 unticked_statement: "break (T_BREAK)" ';' .

    $default  reduce using rule 68 (unticked_statement)


state 188

   69 unticked_statement: "break (T_BREAK)" expr . ';'
  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280
    ';'                           shift, and go to state 342


state 189

   70 unticked_statement: "continue (T_CONTINUE)" ';' .

    $default  reduce using rule 70 (unticked_statement)


state 190

   71 unticked_statement: "continue (T_CONTINUE)" expr . ';'
  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280
    ';'                           shift, and go to state 343


state 191

   95 unticked_statement: "goto (T_GOTO)" "identifier (T_STRING)" . ';'

    ';'  shift, and go to state 344


state 192

   39 constant_declaration: "const (T_CONST)" "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 345


state 193

   72 unticked_statement: "return (T_RETURN)" ';' .

    $default  reduce using rule 72 (unticked_statement)


state 194

   73 unticked_statement: "return (T_RETURN)" expr_without_variable . ';'
  493 expr: expr_without_variable .

    ';'  shift, and go to state 346

    $default  reduce using rule 493 (expr)


state 195

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280


state 196

   74 unticked_statement: "return (T_RETURN)" variable . ';'
  278 expr_without_variable: variable . '=' expr
  279                      | variable . '=' '&' variable
  281                      | variable . '=' '&' "new (T_NEW)" class_name_reference $@46 ctor_arguments
  283                      | variable . "+= (T_PLUS_EQUAL)" expr
  284                      | variable . "-= (T_MINUS_EQUAL)" expr
  285                      | variable . "*= (T_MUL_EQUAL)" expr
  286                      | variable . "**= (T_POW_EQUAL)" expr
  287                      | variable . "/= (T_DIV_EQUAL)" expr
  288                      | variable . ".= (T_CONCAT_EQUAL)" expr
  289                      | variable . "%= (T_MOD_EQUAL)" expr
  290                      | variable . "&= (T_AND_EQUAL)" expr
  291                      | variable . "|= (T_OR_EQUAL)" expr
  292                      | variable . "^= (T_XOR_EQUAL)" expr
  293                      | variable . "<<= (T_SL_EQUAL)" expr
  294                      | variable . ">>= (T_SR_EQUAL)" expr
  496 r_variable: variable .
  498 rw_variable: variable .

    '='                    shift, and go to state 284
    "**= (T_POW_EQUAL)"    shift, and go to state 285
    ">>= (T_SR_EQUAL)"     shift, and go to state 286
    "<<= (T_SL_EQUAL)"     shift, and go to state 287
    "^= (T_XOR_EQUAL)"     shift, and go to state 288
    "|= (T_OR_EQUAL)"      shift, and go to state 289
    "&= (T_AND_EQUAL)"     shift, and go to state 290
    "%= (T_MOD_EQUAL)"     shift, and go to state 291
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 292
    "/= (T_DIV_EQUAL)"     shift, and go to state 293
    "*= (T_MUL_EQUAL)"     shift, and go to state 294
    "-= (T_MINUS_EQUAL)"   shift, and go to state 295
    "+= (T_PLUS_EQUAL)"    shift, and go to state 296
    ';'                    shift, and go to state 347

    "-- (T_DEC)"  reduce using rule 498 (rw_variable)
    "++ (T_INC)"  reduce using rule 498 (rw_variable)
    $default      reduce using rule 496 (r_variable)


state 197

   93 unticked_statement: "try (T_TRY)" $@22 . '{' inner_statement_list '}' catch_statement $@23 finally_statement

    '{'  shift, and go to state 348


state 198

   94 unticked_statement: "throw (T_THROW)" expr . ';'
  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280
    ';'                           shift, and go to state 349


state 199

   17 top_statement: "use (T_USE)" "function (T_FUNCTION)" . use_function_declarations ';'

    "identifier (T_STRING)"  shift, and go to state 123
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 350

    namespace_name             go to state 351
    use_function_declarations  go to state 352
    use_function_declaration   go to state 353


state 200

   18 top_statement: "use (T_USE)" "const (T_CONST)" . use_const_declarations ';'

    "identifier (T_STRING)"  shift, and go to state 123
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 354

    namespace_name          go to state 355
    use_const_declarations  go to state 356
    use_const_declaration   go to state 357


state 201

   24 use_declaration: "\\ (T_NS_SEPARATOR)" . namespace_name
   25                | "\\ (T_NS_SEPARATOR)" . namespace_name "as (T_AS)" "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 123

    namespace_name  go to state 358


state 202

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   22 use_declaration: namespace_name .
   23                | namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 359
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 241

    $default  reduce using rule 22 (use_declaration)


state 203

   16 top_statement: "use (T_USE)" use_declarations . ';'
   20 use_declarations: use_declarations . ',' use_declaration

    ','  shift, and go to state 360
    ';'  shift, and go to state 361


state 204

   21 use_declarations: use_declaration .

    $default  reduce using rule 21 (use_declarations)


state 205

  200 global_var: "variable (T_VARIABLE)" .

    $default  reduce using rule 200 (global_var)


state 206

  201 global_var: '$' . r_variable
  202           | '$' . '{' expr '}'

    "identifier (T_STRING)"    shift, and go to state 123
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 148
    "namespace (T_NAMESPACE)"  shift, and go to state 149
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 150
    '{'                        shift, and go to state 362
    '$'                        shift, and go to state 81

    namespace_name                     go to state 151
    function_call                      go to state 101
    class_name                         go to state 152
    r_variable                         go to state 363
    variable                           go to state 364
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 155
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118


state 207

   76 unticked_statement: "global (T_GLOBAL)" global_var_list . ';'
  198 global_var_list: global_var_list . ',' global_var

    ','  shift, and go to state 365
    ';'  shift, and go to state 366


state 208

  199 global_var_list: global_var .

    $default  reduce using rule 199 (global_var_list)


state 209

  130 class_entry_type: "final (T_FINAL)" "class (T_CLASS)" .

    $default  reduce using rule 130 (class_entry_type)


state 210

  128 class_entry_type: "abstract (T_ABSTRACT)" "class (T_CLASS)" .

    $default  reduce using rule 128 (class_entry_type)


state 211

  205 static_var_list: "variable (T_VARIABLE)" .
  206                | "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 367

    $default  reduce using rule 205 (static_var_list)


state 212

   77 unticked_statement: "static (T_STATIC)" static_var_list . ';'
  203 static_var_list: static_var_list . ',' "variable (T_VARIABLE)"
  204                | static_var_list . ',' "variable (T_VARIABLE)" '=' static_scalar

    ','  shift, and go to state 368
    ';'  shift, and go to state 369


state 213

  362 expr_without_variable: "static (T_STATIC)" function . is_reference @57 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '&'  shift, and go to state 250

    $default  reduce using rule 117 (is_reference)

    is_reference  go to state 370


state 214

   81 unticked_statement: "unset (T_UNSET)" '(' . unset_variables ')' ';'

    "identifier (T_STRING)"    shift, and go to state 123
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 148
    "namespace (T_NAMESPACE)"  shift, and go to state 149
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 150
    '$'                        shift, and go to state 81

    namespace_name                     go to state 151
    unset_variables                    go to state 371
    unset_variable                     go to state 372
    function_call                      go to state 101
    class_name                         go to state 152
    variable                           go to state 373
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 155
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118


state 215

  575 internal_functions_in_yacc: "isset (T_ISSET)" '(' . isset_variables ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 374
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 195
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 375
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    isset_variables                    go to state 376
    isset_variable                     go to state 377
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 216

  576 internal_functions_in_yacc: "empty (T_EMPTY)" '(' . variable ')'
  577                           | "empty (T_EMPTY)" '(' . expr_without_variable ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 378
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 195
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 379
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 217

   10 top_statement: "__halt_compiler (T_HALT_COMPILER)" '(' . ')' ';'

    ')'  shift, and go to state 380


state 218

  277 expr_without_variable: "list (T_LIST)" '(' . $@45 assignment_list ')' '=' expr

    $default  reduce using rule 276 ($@45)

    $@45  go to state 381


state 219

  370 combined_scalar: "array (T_ARRAY)" '(' . array_pair_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '&'                                           shift, and go to state 157
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 551 (array_pair_list)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 158
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    array_pair_list                    go to state 382
    non_empty_array_pair_list          go to state 160
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 220

  565 encaps_var: "variable (T_VARIABLE)" .
  567           | "variable (T_VARIABLE)" . '[' $@75 encaps_var_offset ']'
  568           | "variable (T_VARIABLE)" . "-> (T_OBJECT_OPERATOR)" "identifier (T_STRING)"

    '['                       shift, and go to state 383
    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 384

    $default  reduce using rule 565 (encaps_var)


state 221

  429 common_scalar: "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . "heredoc end (T_END_HEREDOC)"
  564 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 220
    "heredoc end (T_END_HEREDOC)"      shift, and go to state 385
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 223
    "{$ (T_CURLY_OPEN)"                shift, and go to state 224

    encaps_var  go to state 386


state 222

  430 common_scalar: "heredoc start (T_START_HEREDOC)" "heredoc end (T_END_HEREDOC)" .

    $default  reduce using rule 430 (common_scalar)


state 223

  569 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" . expr '}'
  570           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" . "variable name (T_STRING_VARNAME)" '[' expr ']' '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 387
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 388
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 224

  571 encaps_var: "{$ (T_CURLY_OPEN)" . variable '}'

    "identifier (T_STRING)"    shift, and go to state 123
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 148
    "namespace (T_NAMESPACE)"  shift, and go to state 149
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 150
    '$'                        shift, and go to state 81

    namespace_name                     go to state 151
    function_call                      go to state 101
    class_name                         go to state 152
    variable                           go to state 389
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 155
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118


state 225

  482 scalar: "heredoc start (T_START_HEREDOC)" encaps_list . "heredoc end (T_END_HEREDOC)"
  561 encaps_list: encaps_list . encaps_var
  562            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 220
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 390
    "heredoc end (T_END_HEREDOC)"                               shift, and go to state 391
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 223
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 224

    encaps_var  go to state 392


state 226

  563 encaps_list: encaps_var .

    $default  reduce using rule 563 (encaps_list)


state 227

  382 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name @59 function_call_parameter_list
  397 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name
  478 scalar: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 123

    namespace_name  go to state 393


state 228

   15 top_statement: "namespace (T_NAMESPACE)" '{' . $@3 top_statement_list '}'

    $default  reduce using rule 14 ($@3)

    $@3  go to state 394


state 229

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   11 top_statement: "namespace (T_NAMESPACE)" namespace_name . ';'
   13              | "namespace (T_NAMESPACE)" namespace_name . '{' $@2 top_statement_list '}'

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 241
    ';'                    shift, and go to state 395
    '{'                    shift, and go to state 396


state 230

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  384 function_call: "\\ (T_NS_SEPARATOR)" namespace_name . @60 function_call_parameter_list
  398 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .
  479 scalar: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 241

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 398 (class_name)
    '('                            reduce using rule 383 (@60)
    $default                       reduce using rule 479 (scalar)

    @60  go to state 397


state 231

  334 expr_without_variable: new_expr .
  336                      | '(' new_expr . ')' @51 instance_call

    ')'  shift, and go to state 398

    ')'       [reduce using rule 334 (expr_without_variable)]
    $default  reduce using rule 334 (expr_without_variable)


state 232

  495 parenthesis_expr: '(' yield_expr . ')'

    ')'  shift, and go to state 399


state 233

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  494 parenthesis_expr: '(' expr . ')'

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280
    ')'                           shift, and go to state 400


state 234

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
   49 unticked_statement: '{' inner_statement_list . '}'

    '}'  shift, and go to state 401

    $default  reduce using rule 40 ($@4)

    $@4  go to state 402


state 235

  532 compound_variable: '$' '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 403
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 236

  415 backticks_expr: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" .
  564 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 220
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 223
    "{$ (T_CURLY_OPEN)"                shift, and go to state 224

    $default  reduce using rule 415 (backticks_expr)

    encaps_var  go to state 386


state 237

  356 expr_without_variable: '`' backticks_expr . '`'

    '`'  shift, and go to state 404


state 238

  416 backticks_expr: encaps_list .
  561 encaps_list: encaps_list . encaps_var
  562            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 220
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 390
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 223
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 224

    $default  reduce using rule 416 (backticks_expr)

    encaps_var  go to state 392


state 239

  564 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 220
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 223
    "{$ (T_CURLY_OPEN)"                shift, and go to state 224

    encaps_var  go to state 386


state 240

  481 scalar: '"' encaps_list . '"'
  561 encaps_list: encaps_list . encaps_var
  562            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 220
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 390
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 223
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 224
    '"'                                                         shift, and go to state 405

    encaps_var  go to state 392


state 241

    6 namespace_name: namespace_name "\\ (T_NS_SEPARATOR)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 406


state 242

  380 function_call: namespace_name @58 . function_call_parameter_list

    '('  shift, and go to state 407

    function_call_parameter_list  go to state 408


state 243

   38 constant_declaration: constant_declaration ',' . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 409


state 244

   19 top_statement: constant_declaration ';' .

    $default  reduce using rule 19 (top_statement)


state 245

  124 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" . extends_from $@32 implements_list '{' class_statement_list '}'

    "extends (T_EXTENDS)"  shift, and go to state 410

    $default  reduce using rule 131 (extends_from)

    extends_from  go to state 411


state 246

  126 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" . $@33 interface_extends_list '{' class_statement_list '}'

    $default  reduce using rule 125 ($@33)

    $@33  go to state 412


state 247

   75 unticked_statement: yield_expr ';' .

    $default  reduce using rule 75 (unticked_statement)


state 248

  368 combined_scalar_offset: combined_scalar_offset '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 533 (dim_offset)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 329
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    dim_offset                         go to state 413
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 249

  367 combined_scalar_offset: combined_scalar '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 533 (dim_offset)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 329
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    dim_offset                         go to state 414
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 250

  118 is_reference: '&' .

    $default  reduce using rule 118 (is_reference)


state 251

  122 unticked_function_declaration_statement: function is_reference . "identifier (T_STRING)" $@31 '(' parameter_list ')' '{' inner_statement_list '}'
  360 expr_without_variable: function is_reference . @56 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 415

    $default  reduce using rule 359 (@56)

    @56  go to state 416


state 252

  521 array_function_dereference: function_call $@72 . '[' dim_offset ']'

    '['  shift, and go to state 417


state 253

  386 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name @61 function_call_parameter_list
  388              | class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects $@62 function_call_parameter_list
  516 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects
  588 class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"
  591 class_name_scalar: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "class (T_CLASS)"

    "identifier (T_STRING)"  shift, and go to state 418
    "variable (T_VARIABLE)"  shift, and go to state 35
    "class (T_CLASS)"        shift, and go to state 419
    '{'                      shift, and go to state 420
    '$'                      shift, and go to state 81

    variable_without_objects   go to state 421
    reference_variable         go to state 422
    compound_variable          go to state 117
    variable_name              go to state 423
    simple_indirect_reference  go to state 424


state 254

  304 expr_without_variable: expr "or (T_LOGICAL_OR)" . $@49 expr

    $default  reduce using rule 303 ($@49)

    $@49  go to state 425


state 255

  307 expr_without_variable: expr "xor (T_LOGICAL_XOR)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 426
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 256

  306 expr_without_variable: expr "and (T_LOGICAL_AND)" . $@50 expr

    $default  reduce using rule 305 ($@50)

    $@50  go to state 427


state 257

  339 expr_without_variable: expr '?' . $@52 expr ':' $@53 expr
  341                      | expr '?' . ':' $@54 expr

    ':'  shift, and go to state 428

    $default  reduce using rule 337 ($@52)

    $@52  go to state 429


state 258

  300 expr_without_variable: expr "|| (T_BOOLEAN_OR)" . $@47 expr

    $default  reduce using rule 299 ($@47)

    $@47  go to state 430


state 259

  302 expr_without_variable: expr "&& (T_BOOLEAN_AND)" . $@48 expr

    $default  reduce using rule 301 ($@48)

    $@48  go to state 431


state 260

  308 expr_without_variable: expr '|' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 432
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 261

  310 expr_without_variable: expr '^' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 433
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 262

  309 expr_without_variable: expr '&' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 434
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 263

  325 expr_without_variable: expr "!== (T_IS_NOT_IDENTICAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 435
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 264

  324 expr_without_variable: expr "=== (T_IS_IDENTICAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 436
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 265

  327 expr_without_variable: expr "!= (T_IS_NOT_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 437
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 266

  326 expr_without_variable: expr "== (T_IS_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 438
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 267

  328 expr_without_variable: expr '<' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 439
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 268

  330 expr_without_variable: expr '>' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 440
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 269

  331 expr_without_variable: expr ">= (T_IS_GREATER_OR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 441
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 270

  329 expr_without_variable: expr "<= (T_IS_SMALLER_OR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 442
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 271

  319 expr_without_variable: expr ">> (T_SR)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 443
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 272

  318 expr_without_variable: expr "<< (T_SL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 444
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 273

  312 expr_without_variable: expr '+' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 445
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 274

  313 expr_without_variable: expr '-' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 446
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 275

  311 expr_without_variable: expr '.' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 447
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 276

  314 expr_without_variable: expr '*' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 448
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 277

  316 expr_without_variable: expr '/' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 449
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 278

  317 expr_without_variable: expr '%' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 450
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 279

  332 expr_without_variable: expr "instanceof (T_INSTANCEOF)" . class_name_reference

    "identifier (T_STRING)"    shift, and go to state 123
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 148
    "namespace (T_NAMESPACE)"  shift, and go to state 162
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 163
    '$'                        shift, and go to state 81

    namespace_name                go to state 164
    class_name                    go to state 165
    class_name_reference          go to state 451
    dynamic_class_name_reference  go to state 167
    static_member                 go to state 111
    variable_class_name           go to state 168
    base_variable                 go to state 169
    reference_variable            go to state 170
    compound_variable             go to state 117
    simple_indirect_reference     go to state 171


state 280

  315 expr_without_variable: expr "** (T_POW)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 452
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 281

   80 unticked_statement: expr ';' .

    $default  reduce using rule 80 (unticked_statement)


state 282

  297 expr_without_variable: rw_variable "-- (T_DEC)" .

    $default  reduce using rule 297 (expr_without_variable)


state 283

  295 expr_without_variable: rw_variable "++ (T_INC)" .

    $default  reduce using rule 295 (expr_without_variable)


state 284

  278 expr_without_variable: variable '=' . expr
  279                      | variable '=' . '&' variable
  281                      | variable '=' . '&' "new (T_NEW)" class_name_reference $@46 ctor_arguments

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '&'                                           shift, and go to state 453
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 454
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 285

  286 expr_without_variable: variable "**= (T_POW_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 455
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 286

  294 expr_without_variable: variable ">>= (T_SR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 456
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 287

  293 expr_without_variable: variable "<<= (T_SL_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 457
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 288

  292 expr_without_variable: variable "^= (T_XOR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 458
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 289

  291 expr_without_variable: variable "|= (T_OR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 459
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 290

  290 expr_without_variable: variable "&= (T_AND_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 460
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 291

  289 expr_without_variable: variable "%= (T_MOD_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 461
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 292

  288 expr_without_variable: variable ".= (T_CONCAT_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 462
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 293

  287 expr_without_variable: variable "/= (T_DIV_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 463
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 294

  285 expr_without_variable: variable "*= (T_MUL_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 464
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 295

  284 expr_without_variable: variable "-= (T_MINUS_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 465
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 296

  283 expr_without_variable: variable "+= (T_PLUS_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 466
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 297

  394 function_call: variable_without_objects $@65 . function_call_parameter_list

    '('  shift, and go to state 407

    function_call_parameter_list  go to state 467


state 298

  390 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name $@63 function_call_parameter_list
  392              | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects $@64 function_call_parameter_list
  517 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects
  589 class_constant: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 468
    "variable (T_VARIABLE)"  shift, and go to state 35
    '{'                      shift, and go to state 420
    '$'                      shift, and go to state 81

    variable_without_objects   go to state 469
    reference_variable         go to state 422
    compound_variable          go to state 117
    variable_name              go to state 470
    simple_indirect_reference  go to state 424


state 299

  519 array_function_dereference: array_function_dereference '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 533 (dim_offset)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 329
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    dim_offset                         go to state 471
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 300

  501 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" . $@68 object_property $@69 method_or_not variable_properties

    $default  reduce using rule 499 ($@68)

    $@68  go to state 472


state 301

  528 reference_variable: reference_variable '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 533 (dim_offset)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 329
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    dim_offset                         go to state 473
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 302

  529 reference_variable: reference_variable '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 474
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 303

  532 compound_variable: '$' . '{' expr '}'
  544 simple_indirect_reference: simple_indirect_reference '$' .

    '{'  shift, and go to state 235

    $default  reduce using rule 544 (simple_indirect_reference)


state 304

  515 variable_without_objects: simple_indirect_reference reference_variable .
  526 base_variable: simple_indirect_reference reference_variable .
  528 reference_variable: reference_variable . '[' dim_offset ']'
  529                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 301
    '{'  shift, and go to state 302

    '('       reduce using rule 515 (variable_without_objects)
    $default  reduce using rule 526 (base_variable)


state 305

  360 expr_without_variable: function is_reference . @56 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    $default  reduce using rule 359 (@56)

    @56  go to state 416


state 306

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  580 internal_functions_in_yacc: "eval (T_EVAL)" '(' expr . ')'

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280
    ')'                           shift, and go to state 475


state 307

  365 yield_expr: "yield (T_YIELD)" expr "=> (T_DOUBLE_ARROW)" . expr_without_variable
  366           | "yield (T_YIELD)" expr "=> (T_DOUBLE_ARROW)" . variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 476
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 195
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 477
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 308

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  352                      | '@' $@55 expr .

    "** (T_POW)"  shift, and go to state 280

    $default  reduce using rule 352 (expr_without_variable)


state 309

  382 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name @59 function_call_parameter_list
  397 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 123

    namespace_name  go to state 478


state 310

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  384 function_call: "\\ (T_NS_SEPARATOR)" namespace_name . @60 function_call_parameter_list
  398 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 241

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 398 (class_name)
    $default                       reduce using rule 383 (@60)

    @60  go to state 397


state 311

  386 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name @61 function_call_parameter_list
  388              | class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects $@62 function_call_parameter_list
  516 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "identifier (T_STRING)"  shift, and go to state 479
    "variable (T_VARIABLE)"  shift, and go to state 35
    '{'                      shift, and go to state 420
    '$'                      shift, and go to state 81

    variable_without_objects   go to state 421
    reference_variable         go to state 422
    compound_variable          go to state 117
    variable_name              go to state 423
    simple_indirect_reference  go to state 424


state 312

  390 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name $@63 function_call_parameter_list
  392              | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects $@64 function_call_parameter_list
  517 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "identifier (T_STRING)"  shift, and go to state 479
    "variable (T_VARIABLE)"  shift, and go to state 35
    '{'                      shift, and go to state 420
    '$'                      shift, and go to state 81

    variable_without_objects   go to state 469
    reference_variable         go to state 422
    compound_variable          go to state 117
    variable_name              go to state 470
    simple_indirect_reference  go to state 424


state 313

  560 non_empty_array_pair_list: '&' w_variable .

    $default  reduce using rule 560 (non_empty_array_pair_list)


state 314

  497 w_variable: variable .

    $default  reduce using rule 497 (w_variable)


state 315

  555 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" . expr
  559                          | expr "=> (T_DOUBLE_ARROW)" . '&' w_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '&'                                           shift, and go to state 480
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 481
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 316

  371 combined_scalar: '[' array_pair_list ']' .

    $default  reduce using rule 371 (combined_scalar)


state 317

  487 possible_comma: ',' .
  553 non_empty_array_pair_list: non_empty_array_pair_list ',' . expr "=> (T_DOUBLE_ARROW)" expr
  554                          | non_empty_array_pair_list ',' . expr
  557                          | non_empty_array_pair_list ',' . expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  558                          | non_empty_array_pair_list ',' . '&' w_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '&'                                           shift, and go to state 482
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 487 (possible_comma)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 483
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 318

  552 array_pair_list: non_empty_array_pair_list possible_comma .

    $default  reduce using rule 552 (array_pair_list)


state 319

  397 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 123

    namespace_name  go to state 484


state 320

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  398 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 241

    $default  reduce using rule 398 (class_name)


state 321

  516 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "variable (T_VARIABLE)"  shift, and go to state 35
    '$'                      shift, and go to state 81

    variable_without_objects   go to state 485
    reference_variable         go to state 422
    compound_variable          go to state 117
    simple_indirect_reference  go to state 424


state 322

  275 new_expr: "new (T_NEW)" class_name_reference $@44 . ctor_arguments

    '('  shift, and go to state 407

    $default  reduce using rule 417 (ctor_arguments)

    function_call_parameter_list  go to state 486
    ctor_arguments                go to state 487


state 323

  517 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "variable (T_VARIABLE)"  shift, and go to state 35
    '$'                      shift, and go to state 81

    variable_without_objects   go to state 488
    reference_variable         go to state 422
    compound_variable          go to state 117
    simple_indirect_reference  go to state 424


state 324

  406 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" . $@66 object_property $@67 dynamic_class_name_variable_properties

    $default  reduce using rule 404 ($@66)

    $@66  go to state 489


state 325

  526 base_variable: simple_indirect_reference reference_variable .
  528 reference_variable: reference_variable . '[' dim_offset ']'
  529                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 301
    '{'  shift, and go to state 302

    $default  reduce using rule 526 (base_variable)


state 326

  412 exit_expr: '(' ')' .

    $default  reduce using rule 412 (exit_expr)


state 327

   55 unticked_statement: "if (T_IF)" parenthesis_expr ':' . $@7 inner_statement_list $@8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    $default  reduce using rule 53 ($@7)

    $@7  go to state 490


state 328

   52 unticked_statement: "if (T_IF)" parenthesis_expr $@5 . statement $@6 elseif_list else_single

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 79
    '{'                                           shift, and go to state 80
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    statement                          go to state 491
    unticked_statement                 go to state 88
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    yield_expr                         go to state 97
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 105
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 329

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  534 dim_offset: expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 534 (dim_offset)


state 330

  369 combined_scalar_offset: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" '[' dim_offset . ']'

    ']'  shift, and go to state 492


state 331

  256 echo_expr_list: echo_expr_list ',' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 493
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 332

   78 unticked_statement: "echo (T_ECHO)" echo_expr_list ';' .

    $default  reduce using rule 78 (unticked_statement)


state 333

   61 unticked_statement: "do (T_DO)" $@11 statement . "while (T_WHILE)" $@12 parenthesis_expr ';'

    "while (T_WHILE)"  shift, and go to state 494


state 334

   58 unticked_statement: "while (T_WHILE)" $@9 parenthesis_expr . @10 while_statement

    $default  reduce using rule 57 (@10)

    @10  go to state 495


state 335

   65 unticked_statement: "for (T_FOR)" '(' for_expr . ';' $@13 for_expr ';' $@14 for_expr ')' $@15 for_statement

    ';'  shift, and go to state 496


state 336

  259 for_expr: non_empty_for_expr .
  261 non_empty_for_expr: non_empty_for_expr . ',' $@41 expr

    ','  shift, and go to state 497

    $default  reduce using rule 259 (for_expr)


state 337

  262 non_empty_for_expr: expr .
  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 262 (non_empty_for_expr)


state 338

   87 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable . "as (T_AS)" $@19 foreach_variable foreach_optional_arg ')' $@20 foreach_statement
  493 expr: expr_without_variable .

    "as (T_AS)"  shift, and go to state 498

    $default  reduce using rule 493 (expr)


state 339

   84 unticked_statement: "foreach (T_FOREACH)" '(' variable . "as (T_AS)" $@17 foreach_variable foreach_optional_arg ')' $@18 foreach_statement
  278 expr_without_variable: variable . '=' expr
  279                      | variable . '=' '&' variable
  281                      | variable . '=' '&' "new (T_NEW)" class_name_reference $@46 ctor_arguments
  283                      | variable . "+= (T_PLUS_EQUAL)" expr
  284                      | variable . "-= (T_MINUS_EQUAL)" expr
  285                      | variable . "*= (T_MUL_EQUAL)" expr
  286                      | variable . "**= (T_POW_EQUAL)" expr
  287                      | variable . "/= (T_DIV_EQUAL)" expr
  288                      | variable . ".= (T_CONCAT_EQUAL)" expr
  289                      | variable . "%= (T_MOD_EQUAL)" expr
  290                      | variable . "&= (T_AND_EQUAL)" expr
  291                      | variable . "|= (T_OR_EQUAL)" expr
  292                      | variable . "^= (T_XOR_EQUAL)" expr
  293                      | variable . "<<= (T_SL_EQUAL)" expr
  294                      | variable . ">>= (T_SR_EQUAL)" expr
  496 r_variable: variable .
  498 rw_variable: variable .

    '='                    shift, and go to state 284
    "**= (T_POW_EQUAL)"    shift, and go to state 285
    ">>= (T_SR_EQUAL)"     shift, and go to state 286
    "<<= (T_SL_EQUAL)"     shift, and go to state 287
    "^= (T_XOR_EQUAL)"     shift, and go to state 288
    "|= (T_OR_EQUAL)"      shift, and go to state 289
    "&= (T_AND_EQUAL)"     shift, and go to state 290
    "%= (T_MOD_EQUAL)"     shift, and go to state 291
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 292
    "/= (T_DIV_EQUAL)"     shift, and go to state 293
    "*= (T_MUL_EQUAL)"     shift, and go to state 294
    "-= (T_MINUS_EQUAL)"   shift, and go to state 295
    "+= (T_PLUS_EQUAL)"    shift, and go to state 296
    "as (T_AS)"            shift, and go to state 499

    "-- (T_DEC)"  reduce using rule 498 (rw_variable)
    "++ (T_INC)"  reduce using rule 498 (rw_variable)
    $default      reduce using rule 496 (r_variable)


state 340

   89 unticked_statement: "declare (T_DECLARE)" $@21 '(' . declare_list ')' declare_statement

    "identifier (T_STRING)"  shift, and go to state 500

    declare_list  go to state 501


state 341

   67 unticked_statement: "switch (T_SWITCH)" parenthesis_expr $@16 . switch_case_list

    ':'  shift, and go to state 502
    '{'  shift, and go to state 503

    switch_case_list  go to state 504


state 342

   69 unticked_statement: "break (T_BREAK)" expr ';' .

    $default  reduce using rule 69 (unticked_statement)


state 343

   71 unticked_statement: "continue (T_CONTINUE)" expr ';' .

    $default  reduce using rule 71 (unticked_statement)


state 344

   95 unticked_statement: "goto (T_GOTO)" "identifier (T_STRING)" ';' .

    $default  reduce using rule 95 (unticked_statement)


state 345

   39 constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    '['                                           shift, and go to state 509
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "array (T_ARRAY)"                             shift, and go to state 511
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar             go to state 521
    static_scalar_value       go to state 522
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 346

   73 unticked_statement: "return (T_RETURN)" expr_without_variable ';' .

    $default  reduce using rule 73 (unticked_statement)


state 347

   74 unticked_statement: "return (T_RETURN)" variable ';' .

    $default  reduce using rule 74 (unticked_statement)


state 348

   93 unticked_statement: "try (T_TRY)" $@22 '{' . inner_statement_list '}' catch_statement $@23 finally_statement

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 525


state 349

   94 unticked_statement: "throw (T_THROW)" expr ';' .

    $default  reduce using rule 94 (unticked_statement)


state 350

   30 use_function_declaration: "\\ (T_NS_SEPARATOR)" . namespace_name
   31                         | "\\ (T_NS_SEPARATOR)" . namespace_name "as (T_AS)" "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 123

    namespace_name  go to state 526


state 351

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   28 use_function_declaration: namespace_name .
   29                         | namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 527
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 241

    $default  reduce using rule 28 (use_function_declaration)


state 352

   17 top_statement: "use (T_USE)" "function (T_FUNCTION)" use_function_declarations . ';'
   26 use_function_declarations: use_function_declarations . ',' use_function_declaration

    ','  shift, and go to state 528
    ';'  shift, and go to state 529


state 353

   27 use_function_declarations: use_function_declaration .

    $default  reduce using rule 27 (use_function_declarations)


state 354

   36 use_const_declaration: "\\ (T_NS_SEPARATOR)" . namespace_name
   37                      | "\\ (T_NS_SEPARATOR)" . namespace_name "as (T_AS)" "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 123

    namespace_name  go to state 530


state 355

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   34 use_const_declaration: namespace_name .
   35                      | namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 531
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 241

    $default  reduce using rule 34 (use_const_declaration)


state 356

   18 top_statement: "use (T_USE)" "const (T_CONST)" use_const_declarations . ';'
   32 use_const_declarations: use_const_declarations . ',' use_const_declaration

    ','  shift, and go to state 532
    ';'  shift, and go to state 533


state 357

   33 use_const_declarations: use_const_declaration .

    $default  reduce using rule 33 (use_const_declarations)


state 358

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   24 use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name .
   25                | "\\ (T_NS_SEPARATOR)" namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 534
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 241

    $default  reduce using rule 24 (use_declaration)


state 359

   23 use_declaration: namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 535


state 360

   20 use_declarations: use_declarations ',' . use_declaration

    "identifier (T_STRING)"  shift, and go to state 123
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 201

    namespace_name   go to state 202
    use_declaration  go to state 536


state 361

   16 top_statement: "use (T_USE)" use_declarations ';' .

    $default  reduce using rule 16 (top_statement)


state 362

  202 global_var: '$' '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 537
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 363

  201 global_var: '$' r_variable .

    $default  reduce using rule 201 (global_var)


state 364

  496 r_variable: variable .

    $default  reduce using rule 496 (r_variable)


state 365

  198 global_var_list: global_var_list ',' . global_var

    "variable (T_VARIABLE)"  shift, and go to state 205
    '$'                      shift, and go to state 206

    global_var  go to state 538


state 366

   76 unticked_statement: "global (T_GLOBAL)" global_var_list ';' .

    $default  reduce using rule 76 (unticked_statement)


state 367

  206 static_var_list: "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    '['                                           shift, and go to state 509
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "array (T_ARRAY)"                             shift, and go to state 511
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar             go to state 539
    static_scalar_value       go to state 522
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 368

  203 static_var_list: static_var_list ',' . "variable (T_VARIABLE)"
  204                | static_var_list ',' . "variable (T_VARIABLE)" '=' static_scalar

    "variable (T_VARIABLE)"  shift, and go to state 540


state 369

   77 unticked_statement: "static (T_STATIC)" static_var_list ';' .

    $default  reduce using rule 77 (unticked_statement)


state 370

  362 expr_without_variable: "static (T_STATIC)" function is_reference . @57 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    $default  reduce using rule 361 (@57)

    @57  go to state 541


state 371

   81 unticked_statement: "unset (T_UNSET)" '(' unset_variables . ')' ';'
  113 unset_variables: unset_variables . ',' unset_variable

    ','  shift, and go to state 542
    ')'  shift, and go to state 543


state 372

  112 unset_variables: unset_variable .

    $default  reduce using rule 112 (unset_variables)


state 373

  114 unset_variable: variable .

    $default  reduce using rule 114 (unset_variable)


state 374

  493 expr: expr_without_variable .
  587 isset_variable: expr_without_variable .

    ','       reduce using rule 587 (isset_variable)
    ')'       reduce using rule 587 (isset_variable)
    $default  reduce using rule 493 (expr)


state 375

  278 expr_without_variable: variable . '=' expr
  279                      | variable . '=' '&' variable
  281                      | variable . '=' '&' "new (T_NEW)" class_name_reference $@46 ctor_arguments
  283                      | variable . "+= (T_PLUS_EQUAL)" expr
  284                      | variable . "-= (T_MINUS_EQUAL)" expr
  285                      | variable . "*= (T_MUL_EQUAL)" expr
  286                      | variable . "**= (T_POW_EQUAL)" expr
  287                      | variable . "/= (T_DIV_EQUAL)" expr
  288                      | variable . ".= (T_CONCAT_EQUAL)" expr
  289                      | variable . "%= (T_MOD_EQUAL)" expr
  290                      | variable . "&= (T_AND_EQUAL)" expr
  291                      | variable . "|= (T_OR_EQUAL)" expr
  292                      | variable . "^= (T_XOR_EQUAL)" expr
  293                      | variable . "<<= (T_SL_EQUAL)" expr
  294                      | variable . ">>= (T_SR_EQUAL)" expr
  496 r_variable: variable .
  498 rw_variable: variable .
  586 isset_variable: variable .

    '='                    shift, and go to state 284
    "**= (T_POW_EQUAL)"    shift, and go to state 285
    ">>= (T_SR_EQUAL)"     shift, and go to state 286
    "<<= (T_SL_EQUAL)"     shift, and go to state 287
    "^= (T_XOR_EQUAL)"     shift, and go to state 288
    "|= (T_OR_EQUAL)"      shift, and go to state 289
    "&= (T_AND_EQUAL)"     shift, and go to state 290
    "%= (T_MOD_EQUAL)"     shift, and go to state 291
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 292
    "/= (T_DIV_EQUAL)"     shift, and go to state 293
    "*= (T_MUL_EQUAL)"     shift, and go to state 294
    "-= (T_MINUS_EQUAL)"   shift, and go to state 295
    "+= (T_PLUS_EQUAL)"    shift, and go to state 296

    ','           reduce using rule 586 (isset_variable)
    "-- (T_DEC)"  reduce using rule 498 (rw_variable)
    "++ (T_INC)"  reduce using rule 498 (rw_variable)
    ')'           reduce using rule 586 (isset_variable)
    $default      reduce using rule 496 (r_variable)


state 376

  575 internal_functions_in_yacc: "isset (T_ISSET)" '(' isset_variables . ')'
  585 isset_variables: isset_variables . ',' $@76 isset_variable

    ','  shift, and go to state 544
    ')'  shift, and go to state 545


state 377

  583 isset_variables: isset_variable .

    $default  reduce using rule 583 (isset_variables)


state 378

  493 expr: expr_without_variable .
  577 internal_functions_in_yacc: "empty (T_EMPTY)" '(' expr_without_variable . ')'

    ')'  shift, and go to state 546

    $default  reduce using rule 493 (expr)


state 379

  278 expr_without_variable: variable . '=' expr
  279                      | variable . '=' '&' variable
  281                      | variable . '=' '&' "new (T_NEW)" class_name_reference $@46 ctor_arguments
  283                      | variable . "+= (T_PLUS_EQUAL)" expr
  284                      | variable . "-= (T_MINUS_EQUAL)" expr
  285                      | variable . "*= (T_MUL_EQUAL)" expr
  286                      | variable . "**= (T_POW_EQUAL)" expr
  287                      | variable . "/= (T_DIV_EQUAL)" expr
  288                      | variable . ".= (T_CONCAT_EQUAL)" expr
  289                      | variable . "%= (T_MOD_EQUAL)" expr
  290                      | variable . "&= (T_AND_EQUAL)" expr
  291                      | variable . "|= (T_OR_EQUAL)" expr
  292                      | variable . "^= (T_XOR_EQUAL)" expr
  293                      | variable . "<<= (T_SL_EQUAL)" expr
  294                      | variable . ">>= (T_SR_EQUAL)" expr
  496 r_variable: variable .
  498 rw_variable: variable .
  576 internal_functions_in_yacc: "empty (T_EMPTY)" '(' variable . ')'

    '='                    shift, and go to state 284
    "**= (T_POW_EQUAL)"    shift, and go to state 285
    ">>= (T_SR_EQUAL)"     shift, and go to state 286
    "<<= (T_SL_EQUAL)"     shift, and go to state 287
    "^= (T_XOR_EQUAL)"     shift, and go to state 288
    "|= (T_OR_EQUAL)"      shift, and go to state 289
    "&= (T_AND_EQUAL)"     shift, and go to state 290
    "%= (T_MOD_EQUAL)"     shift, and go to state 291
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 292
    "/= (T_DIV_EQUAL)"     shift, and go to state 293
    "*= (T_MUL_EQUAL)"     shift, and go to state 294
    "-= (T_MINUS_EQUAL)"   shift, and go to state 295
    "+= (T_PLUS_EQUAL)"    shift, and go to state 296
    ')'                    shift, and go to state 547

    "-- (T_DEC)"  reduce using rule 498 (rw_variable)
    "++ (T_INC)"  reduce using rule 498 (rw_variable)
    $default      reduce using rule 496 (r_variable)


state 380

   10 top_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' . ';'

    ';'  shift, and go to state 548


state 381

  277 expr_without_variable: "list (T_LIST)" '(' $@45 . assignment_list ')' '=' expr

    "identifier (T_STRING)"    shift, and go to state 123
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 148
    "list (T_LIST)"            shift, and go to state 549
    "namespace (T_NAMESPACE)"  shift, and go to state 149
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 150
    '$'                        shift, and go to state 81

    $default  reduce using rule 550 (assignment_list_element)

    namespace_name                     go to state 151
    function_call                      go to state 101
    class_name                         go to state 152
    variable                           go to state 550
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 155
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    assignment_list                    go to state 551
    assignment_list_element            go to state 552


state 382

  370 combined_scalar: "array (T_ARRAY)" '(' array_pair_list . ')'

    ')'  shift, and go to state 553


state 383

  567 encaps_var: "variable (T_VARIABLE)" '[' . $@75 encaps_var_offset ']'

    $default  reduce using rule 566 ($@75)

    $@75  go to state 554


state 384

  568 encaps_var: "variable (T_VARIABLE)" "-> (T_OBJECT_OPERATOR)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 555


state 385

  429 common_scalar: "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)" .

    $default  reduce using rule 429 (common_scalar)


state 386

  564 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" encaps_var .

    $default  reduce using rule 564 (encaps_list)


state 387

  474 scalar: "variable name (T_STRING_VARNAME)" .
  570 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" . '[' expr ']' '}'

    '['  shift, and go to state 556

    $default  reduce using rule 474 (scalar)


state 388

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  569 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280
    '}'                           shift, and go to state 557


state 389

  571 encaps_var: "{$ (T_CURLY_OPEN)" variable . '}'

    '}'  shift, and go to state 558


state 390

  562 encaps_list: encaps_list "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" .

    $default  reduce using rule 562 (encaps_list)


state 391

  482 scalar: "heredoc start (T_START_HEREDOC)" encaps_list "heredoc end (T_END_HEREDOC)" .

    $default  reduce using rule 482 (scalar)


state 392

  561 encaps_list: encaps_list encaps_var .

    $default  reduce using rule 561 (encaps_list)


state 393

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  382 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name . @59 function_call_parameter_list
  397 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .
  478 scalar: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 241

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 397 (class_name)
    '('                            reduce using rule 381 (@59)
    $default                       reduce using rule 478 (scalar)

    @59  go to state 559


state 394

   15 top_statement: "namespace (T_NAMESPACE)" '{' $@3 . top_statement_list '}'

    $default  reduce using rule 4 (top_statement_list)

    top_statement_list  go to state 560


state 395

   11 top_statement: "namespace (T_NAMESPACE)" namespace_name ';' .

    $default  reduce using rule 11 (top_statement)


state 396

   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' . $@2 top_statement_list '}'

    $default  reduce using rule 12 ($@2)

    $@2  go to state 561


state 397

  384 function_call: "\\ (T_NS_SEPARATOR)" namespace_name @60 . function_call_parameter_list

    '('  shift, and go to state 407

    function_call_parameter_list  go to state 562


state 398

  336 expr_without_variable: '(' new_expr ')' . @51 instance_call

    $default  reduce using rule 335 (@51)

    @51  go to state 563


state 399

  495 parenthesis_expr: '(' yield_expr ')' .

    $default  reduce using rule 495 (parenthesis_expr)


state 400

  494 parenthesis_expr: '(' expr ')' .

    $default  reduce using rule 494 (parenthesis_expr)


state 401

   49 unticked_statement: '{' inner_statement_list '}' .

    $default  reduce using rule 49 (unticked_statement)


state 402

   41 inner_statement_list: inner_statement_list $@4 . inner_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "final (T_FINAL)"                             shift, and go to state 55
    "abstract (T_ABSTRACT)"                       shift, and go to state 56
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 564
    "class (T_CLASS)"                             shift, and go to state 62
    "trait (T_TRAIT)"                             shift, and go to state 63
    "interface (T_INTERFACE)"                     shift, and go to state 64
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 79
    '{'                                           shift, and go to state 80
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                           go to state 84
    inner_statement                          go to state 565
    statement                                go to state 566
    unticked_statement                       go to state 88
    function_declaration_statement           go to state 567
    class_declaration_statement              go to state 568
    unticked_function_declaration_statement  go to state 91
    unticked_class_declaration_statement     go to state 92
    class_entry_type                         go to state 93
    interface_entry                          go to state 94
    new_expr                                 go to state 95
    expr_without_variable                    go to state 96
    yield_expr                               go to state 97
    combined_scalar_offset                   go to state 98
    combined_scalar                          go to state 99
    function                                 go to state 100
    function_call                            go to state 101
    class_name                               go to state 102
    common_scalar                            go to state 103
    scalar                                   go to state 104
    expr                                     go to state 105
    parenthesis_expr                         go to state 106
    r_variable                               go to state 107
    rw_variable                              go to state 108
    variable                                 go to state 109
    variable_without_objects                 go to state 110
    static_member                            go to state 111
    variable_class_name                      go to state 112
    array_function_dereference               go to state 113
    base_variable_with_function_calls        go to state 114
    base_variable                            go to state 115
    reference_variable                       go to state 116
    compound_variable                        go to state 117
    simple_indirect_reference                go to state 118
    internal_functions_in_yacc               go to state 119
    class_constant                           go to state 120
    class_name_scalar                        go to state 121


state 403

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  532 compound_variable: '$' '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280
    '}'                           shift, and go to state 569


state 404

  356 expr_without_variable: '`' backticks_expr '`' .

    $default  reduce using rule 356 (expr_without_variable)


state 405

  481 scalar: '"' encaps_list '"' .

    $default  reduce using rule 481 (scalar)


state 406

    6 namespace_name: namespace_name "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)" .

    $default  reduce using rule 6 (namespace_name)


state 407

  187 function_call_parameter_list: '(' . ')'
  188                             | '(' . non_empty_function_call_parameter_list ')'
  189                             | '(' . yield_expr ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '&'                                           shift, and go to state 570
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    "... (T_ELLIPSIS)"                            shift, and go to state 571
    '('                                           shift, and go to state 78
    ')'                                           shift, and go to state 572
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                          go to state 84
    non_empty_function_call_parameter_list  go to state 573
    new_expr                                go to state 95
    expr_without_variable                   go to state 574
    yield_expr                              go to state 575
    combined_scalar_offset                  go to state 98
    combined_scalar                         go to state 99
    function                                go to state 126
    function_call                           go to state 101
    class_name                              go to state 102
    common_scalar                           go to state 103
    scalar                                  go to state 104
    expr                                    go to state 195
    parenthesis_expr                        go to state 106
    r_variable                              go to state 107
    rw_variable                             go to state 108
    variable                                go to state 576
    variable_without_objects                go to state 110
    static_member                           go to state 111
    variable_class_name                     go to state 112
    array_function_dereference              go to state 113
    base_variable_with_function_calls       go to state 114
    base_variable                           go to state 115
    reference_variable                      go to state 116
    compound_variable                       go to state 117
    simple_indirect_reference               go to state 118
    internal_functions_in_yacc              go to state 119
    class_constant                          go to state 120
    class_name_scalar                       go to state 121


state 408

  380 function_call: namespace_name @58 function_call_parameter_list .

    $default  reduce using rule 380 (function_call)


state 409

   38 constant_declaration: constant_declaration ',' "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 577


state 410

  132 extends_from: "extends (T_EXTENDS)" . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 123
    "namespace (T_NAMESPACE)"  shift, and go to state 578
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 579

    namespace_name              go to state 580
    fully_qualified_class_name  go to state 581


state 411

  124 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from . $@32 implements_list '{' class_statement_list '}'

    $default  reduce using rule 123 ($@32)

    $@32  go to state 582


state 412

  126 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" $@33 . interface_extends_list '{' class_statement_list '}'

    "extends (T_EXTENDS)"  shift, and go to state 583

    $default  reduce using rule 134 (interface_extends_list)

    interface_extends_list  go to state 584


state 413

  368 combined_scalar_offset: combined_scalar_offset '[' dim_offset . ']'

    ']'  shift, and go to state 585


state 414

  367 combined_scalar_offset: combined_scalar '[' dim_offset . ']'

    ']'  shift, and go to state 586


state 415

  122 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" . $@31 '(' parameter_list ')' '{' inner_statement_list '}'

    $default  reduce using rule 121 ($@31)

    $@31  go to state 587


state 416

  360 expr_without_variable: function is_reference @56 . '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '('  shift, and go to state 588


state 417

  521 array_function_dereference: function_call $@72 '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 533 (dim_offset)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 329
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    dim_offset                         go to state 589
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 418

  541 variable_name: "identifier (T_STRING)" .
  588 class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    '('       reduce using rule 541 (variable_name)
    $default  reduce using rule 588 (class_constant)


state 419

  591 class_name_scalar: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "class (T_CLASS)" .

    $default  reduce using rule 591 (class_name_scalar)


state 420

  542 variable_name: '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 590
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 421

  388 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects . $@62 function_call_parameter_list
  516 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    '('       reduce using rule 387 ($@62)
    $default  reduce using rule 516 (static_member)

    $@62  go to state 591


state 422

  514 variable_without_objects: reference_variable .
  528 reference_variable: reference_variable . '[' dim_offset ']'
  529                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 301
    '{'  shift, and go to state 302

    $default  reduce using rule 514 (variable_without_objects)


state 423

  386 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name . @61 function_call_parameter_list

    $default  reduce using rule 385 (@61)

    @61  go to state 592


state 424

  515 variable_without_objects: simple_indirect_reference . reference_variable
  544 simple_indirect_reference: simple_indirect_reference . '$'

    "variable (T_VARIABLE)"  shift, and go to state 35
    '$'                      shift, and go to state 303

    reference_variable  go to state 593
    compound_variable   go to state 117


state 425

  304 expr_without_variable: expr "or (T_LOGICAL_OR)" $@49 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 594
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 426

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  307                      | expr "xor (T_LOGICAL_XOR)" expr .
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 307 (expr_without_variable)


state 427

  306 expr_without_variable: expr "and (T_LOGICAL_AND)" $@50 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 595
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 428

  341 expr_without_variable: expr '?' ':' . $@54 expr

    $default  reduce using rule 340 ($@54)

    $@54  go to state 596


state 429

  339 expr_without_variable: expr '?' $@52 . expr ':' $@53 expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 597
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 430

  300 expr_without_variable: expr "|| (T_BOOLEAN_OR)" $@47 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 598
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 431

  302 expr_without_variable: expr "&& (T_BOOLEAN_AND)" $@48 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 599
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 432

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  308                      | expr '|' expr .
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 308 (expr_without_variable)


state 433

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  310                      | expr '^' expr .
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 310 (expr_without_variable)


state 434

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  309                      | expr '&' expr .
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 309 (expr_without_variable)


state 435

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  325                      | expr "!== (T_IS_NOT_IDENTICAL)" expr .
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 325 (expr_without_variable)


state 436

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  324                      | expr "=== (T_IS_IDENTICAL)" expr .
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 324 (expr_without_variable)


state 437

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  327                      | expr "!= (T_IS_NOT_EQUAL)" expr .
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 327 (expr_without_variable)


state 438

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  326                      | expr "== (T_IS_EQUAL)" expr .
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 326 (expr_without_variable)


state 439

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  328                      | expr '<' expr .
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    ">> (T_SR)"                  shift, and go to state 271
    "<< (T_SL)"                  shift, and go to state 272
    '+'                          shift, and go to state 273
    '-'                          shift, and go to state 274
    '.'                          shift, and go to state 275
    '*'                          shift, and go to state 276
    '/'                          shift, and go to state 277
    '%'                          shift, and go to state 278
    "instanceof (T_INSTANCEOF)"  shift, and go to state 279
    "** (T_POW)"                 shift, and go to state 280

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 328 (expr_without_variable)


state 440

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  330                      | expr '>' expr .
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    ">> (T_SR)"                  shift, and go to state 271
    "<< (T_SL)"                  shift, and go to state 272
    '+'                          shift, and go to state 273
    '-'                          shift, and go to state 274
    '.'                          shift, and go to state 275
    '*'                          shift, and go to state 276
    '/'                          shift, and go to state 277
    '%'                          shift, and go to state 278
    "instanceof (T_INSTANCEOF)"  shift, and go to state 279
    "** (T_POW)"                 shift, and go to state 280

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 330 (expr_without_variable)


state 441

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  331                      | expr ">= (T_IS_GREATER_OR_EQUAL)" expr .
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    ">> (T_SR)"                  shift, and go to state 271
    "<< (T_SL)"                  shift, and go to state 272
    '+'                          shift, and go to state 273
    '-'                          shift, and go to state 274
    '.'                          shift, and go to state 275
    '*'                          shift, and go to state 276
    '/'                          shift, and go to state 277
    '%'                          shift, and go to state 278
    "instanceof (T_INSTANCEOF)"  shift, and go to state 279
    "** (T_POW)"                 shift, and go to state 280

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 331 (expr_without_variable)


state 442

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  329                      | expr "<= (T_IS_SMALLER_OR_EQUAL)" expr .
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    ">> (T_SR)"                  shift, and go to state 271
    "<< (T_SL)"                  shift, and go to state 272
    '+'                          shift, and go to state 273
    '-'                          shift, and go to state 274
    '.'                          shift, and go to state 275
    '*'                          shift, and go to state 276
    '/'                          shift, and go to state 277
    '%'                          shift, and go to state 278
    "instanceof (T_INSTANCEOF)"  shift, and go to state 279
    "** (T_POW)"                 shift, and go to state 280

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 329 (expr_without_variable)


state 443

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  319                      | expr ">> (T_SR)" expr .
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    '+'                          shift, and go to state 273
    '-'                          shift, and go to state 274
    '.'                          shift, and go to state 275
    '*'                          shift, and go to state 276
    '/'                          shift, and go to state 277
    '%'                          shift, and go to state 278
    "instanceof (T_INSTANCEOF)"  shift, and go to state 279
    "** (T_POW)"                 shift, and go to state 280

    $default  reduce using rule 319 (expr_without_variable)


state 444

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  318                      | expr "<< (T_SL)" expr .
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    '+'                          shift, and go to state 273
    '-'                          shift, and go to state 274
    '.'                          shift, and go to state 275
    '*'                          shift, and go to state 276
    '/'                          shift, and go to state 277
    '%'                          shift, and go to state 278
    "instanceof (T_INSTANCEOF)"  shift, and go to state 279
    "** (T_POW)"                 shift, and go to state 280

    $default  reduce using rule 318 (expr_without_variable)


state 445

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  312                      | expr '+' expr .
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    '*'                          shift, and go to state 276
    '/'                          shift, and go to state 277
    '%'                          shift, and go to state 278
    "instanceof (T_INSTANCEOF)"  shift, and go to state 279
    "** (T_POW)"                 shift, and go to state 280

    $default  reduce using rule 312 (expr_without_variable)


state 446

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  313                      | expr '-' expr .
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    '*'                          shift, and go to state 276
    '/'                          shift, and go to state 277
    '%'                          shift, and go to state 278
    "instanceof (T_INSTANCEOF)"  shift, and go to state 279
    "** (T_POW)"                 shift, and go to state 280

    $default  reduce using rule 313 (expr_without_variable)


state 447

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  311                      | expr '.' expr .
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    '*'                          shift, and go to state 276
    '/'                          shift, and go to state 277
    '%'                          shift, and go to state 278
    "instanceof (T_INSTANCEOF)"  shift, and go to state 279
    "** (T_POW)"                 shift, and go to state 280

    $default  reduce using rule 311 (expr_without_variable)


state 448

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  314                      | expr '*' expr .
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 279
    "** (T_POW)"                 shift, and go to state 280

    $default  reduce using rule 314 (expr_without_variable)


state 449

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  316                      | expr '/' expr .
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 279
    "** (T_POW)"                 shift, and go to state 280

    $default  reduce using rule 316 (expr_without_variable)


state 450

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  317                      | expr '%' expr .
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 279
    "** (T_POW)"                 shift, and go to state 280

    $default  reduce using rule 317 (expr_without_variable)


state 451

  332 expr_without_variable: expr "instanceof (T_INSTANCEOF)" class_name_reference .

    $default  reduce using rule 332 (expr_without_variable)


state 452

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  315                      | expr "** (T_POW)" expr .
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    "** (T_POW)"  shift, and go to state 280

    $default  reduce using rule 315 (expr_without_variable)


state 453

  279 expr_without_variable: variable '=' '&' . variable
  281                      | variable '=' '&' . "new (T_NEW)" class_name_reference $@46 ctor_arguments

    "new (T_NEW)"              shift, and go to state 600
    "identifier (T_STRING)"    shift, and go to state 123
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 148
    "namespace (T_NAMESPACE)"  shift, and go to state 149
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 150
    '$'                        shift, and go to state 81

    namespace_name                     go to state 151
    function_call                      go to state 101
    class_name                         go to state 152
    variable                           go to state 601
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 155
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118


state 454

  278 expr_without_variable: variable '=' expr .
  300                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 278 (expr_without_variable)


state 455

  286 expr_without_variable: variable "**= (T_POW_EQUAL)" expr .
  300                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 286 (expr_without_variable)


state 456

  294 expr_without_variable: variable ">>= (T_SR_EQUAL)" expr .
  300                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 294 (expr_without_variable)


state 457

  293 expr_without_variable: variable "<<= (T_SL_EQUAL)" expr .
  300                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 293 (expr_without_variable)


state 458

  292 expr_without_variable: variable "^= (T_XOR_EQUAL)" expr .
  300                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 292 (expr_without_variable)


state 459

  291 expr_without_variable: variable "|= (T_OR_EQUAL)" expr .
  300                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 291 (expr_without_variable)


state 460

  290 expr_without_variable: variable "&= (T_AND_EQUAL)" expr .
  300                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 290 (expr_without_variable)


state 461

  289 expr_without_variable: variable "%= (T_MOD_EQUAL)" expr .
  300                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 289 (expr_without_variable)


state 462

  288 expr_without_variable: variable ".= (T_CONCAT_EQUAL)" expr .
  300                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 288 (expr_without_variable)


state 463

  287 expr_without_variable: variable "/= (T_DIV_EQUAL)" expr .
  300                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 287 (expr_without_variable)


state 464

  285 expr_without_variable: variable "*= (T_MUL_EQUAL)" expr .
  300                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 285 (expr_without_variable)


state 465

  284 expr_without_variable: variable "-= (T_MINUS_EQUAL)" expr .
  300                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 284 (expr_without_variable)


state 466

  283 expr_without_variable: variable "+= (T_PLUS_EQUAL)" expr .
  300                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 283 (expr_without_variable)


state 467

  394 function_call: variable_without_objects $@65 function_call_parameter_list .

    $default  reduce using rule 394 (function_call)


state 468

  541 variable_name: "identifier (T_STRING)" .
  589 class_constant: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    '('       reduce using rule 541 (variable_name)
    $default  reduce using rule 589 (class_constant)


state 469

  392 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects . $@64 function_call_parameter_list
  517 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    '('       reduce using rule 391 ($@64)
    $default  reduce using rule 517 (static_member)

    $@64  go to state 602


state 470

  390 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name . $@63 function_call_parameter_list

    $default  reduce using rule 389 ($@63)

    $@63  go to state 603


state 471

  519 array_function_dereference: array_function_dereference '[' dim_offset . ']'

    ']'  shift, and go to state 604


state 472

  501 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" $@68 . object_property $@69 method_or_not variable_properties

    "identifier (T_STRING)"  shift, and go to state 479
    "variable (T_VARIABLE)"  shift, and go to state 35
    '{'                      shift, and go to state 420
    '$'                      shift, and go to state 81

    variable_without_objects   go to state 605
    reference_variable         go to state 422
    compound_variable          go to state 117
    object_property            go to state 606
    object_dim_list            go to state 607
    variable_name              go to state 608
    simple_indirect_reference  go to state 424


state 473

  528 reference_variable: reference_variable '[' dim_offset . ']'

    ']'  shift, and go to state 609


state 474

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  529 reference_variable: reference_variable '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280
    '}'                           shift, and go to state 610


state 475

  580 internal_functions_in_yacc: "eval (T_EVAL)" '(' expr ')' .

    $default  reduce using rule 580 (internal_functions_in_yacc)


state 476

  365 yield_expr: "yield (T_YIELD)" expr "=> (T_DOUBLE_ARROW)" expr_without_variable .
  493 expr: expr_without_variable .

    ')'       reduce using rule 365 (yield_expr)
    ';'       reduce using rule 365 (yield_expr)
    $default  reduce using rule 493 (expr)


state 477

  278 expr_without_variable: variable . '=' expr
  279                      | variable . '=' '&' variable
  281                      | variable . '=' '&' "new (T_NEW)" class_name_reference $@46 ctor_arguments
  283                      | variable . "+= (T_PLUS_EQUAL)" expr
  284                      | variable . "-= (T_MINUS_EQUAL)" expr
  285                      | variable . "*= (T_MUL_EQUAL)" expr
  286                      | variable . "**= (T_POW_EQUAL)" expr
  287                      | variable . "/= (T_DIV_EQUAL)" expr
  288                      | variable . ".= (T_CONCAT_EQUAL)" expr
  289                      | variable . "%= (T_MOD_EQUAL)" expr
  290                      | variable . "&= (T_AND_EQUAL)" expr
  291                      | variable . "|= (T_OR_EQUAL)" expr
  292                      | variable . "^= (T_XOR_EQUAL)" expr
  293                      | variable . "<<= (T_SL_EQUAL)" expr
  294                      | variable . ">>= (T_SR_EQUAL)" expr
  366 yield_expr: "yield (T_YIELD)" expr "=> (T_DOUBLE_ARROW)" variable .
  496 r_variable: variable .
  498 rw_variable: variable .

    '='                    shift, and go to state 284
    "**= (T_POW_EQUAL)"    shift, and go to state 285
    ">>= (T_SR_EQUAL)"     shift, and go to state 286
    "<<= (T_SL_EQUAL)"     shift, and go to state 287
    "^= (T_XOR_EQUAL)"     shift, and go to state 288
    "|= (T_OR_EQUAL)"      shift, and go to state 289
    "&= (T_AND_EQUAL)"     shift, and go to state 290
    "%= (T_MOD_EQUAL)"     shift, and go to state 291
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 292
    "/= (T_DIV_EQUAL)"     shift, and go to state 293
    "*= (T_MUL_EQUAL)"     shift, and go to state 294
    "-= (T_MINUS_EQUAL)"   shift, and go to state 295
    "+= (T_PLUS_EQUAL)"    shift, and go to state 296

    "-- (T_DEC)"  reduce using rule 498 (rw_variable)
    "++ (T_INC)"  reduce using rule 498 (rw_variable)
    ')'           reduce using rule 366 (yield_expr)
    ';'           reduce using rule 366 (yield_expr)
    $default      reduce using rule 496 (r_variable)


state 478

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  382 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name . @59 function_call_parameter_list
  397 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 241

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 397 (class_name)
    $default                       reduce using rule 381 (@59)

    @59  go to state 559


state 479

  541 variable_name: "identifier (T_STRING)" .

    $default  reduce using rule 541 (variable_name)


state 480

  559 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 123
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 148
    "namespace (T_NAMESPACE)"  shift, and go to state 149
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 150
    '$'                        shift, and go to state 81

    namespace_name                     go to state 151
    function_call                      go to state 101
    class_name                         go to state 152
    w_variable                         go to state 611
    variable                           go to state 314
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 155
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118


state 481

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  555 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 555 (non_empty_array_pair_list)


state 482

  558 non_empty_array_pair_list: non_empty_array_pair_list ',' '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 123
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 148
    "namespace (T_NAMESPACE)"  shift, and go to state 149
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 150
    '$'                        shift, and go to state 81

    namespace_name                     go to state 151
    function_call                      go to state 101
    class_name                         go to state 152
    w_variable                         go to state 612
    variable                           go to state 314
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 155
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118


state 483

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  553 non_empty_array_pair_list: non_empty_array_pair_list ',' expr . "=> (T_DOUBLE_ARROW)" expr
  554                          | non_empty_array_pair_list ',' expr .
  557                          | non_empty_array_pair_list ',' expr . "=> (T_DOUBLE_ARROW)" '&' w_variable

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280
    "=> (T_DOUBLE_ARROW)"         shift, and go to state 613

    $default  reduce using rule 554 (non_empty_array_pair_list)


state 484

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  397 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 241

    $default  reduce using rule 397 (class_name)


state 485

  516 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    $default  reduce using rule 516 (static_member)


state 486

  418 ctor_arguments: function_call_parameter_list .

    $default  reduce using rule 418 (ctor_arguments)


state 487

  275 new_expr: "new (T_NEW)" class_name_reference $@44 ctor_arguments .

    $default  reduce using rule 275 (new_expr)


state 488

  517 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    $default  reduce using rule 517 (static_member)


state 489

  406 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" $@66 . object_property $@67 dynamic_class_name_variable_properties

    "identifier (T_STRING)"  shift, and go to state 479
    "variable (T_VARIABLE)"  shift, and go to state 35
    '{'                      shift, and go to state 420
    '$'                      shift, and go to state 81

    variable_without_objects   go to state 605
    reference_variable         go to state 422
    compound_variable          go to state 117
    object_property            go to state 614
    object_dim_list            go to state 607
    variable_name              go to state 608
    simple_indirect_reference  go to state 424


state 490

   55 unticked_statement: "if (T_IF)" parenthesis_expr ':' $@7 . inner_statement_list $@8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 615


state 491

   52 unticked_statement: "if (T_IF)" parenthesis_expr $@5 statement . $@6 elseif_list else_single

    $default  reduce using rule 51 ($@6)

    $@6  go to state 616


state 492

  369 combined_scalar_offset: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" '[' dim_offset ']' .

    $default  reduce using rule 369 (combined_scalar_offset)


state 493

  256 echo_expr_list: echo_expr_list ',' expr .
  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 256 (echo_expr_list)


state 494

   61 unticked_statement: "do (T_DO)" $@11 statement "while (T_WHILE)" . $@12 parenthesis_expr ';'

    $default  reduce using rule 60 ($@12)

    $@12  go to state 617


state 495

   58 unticked_statement: "while (T_WHILE)" $@9 parenthesis_expr @10 . while_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    ':'                                           shift, and go to state 618
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 79
    '{'                                           shift, and go to state 80
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    statement                          go to state 619
    unticked_statement                 go to state 88
    while_statement                    go to state 620
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    yield_expr                         go to state 97
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 105
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 496

   65 unticked_statement: "for (T_FOR)" '(' for_expr ';' . $@13 for_expr ';' $@14 for_expr ')' $@15 for_statement

    $default  reduce using rule 62 ($@13)

    $@13  go to state 621


state 497

  261 non_empty_for_expr: non_empty_for_expr ',' . $@41 expr

    $default  reduce using rule 260 ($@41)

    $@41  go to state 622


state 498

   87 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" . $@19 foreach_variable foreach_optional_arg ')' $@20 foreach_statement

    $default  reduce using rule 85 ($@19)

    $@19  go to state 623


state 499

   84 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" . $@17 foreach_variable foreach_optional_arg ')' $@18 foreach_statement

    $default  reduce using rule 82 ($@17)

    $@17  go to state 624


state 500

  152 declare_list: "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 625


state 501

   89 unticked_statement: "declare (T_DECLARE)" $@21 '(' declare_list . ')' declare_statement
  153 declare_list: declare_list . ',' "identifier (T_STRING)" '=' static_scalar

    ','  shift, and go to state 626
    ')'  shift, and go to state 627


state 502

  156 switch_case_list: ':' . case_list "endswitch (T_ENDSWITCH)" ';'
  157                 | ':' . ';' case_list "endswitch (T_ENDSWITCH)" ';'

    ';'  shift, and go to state 628

    $default  reduce using rule 158 (case_list)

    case_list  go to state 629


state 503

  154 switch_case_list: '{' . case_list '}'
  155                 | '{' . ';' case_list '}'

    ';'  shift, and go to state 630

    $default  reduce using rule 158 (case_list)

    case_list  go to state 631


state 504

   67 unticked_statement: "switch (T_SWITCH)" parenthesis_expr $@16 switch_case_list .

    $default  reduce using rule 67 (unticked_statement)


state 505

  471 static_operation: '+' . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 632
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 506

  472 static_operation: '-' . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 633
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 507

  448 static_operation: '!' . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 634
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 508

  449 static_operation: '~' . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 635
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 509

  434 static_scalar: '[' . static_array_pair_list ']'

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    '['                                           shift, and go to state 509
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "array (T_ARRAY)"                             shift, and go to state 511
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    $default  reduce using rule 484 (static_array_pair_list)

    namespace_name                    go to state 517
    class_name                        go to state 518
    common_scalar                     go to state 519
    static_class_constant             go to state 520
    static_scalar                     go to state 636
    static_scalar_value               go to state 522
    static_operation                  go to state 523
    static_array_pair_list            go to state 637
    non_empty_static_array_pair_list  go to state 638
    static_class_name_scalar          go to state 524


state 510

  421 common_scalar: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" .

    $default  reduce using rule 421 (common_scalar)


state 511

  433 static_scalar: "array (T_ARRAY)" . '(' static_array_pair_list ')'

    '('  shift, and go to state 639


state 512

  441 static_scalar_value: "__CLASS__ (T_CLASS_C)" .

    $default  reduce using rule 441 (static_scalar_value)


state 513

  429 common_scalar: "heredoc start (T_START_HEREDOC)" . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)"
  430              | "heredoc start (T_START_HEREDOC)" . "heredoc end (T_END_HEREDOC)"

    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 640
    "heredoc end (T_END_HEREDOC)"                               shift, and go to state 222


state 514

  397 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name
  438 static_scalar_value: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 641


state 515

  398 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name
  439 static_scalar_value: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 123

    namespace_name  go to state 642


state 516

  473 static_operation: '(' . static_scalar_value ')'

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 643
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 517

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  396 class_name: namespace_name .
  437 static_scalar_value: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 241

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 396 (class_name)
    $default                       reduce using rule 437 (static_scalar_value)


state 518

  431 static_class_constant: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"
  590 static_class_name_scalar: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "class (T_CLASS)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 644


state 519

  435 static_scalar_value: common_scalar .

    $default  reduce using rule 435 (static_scalar_value)


state 520

  440 static_scalar_value: static_class_constant .

    $default  reduce using rule 440 (static_scalar_value)


state 521

   39 constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 39 (constant_declaration)


state 522

  432 static_scalar: static_scalar_value .
  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "or (T_LOGICAL_OR)"           shift, and go to state 645
    "xor (T_LOGICAL_XOR)"         shift, and go to state 646
    "and (T_LOGICAL_AND)"         shift, and go to state 647
    '?'                           shift, and go to state 648
    "|| (T_BOOLEAN_OR)"           shift, and go to state 649
    "&& (T_BOOLEAN_AND)"          shift, and go to state 650
    '|'                           shift, and go to state 651
    '^'                           shift, and go to state 652
    '&'                           shift, and go to state 653
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 654
    "=== (T_IS_IDENTICAL)"        shift, and go to state 655
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 656
    "== (T_IS_EQUAL)"             shift, and go to state 657
    '<'                           shift, and go to state 658
    '>'                           shift, and go to state 659
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 660
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 661
    ">> (T_SR)"                   shift, and go to state 662
    "<< (T_SL)"                   shift, and go to state 663
    '+'                           shift, and go to state 664
    '-'                           shift, and go to state 665
    '.'                           shift, and go to state 666
    '*'                           shift, and go to state 667
    '/'                           shift, and go to state 668
    '%'                           shift, and go to state 669

    $default  reduce using rule 432 (static_scalar)


state 523

  442 static_scalar_value: static_operation .

    $default  reduce using rule 442 (static_scalar_value)


state 524

  436 static_scalar_value: static_class_name_scalar .

    $default  reduce using rule 436 (static_scalar_value)


state 525

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
   93 unticked_statement: "try (T_TRY)" $@22 '{' inner_statement_list . '}' catch_statement $@23 finally_statement

    '}'  shift, and go to state 670

    $default  reduce using rule 40 ($@4)

    $@4  go to state 402


state 526

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   30 use_function_declaration: "\\ (T_NS_SEPARATOR)" namespace_name .
   31                         | "\\ (T_NS_SEPARATOR)" namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 671
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 241

    $default  reduce using rule 30 (use_function_declaration)


state 527

   29 use_function_declaration: namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 672


state 528

   26 use_function_declarations: use_function_declarations ',' . use_function_declaration

    "identifier (T_STRING)"  shift, and go to state 123
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 350

    namespace_name            go to state 351
    use_function_declaration  go to state 673


state 529

   17 top_statement: "use (T_USE)" "function (T_FUNCTION)" use_function_declarations ';' .

    $default  reduce using rule 17 (top_statement)


state 530

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   36 use_const_declaration: "\\ (T_NS_SEPARATOR)" namespace_name .
   37                      | "\\ (T_NS_SEPARATOR)" namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 674
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 241

    $default  reduce using rule 36 (use_const_declaration)


state 531

   35 use_const_declaration: namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 675


state 532

   32 use_const_declarations: use_const_declarations ',' . use_const_declaration

    "identifier (T_STRING)"  shift, and go to state 123
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 354

    namespace_name         go to state 355
    use_const_declaration  go to state 676


state 533

   18 top_statement: "use (T_USE)" "const (T_CONST)" use_const_declarations ';' .

    $default  reduce using rule 18 (top_statement)


state 534

   25 use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 677


state 535

   23 use_declaration: namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 23 (use_declaration)


state 536

   20 use_declarations: use_declarations ',' use_declaration .

    $default  reduce using rule 20 (use_declarations)


state 537

  202 global_var: '$' '{' expr . '}'
  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280
    '}'                           shift, and go to state 678


state 538

  198 global_var_list: global_var_list ',' global_var .

    $default  reduce using rule 198 (global_var_list)


state 539

  206 static_var_list: "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 206 (static_var_list)


state 540

  203 static_var_list: static_var_list ',' "variable (T_VARIABLE)" .
  204                | static_var_list ',' "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 679

    $default  reduce using rule 203 (static_var_list)


state 541

  362 expr_without_variable: "static (T_STATIC)" function is_reference @57 . '(' parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '('  shift, and go to state 680


state 542

  113 unset_variables: unset_variables ',' . unset_variable

    "identifier (T_STRING)"    shift, and go to state 123
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 148
    "namespace (T_NAMESPACE)"  shift, and go to state 149
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 150
    '$'                        shift, and go to state 81

    namespace_name                     go to state 151
    unset_variable                     go to state 681
    function_call                      go to state 101
    class_name                         go to state 152
    variable                           go to state 373
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 155
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118


state 543

   81 unticked_statement: "unset (T_UNSET)" '(' unset_variables ')' . ';'

    ';'  shift, and go to state 682


state 544

  585 isset_variables: isset_variables ',' . $@76 isset_variable

    $default  reduce using rule 584 ($@76)

    $@76  go to state 683


state 545

  575 internal_functions_in_yacc: "isset (T_ISSET)" '(' isset_variables ')' .

    $default  reduce using rule 575 (internal_functions_in_yacc)


state 546

  577 internal_functions_in_yacc: "empty (T_EMPTY)" '(' expr_without_variable ')' .

    $default  reduce using rule 577 (internal_functions_in_yacc)


state 547

  576 internal_functions_in_yacc: "empty (T_EMPTY)" '(' variable ')' .

    $default  reduce using rule 576 (internal_functions_in_yacc)


state 548

   10 top_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';' .

    $default  reduce using rule 10 (top_statement)


state 549

  549 assignment_list_element: "list (T_LIST)" . '(' $@74 assignment_list ')'

    '('  shift, and go to state 684


state 550

  547 assignment_list_element: variable .

    $default  reduce using rule 547 (assignment_list_element)


state 551

  277 expr_without_variable: "list (T_LIST)" '(' $@45 assignment_list . ')' '=' expr
  545 assignment_list: assignment_list . ',' assignment_list_element

    ','  shift, and go to state 685
    ')'  shift, and go to state 686


state 552

  546 assignment_list: assignment_list_element .

    $default  reduce using rule 546 (assignment_list)


state 553

  370 combined_scalar: "array (T_ARRAY)" '(' array_pair_list ')' .

    $default  reduce using rule 370 (combined_scalar)


state 554

  567 encaps_var: "variable (T_VARIABLE)" '[' $@75 . encaps_var_offset ']'

    "identifier (T_STRING)"  shift, and go to state 687
    "variable (T_VARIABLE)"  shift, and go to state 688
    "number (T_NUM_STRING)"  shift, and go to state 689

    encaps_var_offset  go to state 690


state 555

  568 encaps_var: "variable (T_VARIABLE)" "-> (T_OBJECT_OPERATOR)" "identifier (T_STRING)" .

    $default  reduce using rule 568 (encaps_var)


state 556

  570 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' . expr ']' '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 691
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 557

  569 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" expr '}' .

    $default  reduce using rule 569 (encaps_var)


state 558

  571 encaps_var: "{$ (T_CURLY_OPEN)" variable '}' .

    $default  reduce using rule 571 (encaps_var)


state 559

  382 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name @59 . function_call_parameter_list

    '('  shift, and go to state 407

    function_call_parameter_list  go to state 692


state 560

    3 top_statement_list: top_statement_list . $@1 top_statement
   15 top_statement: "namespace (T_NAMESPACE)" '{' $@3 top_statement_list . '}'

    '}'  shift, and go to state 693

    $default  reduce using rule 2 ($@1)

    $@1  go to state 4


state 561

   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' $@2 . top_statement_list '}'

    $default  reduce using rule 4 (top_statement_list)

    top_statement_list  go to state 694


state 562

  384 function_call: "\\ (T_NS_SEPARATOR)" namespace_name @60 function_call_parameter_list .

    $default  reduce using rule 384 (function_call)


state 563

  336 expr_without_variable: '(' new_expr ')' @51 . instance_call

    '['                       reduce using rule 272 ($@43)
    "-> (T_OBJECT_OPERATOR)"  reduce using rule 272 ($@43)
    $default                  reduce using rule 271 (instance_call)

    instance_call  go to state 695
    $@43           go to state 696


state 564

   46 inner_statement: "__halt_compiler (T_HALT_COMPILER)" . '(' ')' ';'

    '('  shift, and go to state 697


state 565

   41 inner_statement_list: inner_statement_list $@4 inner_statement .

    $default  reduce using rule 41 (inner_statement_list)


state 566

   43 inner_statement: statement .

    $default  reduce using rule 43 (inner_statement)


state 567

   44 inner_statement: function_declaration_statement .

    $default  reduce using rule 44 (inner_statement)


state 568

   45 inner_statement: class_declaration_statement .

    $default  reduce using rule 45 (inner_statement)


state 569

  532 compound_variable: '$' '{' expr '}' .

    $default  reduce using rule 532 (compound_variable)


state 570

  192 non_empty_function_call_parameter_list: '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 123
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 148
    "namespace (T_NAMESPACE)"  shift, and go to state 149
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 150
    '$'                        shift, and go to state 81

    namespace_name                     go to state 151
    function_call                      go to state 101
    class_name                         go to state 152
    w_variable                         go to state 698
    variable                           go to state 314
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 155
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118


state 571

  193 non_empty_function_call_parameter_list: "... (T_ELLIPSIS)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 699
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 572

  187 function_call_parameter_list: '(' ')' .

    $default  reduce using rule 187 (function_call_parameter_list)


state 573

  188 function_call_parameter_list: '(' non_empty_function_call_parameter_list . ')'
  194 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list . ',' expr_without_variable
  195                                       | non_empty_function_call_parameter_list . ',' variable
  196                                       | non_empty_function_call_parameter_list . ',' '&' w_variable
  197                                       | non_empty_function_call_parameter_list . ',' "... (T_ELLIPSIS)" expr

    ','  shift, and go to state 700
    ')'  shift, and go to state 701


state 574

  190 non_empty_function_call_parameter_list: expr_without_variable .
  493 expr: expr_without_variable .

    ','       reduce using rule 190 (non_empty_function_call_parameter_list)
    ')'       reduce using rule 190 (non_empty_function_call_parameter_list)
    $default  reduce using rule 493 (expr)


state 575

  189 function_call_parameter_list: '(' yield_expr . ')'

    ')'  shift, and go to state 702


state 576

  191 non_empty_function_call_parameter_list: variable .
  278 expr_without_variable: variable . '=' expr
  279                      | variable . '=' '&' variable
  281                      | variable . '=' '&' "new (T_NEW)" class_name_reference $@46 ctor_arguments
  283                      | variable . "+= (T_PLUS_EQUAL)" expr
  284                      | variable . "-= (T_MINUS_EQUAL)" expr
  285                      | variable . "*= (T_MUL_EQUAL)" expr
  286                      | variable . "**= (T_POW_EQUAL)" expr
  287                      | variable . "/= (T_DIV_EQUAL)" expr
  288                      | variable . ".= (T_CONCAT_EQUAL)" expr
  289                      | variable . "%= (T_MOD_EQUAL)" expr
  290                      | variable . "&= (T_AND_EQUAL)" expr
  291                      | variable . "|= (T_OR_EQUAL)" expr
  292                      | variable . "^= (T_XOR_EQUAL)" expr
  293                      | variable . "<<= (T_SL_EQUAL)" expr
  294                      | variable . ">>= (T_SR_EQUAL)" expr
  496 r_variable: variable .
  498 rw_variable: variable .

    '='                    shift, and go to state 284
    "**= (T_POW_EQUAL)"    shift, and go to state 285
    ">>= (T_SR_EQUAL)"     shift, and go to state 286
    "<<= (T_SL_EQUAL)"     shift, and go to state 287
    "^= (T_XOR_EQUAL)"     shift, and go to state 288
    "|= (T_OR_EQUAL)"      shift, and go to state 289
    "&= (T_AND_EQUAL)"     shift, and go to state 290
    "%= (T_MOD_EQUAL)"     shift, and go to state 291
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 292
    "/= (T_DIV_EQUAL)"     shift, and go to state 293
    "*= (T_MUL_EQUAL)"     shift, and go to state 294
    "-= (T_MINUS_EQUAL)"   shift, and go to state 295
    "+= (T_PLUS_EQUAL)"    shift, and go to state 296

    ','           reduce using rule 191 (non_empty_function_call_parameter_list)
    "-- (T_DEC)"  reduce using rule 498 (rw_variable)
    "++ (T_INC)"  reduce using rule 498 (rw_variable)
    ')'           reduce using rule 191 (non_empty_function_call_parameter_list)
    $default      reduce using rule 496 (r_variable)


state 577

   38 constant_declaration: constant_declaration ',' "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    '['                                           shift, and go to state 509
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "array (T_ARRAY)"                             shift, and go to state 511
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar             go to state 703
    static_scalar_value       go to state 522
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 578

  400 fully_qualified_class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 704


state 579

  401 fully_qualified_class_name: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 123

    namespace_name  go to state 705


state 580

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  399 fully_qualified_class_name: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 241

    $default  reduce using rule 399 (fully_qualified_class_name)


state 581

  132 extends_from: "extends (T_EXTENDS)" fully_qualified_class_name .

    $default  reduce using rule 132 (extends_from)


state 582

  124 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from $@32 . implements_list '{' class_statement_list '}'

    "implements (T_IMPLEMENTS)"  shift, and go to state 706

    $default  reduce using rule 136 (implements_list)

    implements_list  go to state 707


state 583

  135 interface_extends_list: "extends (T_EXTENDS)" . interface_list

    "identifier (T_STRING)"    shift, and go to state 123
    "namespace (T_NAMESPACE)"  shift, and go to state 578
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 579

    namespace_name              go to state 580
    interface_list              go to state 708
    fully_qualified_class_name  go to state 709


state 584

  126 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" $@33 interface_extends_list . '{' class_statement_list '}'

    '{'  shift, and go to state 710


state 585

  368 combined_scalar_offset: combined_scalar_offset '[' dim_offset ']' .

    $default  reduce using rule 368 (combined_scalar_offset)


state 586

  367 combined_scalar_offset: combined_scalar '[' dim_offset ']' .

    $default  reduce using rule 367 (combined_scalar_offset)


state 587

  122 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" $@31 . '(' parameter_list ')' '{' inner_statement_list '}'

    '('  shift, and go to state 711


state 588

  360 expr_without_variable: function is_reference @56 '(' . parameter_list ')' lexical_vars '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 123
    "array (T_ARRAY)"          shift, and go to state 712
    "callable (T_CALLABLE)"    shift, and go to state 713
    "namespace (T_NAMESPACE)"  shift, and go to state 578
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 579

    ')'       reduce using rule 178 (parameter_list)
    $default  reduce using rule 183 (optional_class_type)

    namespace_name              go to state 580
    parameter_list              go to state 714
    non_empty_parameter_list    go to state 715
    parameter                   go to state 716
    optional_class_type         go to state 717
    fully_qualified_class_name  go to state 718


state 589

  521 array_function_dereference: function_call $@72 '[' dim_offset . ']'

    ']'  shift, and go to state 719


state 590

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  542 variable_name: '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280
    '}'                           shift, and go to state 720


state 591

  388 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@62 . function_call_parameter_list

    '('  shift, and go to state 407

    function_call_parameter_list  go to state 721


state 592

  386 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name @61 . function_call_parameter_list

    '('  shift, and go to state 407

    function_call_parameter_list  go to state 722


state 593

  515 variable_without_objects: simple_indirect_reference reference_variable .
  528 reference_variable: reference_variable . '[' dim_offset ']'
  529                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 301
    '{'  shift, and go to state 302

    $default  reduce using rule 515 (variable_without_objects)


state 594

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  304                      | expr "or (T_LOGICAL_OR)" $@49 expr .
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 304 (expr_without_variable)


state 595

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  306                      | expr "and (T_LOGICAL_AND)" $@50 expr .
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 306 (expr_without_variable)


state 596

  341 expr_without_variable: expr '?' ':' $@54 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 723
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 597

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr '?' $@52 expr . ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    ':'                           shift, and go to state 724
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280


state 598

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  300                      | expr "|| (T_BOOLEAN_OR)" $@47 expr .
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 300 (expr_without_variable)


state 599

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  302                      | expr "&& (T_BOOLEAN_AND)" $@48 expr .
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 302 (expr_without_variable)


state 600

  281 expr_without_variable: variable '=' '&' "new (T_NEW)" . class_name_reference $@46 ctor_arguments

    "identifier (T_STRING)"    shift, and go to state 123
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 148
    "namespace (T_NAMESPACE)"  shift, and go to state 162
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 163
    '$'                        shift, and go to state 81

    namespace_name                go to state 164
    class_name                    go to state 165
    class_name_reference          go to state 725
    dynamic_class_name_reference  go to state 167
    static_member                 go to state 111
    variable_class_name           go to state 168
    base_variable                 go to state 169
    reference_variable            go to state 170
    compound_variable             go to state 117
    simple_indirect_reference     go to state 171


state 601

  279 expr_without_variable: variable '=' '&' variable .

    $default  reduce using rule 279 (expr_without_variable)


state 602

  392 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@64 . function_call_parameter_list

    '('  shift, and go to state 407

    function_call_parameter_list  go to state 726


state 603

  390 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name $@63 . function_call_parameter_list

    '('  shift, and go to state 407

    function_call_parameter_list  go to state 727


state 604

  519 array_function_dereference: array_function_dereference '[' dim_offset ']' .

    $default  reduce using rule 519 (array_function_dereference)


state 605

  537 object_property: variable_without_objects . $@73

    $default  reduce using rule 536 ($@73)

    $@73  go to state 728


state 606

  501 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" $@68 object_property . $@69 method_or_not variable_properties

    $default  reduce using rule 500 ($@69)

    $@69  go to state 729


state 607

  535 object_property: object_dim_list .
  538 object_dim_list: object_dim_list . '[' dim_offset ']'
  539                | object_dim_list . '{' expr '}'

    '['  shift, and go to state 730
    '{'  shift, and go to state 731

    $default  reduce using rule 535 (object_property)


state 608

  540 object_dim_list: variable_name .

    $default  reduce using rule 540 (object_dim_list)


state 609

  528 reference_variable: reference_variable '[' dim_offset ']' .

    $default  reduce using rule 528 (reference_variable)


state 610

  529 reference_variable: reference_variable '{' expr '}' .

    $default  reduce using rule 529 (reference_variable)


state 611

  559 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" '&' w_variable .

    $default  reduce using rule 559 (non_empty_array_pair_list)


state 612

  558 non_empty_array_pair_list: non_empty_array_pair_list ',' '&' w_variable .

    $default  reduce using rule 558 (non_empty_array_pair_list)


state 613

  553 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" . expr
  557                          | non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" . '&' w_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '&'                                           shift, and go to state 732
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 733
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 614

  406 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" $@66 object_property . $@67 dynamic_class_name_variable_properties

    $default  reduce using rule 405 ($@67)

    $@67  go to state 734


state 615

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
   55 unticked_statement: "if (T_IF)" parenthesis_expr ':' $@7 inner_statement_list . $@8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    "elseif (T_ELSEIF)"  reduce using rule 54 ($@8)
    "else (T_ELSE)"      reduce using rule 54 ($@8)
    "endif (T_ENDIF)"    reduce using rule 54 ($@8)
    $default             reduce using rule 40 ($@4)

    $@4  go to state 402
    $@8  go to state 735


state 616

   52 unticked_statement: "if (T_IF)" parenthesis_expr $@5 statement $@6 . elseif_list else_single

    $default  reduce using rule 167 (elseif_list)

    elseif_list  go to state 736


state 617

   61 unticked_statement: "do (T_DO)" $@11 statement "while (T_WHILE)" $@12 . parenthesis_expr ';'

    '('  shift, and go to state 175

    parenthesis_expr  go to state 737


state 618

  166 while_statement: ':' . inner_statement_list "endwhile (T_ENDWHILE)" ';'

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 738


state 619

  165 while_statement: statement .

    $default  reduce using rule 165 (while_statement)


state 620

   58 unticked_statement: "while (T_WHILE)" $@9 parenthesis_expr @10 while_statement .

    $default  reduce using rule 58 (unticked_statement)


state 621

   65 unticked_statement: "for (T_FOR)" '(' for_expr ';' $@13 . for_expr ';' $@14 for_expr ')' $@15 for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 258 (for_expr)

    namespace_name                     go to state 84
    for_expr                           go to state 739
    non_empty_for_expr                 go to state 336
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 337
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 622

  261 non_empty_for_expr: non_empty_for_expr ',' $@41 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 740
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 623

   87 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" $@19 . foreach_variable foreach_optional_arg ')' $@20 foreach_statement

    '&'                        shift, and go to state 741
    "identifier (T_STRING)"    shift, and go to state 123
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 148
    "list (T_LIST)"            shift, and go to state 742
    "namespace (T_NAMESPACE)"  shift, and go to state 149
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 150
    '$'                        shift, and go to state 81

    namespace_name                     go to state 151
    foreach_variable                   go to state 743
    function_call                      go to state 101
    class_name                         go to state 152
    variable                           go to state 744
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 155
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118


state 624

   84 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" $@17 . foreach_variable foreach_optional_arg ')' $@18 foreach_statement

    '&'                        shift, and go to state 741
    "identifier (T_STRING)"    shift, and go to state 123
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 148
    "list (T_LIST)"            shift, and go to state 742
    "namespace (T_NAMESPACE)"  shift, and go to state 149
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 150
    '$'                        shift, and go to state 81

    namespace_name                     go to state 151
    foreach_variable                   go to state 745
    function_call                      go to state 101
    class_name                         go to state 152
    variable                           go to state 744
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 155
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118


state 625

  152 declare_list: "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    '['                                           shift, and go to state 509
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "array (T_ARRAY)"                             shift, and go to state 511
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar             go to state 746
    static_scalar_value       go to state 522
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 626

  153 declare_list: declare_list ',' . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 747


state 627

   89 unticked_statement: "declare (T_DECLARE)" $@21 '(' declare_list ')' . declare_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    ':'                                           shift, and go to state 748
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 79
    '{'                                           shift, and go to state 80
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    statement                          go to state 749
    unticked_statement                 go to state 88
    declare_statement                  go to state 750
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    yield_expr                         go to state 97
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 105
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 628

  157 switch_case_list: ':' ';' . case_list "endswitch (T_ENDSWITCH)" ';'

    $default  reduce using rule 158 (case_list)

    case_list  go to state 751


state 629

  156 switch_case_list: ':' case_list . "endswitch (T_ENDSWITCH)" ';'
  160 case_list: case_list . "case (T_CASE)" expr case_separator $@35 inner_statement_list
  162          | case_list . "default (T_DEFAULT)" case_separator $@36 inner_statement_list

    "endswitch (T_ENDSWITCH)"  shift, and go to state 752
    "case (T_CASE)"            shift, and go to state 753
    "default (T_DEFAULT)"      shift, and go to state 754


state 630

  155 switch_case_list: '{' ';' . case_list '}'

    $default  reduce using rule 158 (case_list)

    case_list  go to state 755


state 631

  154 switch_case_list: '{' case_list . '}'
  160 case_list: case_list . "case (T_CASE)" expr case_separator $@35 inner_statement_list
  162          | case_list . "default (T_DEFAULT)" case_separator $@36 inner_statement_list

    "case (T_CASE)"        shift, and go to state 753
    "default (T_DEFAULT)"  shift, and go to state 754
    '}'                    shift, and go to state 756


state 632

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value
  471                 | '+' static_scalar_value .

    '*'  shift, and go to state 667
    '/'  shift, and go to state 668
    '%'  shift, and go to state 669

    $default  reduce using rule 471 (static_operation)


state 633

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value
  472                 | '-' static_scalar_value .

    '*'  shift, and go to state 667
    '/'  shift, and go to state 668
    '%'  shift, and go to state 669

    $default  reduce using rule 472 (static_operation)


state 634

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  448                 | '!' static_scalar_value .
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    $default  reduce using rule 448 (static_operation)


state 635

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  449                 | '~' static_scalar_value .
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    $default  reduce using rule 449 (static_operation)


state 636

  490 non_empty_static_array_pair_list: static_scalar . "=> (T_DOUBLE_ARROW)" static_scalar
  491                                 | static_scalar .

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 757

    $default  reduce using rule 491 (non_empty_static_array_pair_list)


state 637

  434 static_scalar: '[' static_array_pair_list . ']'

    ']'  shift, and go to state 758


state 638

  485 static_array_pair_list: non_empty_static_array_pair_list . possible_comma
  488 non_empty_static_array_pair_list: non_empty_static_array_pair_list . ',' static_scalar "=> (T_DOUBLE_ARROW)" static_scalar
  489                                 | non_empty_static_array_pair_list . ',' static_scalar

    ','  shift, and go to state 759

    $default  reduce using rule 486 (possible_comma)

    possible_comma  go to state 760


state 639

  433 static_scalar: "array (T_ARRAY)" '(' . static_array_pair_list ')'

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    '['                                           shift, and go to state 509
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "array (T_ARRAY)"                             shift, and go to state 511
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    $default  reduce using rule 484 (static_array_pair_list)

    namespace_name                    go to state 517
    class_name                        go to state 518
    common_scalar                     go to state 519
    static_class_constant             go to state 520
    static_scalar                     go to state 636
    static_scalar_value               go to state 522
    static_operation                  go to state 523
    static_array_pair_list            go to state 761
    non_empty_static_array_pair_list  go to state 638
    static_class_name_scalar          go to state 524


state 640

  429 common_scalar: "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . "heredoc end (T_END_HEREDOC)"

    "heredoc end (T_END_HEREDOC)"  shift, and go to state 385


state 641

  397 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name
  438 static_scalar_value: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 123

    namespace_name  go to state 762


state 642

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  398 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .
  439 static_scalar_value: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 241

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 398 (class_name)
    $default                       reduce using rule 439 (static_scalar_value)


state 643

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value
  473                 | '(' static_scalar_value . ')'

    "or (T_LOGICAL_OR)"           shift, and go to state 645
    "xor (T_LOGICAL_XOR)"         shift, and go to state 646
    "and (T_LOGICAL_AND)"         shift, and go to state 647
    '?'                           shift, and go to state 648
    "|| (T_BOOLEAN_OR)"           shift, and go to state 649
    "&& (T_BOOLEAN_AND)"          shift, and go to state 650
    '|'                           shift, and go to state 651
    '^'                           shift, and go to state 652
    '&'                           shift, and go to state 653
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 654
    "=== (T_IS_IDENTICAL)"        shift, and go to state 655
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 656
    "== (T_IS_EQUAL)"             shift, and go to state 657
    '<'                           shift, and go to state 658
    '>'                           shift, and go to state 659
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 660
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 661
    ">> (T_SR)"                   shift, and go to state 662
    "<< (T_SL)"                   shift, and go to state 663
    '+'                           shift, and go to state 664
    '-'                           shift, and go to state 665
    '.'                           shift, and go to state 666
    '*'                           shift, and go to state 667
    '/'                           shift, and go to state 668
    '%'                           shift, and go to state 669
    ')'                           shift, and go to state 763


state 644

  431 static_class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"
  590 static_class_name_scalar: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "class (T_CLASS)"

    "identifier (T_STRING)"  shift, and go to state 764
    "class (T_CLASS)"        shift, and go to state 765


state 645

  458 static_operation: static_scalar_value "or (T_LOGICAL_OR)" . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 766
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 646

  456 static_operation: static_scalar_value "xor (T_LOGICAL_XOR)" . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 767
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 647

  457 static_operation: static_scalar_value "and (T_LOGICAL_AND)" . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 768
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 648

  469 static_operation: static_scalar_value '?' . ':' static_scalar_value
  470                 | static_scalar_value '?' . static_scalar_value ':' static_scalar_value

    ':'                                           shift, and go to state 769
    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 770
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 649

  460 static_operation: static_scalar_value "|| (T_BOOLEAN_OR)" . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 771
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 650

  459 static_operation: static_scalar_value "&& (T_BOOLEAN_AND)" . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 772
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 651

  450 static_operation: static_scalar_value '|' . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 773
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 652

  452 static_operation: static_scalar_value '^' . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 774
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 653

  451 static_operation: static_scalar_value '&' . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 775
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 654

  462 static_operation: static_scalar_value "!== (T_IS_NOT_IDENTICAL)" . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 776
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 655

  461 static_operation: static_scalar_value "=== (T_IS_IDENTICAL)" . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 777
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 656

  464 static_operation: static_scalar_value "!= (T_IS_NOT_EQUAL)" . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 778
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 657

  463 static_operation: static_scalar_value "== (T_IS_EQUAL)" . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 779
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 658

  465 static_operation: static_scalar_value '<' . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 780
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 659

  466 static_operation: static_scalar_value '>' . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 781
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 660

  468 static_operation: static_scalar_value ">= (T_IS_GREATER_OR_EQUAL)" . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 782
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 661

  467 static_operation: static_scalar_value "<= (T_IS_SMALLER_OR_EQUAL)" . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 783
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 662

  454 static_operation: static_scalar_value ">> (T_SR)" . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 784
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 663

  453 static_operation: static_scalar_value "<< (T_SL)" . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 785
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 664

  443 static_operation: static_scalar_value '+' . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 786
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 665

  444 static_operation: static_scalar_value '-' . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 787
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 666

  455 static_operation: static_scalar_value '.' . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 788
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 667

  445 static_operation: static_scalar_value '*' . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 789
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 668

  446 static_operation: static_scalar_value '/' . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 790
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 669

  447 static_operation: static_scalar_value '%' . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 791
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 670

   93 unticked_statement: "try (T_TRY)" $@22 '{' inner_statement_list '}' . catch_statement $@23 finally_statement

    "catch (T_CATCH)"  shift, and go to state 792

    $default  reduce using rule 96 (catch_statement)

    catch_statement  go to state 793


state 671

   31 use_function_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 794


state 672

   29 use_function_declaration: namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 29 (use_function_declaration)


state 673

   26 use_function_declarations: use_function_declarations ',' use_function_declaration .

    $default  reduce using rule 26 (use_function_declarations)


state 674

   37 use_const_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 795


state 675

   35 use_const_declaration: namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 35 (use_const_declaration)


state 676

   32 use_const_declarations: use_const_declarations ',' use_const_declaration .

    $default  reduce using rule 32 (use_const_declarations)


state 677

   25 use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 25 (use_declaration)


state 678

  202 global_var: '$' '{' expr '}' .

    $default  reduce using rule 202 (global_var)


state 679

  204 static_var_list: static_var_list ',' "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    '['                                           shift, and go to state 509
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "array (T_ARRAY)"                             shift, and go to state 511
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar             go to state 796
    static_scalar_value       go to state 522
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 680

  362 expr_without_variable: "static (T_STATIC)" function is_reference @57 '(' . parameter_list ')' lexical_vars '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 123
    "array (T_ARRAY)"          shift, and go to state 712
    "callable (T_CALLABLE)"    shift, and go to state 713
    "namespace (T_NAMESPACE)"  shift, and go to state 578
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 579

    ')'       reduce using rule 178 (parameter_list)
    $default  reduce using rule 183 (optional_class_type)

    namespace_name              go to state 580
    parameter_list              go to state 797
    non_empty_parameter_list    go to state 715
    parameter                   go to state 716
    optional_class_type         go to state 717
    fully_qualified_class_name  go to state 718


state 681

  113 unset_variables: unset_variables ',' unset_variable .

    $default  reduce using rule 113 (unset_variables)


state 682

   81 unticked_statement: "unset (T_UNSET)" '(' unset_variables ')' ';' .

    $default  reduce using rule 81 (unticked_statement)


state 683

  585 isset_variables: isset_variables ',' $@76 . isset_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 374
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 195
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 375
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    isset_variable                     go to state 798
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 684

  549 assignment_list_element: "list (T_LIST)" '(' . $@74 assignment_list ')'

    $default  reduce using rule 548 ($@74)

    $@74  go to state 799


state 685

  545 assignment_list: assignment_list ',' . assignment_list_element

    "identifier (T_STRING)"    shift, and go to state 123
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 148
    "list (T_LIST)"            shift, and go to state 549
    "namespace (T_NAMESPACE)"  shift, and go to state 149
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 150
    '$'                        shift, and go to state 81

    $default  reduce using rule 550 (assignment_list_element)

    namespace_name                     go to state 151
    function_call                      go to state 101
    class_name                         go to state 152
    variable                           go to state 550
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 155
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    assignment_list_element            go to state 800


state 686

  277 expr_without_variable: "list (T_LIST)" '(' $@45 assignment_list ')' . '=' expr

    '='  shift, and go to state 801


state 687

  572 encaps_var_offset: "identifier (T_STRING)" .

    $default  reduce using rule 572 (encaps_var_offset)


state 688

  574 encaps_var_offset: "variable (T_VARIABLE)" .

    $default  reduce using rule 574 (encaps_var_offset)


state 689

  573 encaps_var_offset: "number (T_NUM_STRING)" .

    $default  reduce using rule 573 (encaps_var_offset)


state 690

  567 encaps_var: "variable (T_VARIABLE)" '[' $@75 encaps_var_offset . ']'

    ']'  shift, and go to state 802


state 691

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  570 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr . ']' '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280
    ']'                           shift, and go to state 803


state 692

  382 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name @59 function_call_parameter_list .

    $default  reduce using rule 382 (function_call)


state 693

   15 top_statement: "namespace (T_NAMESPACE)" '{' $@3 top_statement_list '}' .

    $default  reduce using rule 15 (top_statement)


state 694

    3 top_statement_list: top_statement_list . $@1 top_statement
   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' $@2 top_statement_list . '}'

    '}'  shift, and go to state 804

    $default  reduce using rule 2 ($@1)

    $@1  go to state 4


state 695

  336 expr_without_variable: '(' new_expr ')' @51 instance_call .

    $default  reduce using rule 336 (expr_without_variable)


state 696

  273 instance_call: $@43 . chaining_instance_call

    '['                       shift, and go to state 805
    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 806

    chaining_method_or_property  go to state 807
    chaining_dereference         go to state 808
    chaining_instance_call       go to state 809
    variable_property            go to state 810


state 697

   46 inner_statement: "__halt_compiler (T_HALT_COMPILER)" '(' . ')' ';'

    ')'  shift, and go to state 811


state 698

  192 non_empty_function_call_parameter_list: '&' w_variable .

    $default  reduce using rule 192 (non_empty_function_call_parameter_list)


state 699

  193 non_empty_function_call_parameter_list: "... (T_ELLIPSIS)" expr .
  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 193 (non_empty_function_call_parameter_list)


state 700

  194 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' . expr_without_variable
  195                                       | non_empty_function_call_parameter_list ',' . variable
  196                                       | non_empty_function_call_parameter_list ',' . '&' w_variable
  197                                       | non_empty_function_call_parameter_list ',' . "... (T_ELLIPSIS)" expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '&'                                           shift, and go to state 812
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    "... (T_ELLIPSIS)"                            shift, and go to state 813
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 814
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 195
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 815
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 701

  188 function_call_parameter_list: '(' non_empty_function_call_parameter_list ')' .

    $default  reduce using rule 188 (function_call_parameter_list)


state 702

  189 function_call_parameter_list: '(' yield_expr ')' .

    $default  reduce using rule 189 (function_call_parameter_list)


state 703

   38 constant_declaration: constant_declaration ',' "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 38 (constant_declaration)


state 704

  400 fully_qualified_class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 123

    namespace_name  go to state 816


state 705

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  401 fully_qualified_class_name: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 241

    $default  reduce using rule 401 (fully_qualified_class_name)


state 706

  137 implements_list: "implements (T_IMPLEMENTS)" . interface_list

    "identifier (T_STRING)"    shift, and go to state 123
    "namespace (T_NAMESPACE)"  shift, and go to state 578
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 579

    namespace_name              go to state 580
    interface_list              go to state 817
    fully_qualified_class_name  go to state 709


state 707

  124 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from $@32 implements_list . '{' class_statement_list '}'

    '{'  shift, and go to state 818


state 708

  135 interface_extends_list: "extends (T_EXTENDS)" interface_list .
  139 interface_list: interface_list . ',' fully_qualified_class_name

    ','  shift, and go to state 819

    $default  reduce using rule 135 (interface_extends_list)


state 709

  138 interface_list: fully_qualified_class_name .

    $default  reduce using rule 138 (interface_list)


state 710

  126 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" $@33 interface_extends_list '{' . class_statement_list '}'

    $default  reduce using rule 208 (class_statement_list)

    class_statement_list  go to state 820


state 711

  122 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" $@31 '(' . parameter_list ')' '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 123
    "array (T_ARRAY)"          shift, and go to state 712
    "callable (T_CALLABLE)"    shift, and go to state 713
    "namespace (T_NAMESPACE)"  shift, and go to state 578
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 579

    ')'       reduce using rule 178 (parameter_list)
    $default  reduce using rule 183 (optional_class_type)

    namespace_name              go to state 580
    parameter_list              go to state 821
    non_empty_parameter_list    go to state 715
    parameter                   go to state 716
    optional_class_type         go to state 717
    fully_qualified_class_name  go to state 718


state 712

  184 optional_class_type: "array (T_ARRAY)" .

    $default  reduce using rule 184 (optional_class_type)


state 713

  185 optional_class_type: "callable (T_CALLABLE)" .

    $default  reduce using rule 185 (optional_class_type)


state 714

  360 expr_without_variable: function is_reference @56 '(' parameter_list . ')' lexical_vars '{' inner_statement_list '}'

    ')'  shift, and go to state 822


state 715

  177 parameter_list: non_empty_parameter_list .
  180 non_empty_parameter_list: non_empty_parameter_list . ',' parameter

    ','  shift, and go to state 823

    $default  reduce using rule 177 (parameter_list)


state 716

  179 non_empty_parameter_list: parameter .

    $default  reduce using rule 179 (non_empty_parameter_list)


state 717

  181 parameter: optional_class_type . is_reference is_variadic "variable (T_VARIABLE)"
  182          | optional_class_type . is_reference is_variadic "variable (T_VARIABLE)" '=' static_scalar

    '&'  shift, and go to state 250

    $default  reduce using rule 117 (is_reference)

    is_reference  go to state 824


state 718

  186 optional_class_type: fully_qualified_class_name .

    $default  reduce using rule 186 (optional_class_type)


state 719

  521 array_function_dereference: function_call $@72 '[' dim_offset ']' .

    $default  reduce using rule 521 (array_function_dereference)


state 720

  542 variable_name: '{' expr '}' .

    $default  reduce using rule 542 (variable_name)


state 721

  388 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@62 function_call_parameter_list .

    $default  reduce using rule 388 (function_call)


state 722

  386 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name @61 function_call_parameter_list .

    $default  reduce using rule 386 (function_call)


state 723

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  341                      | expr '?' ':' $@54 expr .

    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 341 (expr_without_variable)


state 724

  339 expr_without_variable: expr '?' $@52 expr ':' . $@53 expr

    $default  reduce using rule 338 ($@53)

    $@53  go to state 825


state 725

  281 expr_without_variable: variable '=' '&' "new (T_NEW)" class_name_reference . $@46 ctor_arguments

    $default  reduce using rule 280 ($@46)

    $@46  go to state 826


state 726

  392 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects $@64 function_call_parameter_list .

    $default  reduce using rule 392 (function_call)


state 727

  390 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name $@63 function_call_parameter_list .

    $default  reduce using rule 390 (function_call)


state 728

  537 object_property: variable_without_objects $@73 .

    $default  reduce using rule 537 (object_property)


state 729

  501 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" $@68 object_property $@69 . method_or_not variable_properties

    '('       reduce using rule 509 (@71)
    $default  reduce using rule 513 (method_or_not)

    array_method_dereference  go to state 827
    method                    go to state 828
    @71                       go to state 829
    method_or_not             go to state 830


state 730

  538 object_dim_list: object_dim_list '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 533 (dim_offset)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 329
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    dim_offset                         go to state 831
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 731

  539 object_dim_list: object_dim_list '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 832
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 732

  557 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 123
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 148
    "namespace (T_NAMESPACE)"  shift, and go to state 149
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 150
    '$'                        shift, and go to state 81

    namespace_name                     go to state 151
    function_call                      go to state 101
    class_name                         go to state 152
    w_variable                         go to state 833
    variable                           go to state 314
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 155
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118


state 733

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  553 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 553 (non_empty_array_pair_list)


state 734

  406 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" $@66 object_property $@67 . dynamic_class_name_variable_properties

    $default  reduce using rule 409 (dynamic_class_name_variable_properties)

    dynamic_class_name_variable_properties  go to state 834


state 735

   55 unticked_statement: "if (T_IF)" parenthesis_expr ':' $@7 inner_statement_list $@8 . new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    $default  reduce using rule 170 (new_elseif_list)

    new_elseif_list  go to state 835


state 736

   52 unticked_statement: "if (T_IF)" parenthesis_expr $@5 statement $@6 elseif_list . else_single
  169 elseif_list: elseif_list . "elseif (T_ELSEIF)" parenthesis_expr $@37 statement

    "elseif (T_ELSEIF)"  shift, and go to state 836
    "else (T_ELSE)"      shift, and go to state 837

    "elseif (T_ELSEIF)"  [reduce using rule 173 (else_single)]
    "else (T_ELSE)"      [reduce using rule 173 (else_single)]
    $default             reduce using rule 173 (else_single)

    else_single  go to state 838


state 737

   61 unticked_statement: "do (T_DO)" $@11 statement "while (T_WHILE)" $@12 parenthesis_expr . ';'

    ';'  shift, and go to state 839


state 738

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  166 while_statement: ':' inner_statement_list . "endwhile (T_ENDWHILE)" ';'

    "endwhile (T_ENDWHILE)"  shift, and go to state 840

    $default  reduce using rule 40 ($@4)

    $@4  go to state 402


state 739

   65 unticked_statement: "for (T_FOR)" '(' for_expr ';' $@13 for_expr . ';' $@14 for_expr ')' $@15 for_statement

    ';'  shift, and go to state 841


state 740

  261 non_empty_for_expr: non_empty_for_expr ',' $@41 expr .
  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 261 (non_empty_for_expr)


state 741

  143 foreach_variable: '&' . variable

    "identifier (T_STRING)"    shift, and go to state 123
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 148
    "namespace (T_NAMESPACE)"  shift, and go to state 149
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 150
    '$'                        shift, and go to state 81

    namespace_name                     go to state 151
    function_call                      go to state 101
    class_name                         go to state 152
    variable                           go to state 842
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 155
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118


state 742

  145 foreach_variable: "list (T_LIST)" . '(' $@34 assignment_list ')'

    '('  shift, and go to state 843


state 743

   87 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" $@19 foreach_variable . foreach_optional_arg ')' $@20 foreach_statement

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 844

    $default  reduce using rule 140 (foreach_optional_arg)

    foreach_optional_arg  go to state 845


state 744

  142 foreach_variable: variable .

    $default  reduce using rule 142 (foreach_variable)


state 745

   84 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" $@17 foreach_variable . foreach_optional_arg ')' $@18 foreach_statement

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 844

    $default  reduce using rule 140 (foreach_optional_arg)

    foreach_optional_arg  go to state 846


state 746

  152 declare_list: "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 152 (declare_list)


state 747

  153 declare_list: declare_list ',' "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 847


state 748

  151 declare_statement: ':' . inner_statement_list "enddeclare (T_ENDDECLARE)" ';'

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 848


state 749

  150 declare_statement: statement .

    $default  reduce using rule 150 (declare_statement)


state 750

   89 unticked_statement: "declare (T_DECLARE)" $@21 '(' declare_list ')' declare_statement .

    $default  reduce using rule 89 (unticked_statement)


state 751

  157 switch_case_list: ':' ';' case_list . "endswitch (T_ENDSWITCH)" ';'
  160 case_list: case_list . "case (T_CASE)" expr case_separator $@35 inner_statement_list
  162          | case_list . "default (T_DEFAULT)" case_separator $@36 inner_statement_list

    "endswitch (T_ENDSWITCH)"  shift, and go to state 849
    "case (T_CASE)"            shift, and go to state 753
    "default (T_DEFAULT)"      shift, and go to state 754


state 752

  156 switch_case_list: ':' case_list "endswitch (T_ENDSWITCH)" . ';'

    ';'  shift, and go to state 850


state 753

  160 case_list: case_list "case (T_CASE)" . expr case_separator $@35 inner_statement_list

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 851
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 754

  162 case_list: case_list "default (T_DEFAULT)" . case_separator $@36 inner_statement_list

    ':'  shift, and go to state 852
    ';'  shift, and go to state 853

    case_separator  go to state 854


state 755

  155 switch_case_list: '{' ';' case_list . '}'
  160 case_list: case_list . "case (T_CASE)" expr case_separator $@35 inner_statement_list
  162          | case_list . "default (T_DEFAULT)" case_separator $@36 inner_statement_list

    "case (T_CASE)"        shift, and go to state 753
    "default (T_DEFAULT)"  shift, and go to state 754
    '}'                    shift, and go to state 855


state 756

  154 switch_case_list: '{' case_list '}' .

    $default  reduce using rule 154 (switch_case_list)


state 757

  490 non_empty_static_array_pair_list: static_scalar "=> (T_DOUBLE_ARROW)" . static_scalar

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    '['                                           shift, and go to state 509
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "array (T_ARRAY)"                             shift, and go to state 511
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar             go to state 856
    static_scalar_value       go to state 522
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 758

  434 static_scalar: '[' static_array_pair_list ']' .

    $default  reduce using rule 434 (static_scalar)


state 759

  487 possible_comma: ',' .
  488 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' . static_scalar "=> (T_DOUBLE_ARROW)" static_scalar
  489                                 | non_empty_static_array_pair_list ',' . static_scalar

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    '['                                           shift, and go to state 509
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "array (T_ARRAY)"                             shift, and go to state 511
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    $default  reduce using rule 487 (possible_comma)

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar             go to state 857
    static_scalar_value       go to state 522
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 760

  485 static_array_pair_list: non_empty_static_array_pair_list possible_comma .

    $default  reduce using rule 485 (static_array_pair_list)


state 761

  433 static_scalar: "array (T_ARRAY)" '(' static_array_pair_list . ')'

    ')'  shift, and go to state 858


state 762

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  397 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .
  438 static_scalar_value: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 241

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 397 (class_name)
    $default                       reduce using rule 438 (static_scalar_value)


state 763

  473 static_operation: '(' static_scalar_value ')' .

    $default  reduce using rule 473 (static_operation)


state 764

  431 static_class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    $default  reduce using rule 431 (static_class_constant)


state 765

  590 static_class_name_scalar: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "class (T_CLASS)" .

    $default  reduce using rule 590 (static_class_name_scalar)


state 766

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  458                 | static_scalar_value "or (T_LOGICAL_OR)" static_scalar_value .
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "xor (T_LOGICAL_XOR)"         shift, and go to state 646
    "and (T_LOGICAL_AND)"         shift, and go to state 647
    '?'                           shift, and go to state 648
    "|| (T_BOOLEAN_OR)"           shift, and go to state 649
    "&& (T_BOOLEAN_AND)"          shift, and go to state 650
    '|'                           shift, and go to state 651
    '^'                           shift, and go to state 652
    '&'                           shift, and go to state 653
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 654
    "=== (T_IS_IDENTICAL)"        shift, and go to state 655
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 656
    "== (T_IS_EQUAL)"             shift, and go to state 657
    '<'                           shift, and go to state 658
    '>'                           shift, and go to state 659
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 660
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 661
    ">> (T_SR)"                   shift, and go to state 662
    "<< (T_SL)"                   shift, and go to state 663
    '+'                           shift, and go to state 664
    '-'                           shift, and go to state 665
    '.'                           shift, and go to state 666
    '*'                           shift, and go to state 667
    '/'                           shift, and go to state 668
    '%'                           shift, and go to state 669

    $default  reduce using rule 458 (static_operation)


state 767

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  456                 | static_scalar_value "xor (T_LOGICAL_XOR)" static_scalar_value .
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "and (T_LOGICAL_AND)"         shift, and go to state 647
    '?'                           shift, and go to state 648
    "|| (T_BOOLEAN_OR)"           shift, and go to state 649
    "&& (T_BOOLEAN_AND)"          shift, and go to state 650
    '|'                           shift, and go to state 651
    '^'                           shift, and go to state 652
    '&'                           shift, and go to state 653
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 654
    "=== (T_IS_IDENTICAL)"        shift, and go to state 655
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 656
    "== (T_IS_EQUAL)"             shift, and go to state 657
    '<'                           shift, and go to state 658
    '>'                           shift, and go to state 659
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 660
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 661
    ">> (T_SR)"                   shift, and go to state 662
    "<< (T_SL)"                   shift, and go to state 663
    '+'                           shift, and go to state 664
    '-'                           shift, and go to state 665
    '.'                           shift, and go to state 666
    '*'                           shift, and go to state 667
    '/'                           shift, and go to state 668
    '%'                           shift, and go to state 669

    $default  reduce using rule 456 (static_operation)


state 768

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  457                 | static_scalar_value "and (T_LOGICAL_AND)" static_scalar_value .
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '?'                           shift, and go to state 648
    "|| (T_BOOLEAN_OR)"           shift, and go to state 649
    "&& (T_BOOLEAN_AND)"          shift, and go to state 650
    '|'                           shift, and go to state 651
    '^'                           shift, and go to state 652
    '&'                           shift, and go to state 653
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 654
    "=== (T_IS_IDENTICAL)"        shift, and go to state 655
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 656
    "== (T_IS_EQUAL)"             shift, and go to state 657
    '<'                           shift, and go to state 658
    '>'                           shift, and go to state 659
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 660
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 661
    ">> (T_SR)"                   shift, and go to state 662
    "<< (T_SL)"                   shift, and go to state 663
    '+'                           shift, and go to state 664
    '-'                           shift, and go to state 665
    '.'                           shift, and go to state 666
    '*'                           shift, and go to state 667
    '/'                           shift, and go to state 668
    '%'                           shift, and go to state 669

    $default  reduce using rule 457 (static_operation)


state 769

  469 static_operation: static_scalar_value '?' ':' . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 859
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 770

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value
  470                 | static_scalar_value '?' static_scalar_value . ':' static_scalar_value

    "or (T_LOGICAL_OR)"           shift, and go to state 645
    "xor (T_LOGICAL_XOR)"         shift, and go to state 646
    "and (T_LOGICAL_AND)"         shift, and go to state 647
    '?'                           shift, and go to state 648
    ':'                           shift, and go to state 860
    "|| (T_BOOLEAN_OR)"           shift, and go to state 649
    "&& (T_BOOLEAN_AND)"          shift, and go to state 650
    '|'                           shift, and go to state 651
    '^'                           shift, and go to state 652
    '&'                           shift, and go to state 653
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 654
    "=== (T_IS_IDENTICAL)"        shift, and go to state 655
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 656
    "== (T_IS_EQUAL)"             shift, and go to state 657
    '<'                           shift, and go to state 658
    '>'                           shift, and go to state 659
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 660
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 661
    ">> (T_SR)"                   shift, and go to state 662
    "<< (T_SL)"                   shift, and go to state 663
    '+'                           shift, and go to state 664
    '-'                           shift, and go to state 665
    '.'                           shift, and go to state 666
    '*'                           shift, and go to state 667
    '/'                           shift, and go to state 668
    '%'                           shift, and go to state 669


state 771

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  460                 | static_scalar_value "|| (T_BOOLEAN_OR)" static_scalar_value .
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "&& (T_BOOLEAN_AND)"          shift, and go to state 650
    '|'                           shift, and go to state 651
    '^'                           shift, and go to state 652
    '&'                           shift, and go to state 653
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 654
    "=== (T_IS_IDENTICAL)"        shift, and go to state 655
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 656
    "== (T_IS_EQUAL)"             shift, and go to state 657
    '<'                           shift, and go to state 658
    '>'                           shift, and go to state 659
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 660
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 661
    ">> (T_SR)"                   shift, and go to state 662
    "<< (T_SL)"                   shift, and go to state 663
    '+'                           shift, and go to state 664
    '-'                           shift, and go to state 665
    '.'                           shift, and go to state 666
    '*'                           shift, and go to state 667
    '/'                           shift, and go to state 668
    '%'                           shift, and go to state 669

    $default  reduce using rule 460 (static_operation)


state 772

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  459                 | static_scalar_value "&& (T_BOOLEAN_AND)" static_scalar_value .
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '|'                           shift, and go to state 651
    '^'                           shift, and go to state 652
    '&'                           shift, and go to state 653
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 654
    "=== (T_IS_IDENTICAL)"        shift, and go to state 655
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 656
    "== (T_IS_EQUAL)"             shift, and go to state 657
    '<'                           shift, and go to state 658
    '>'                           shift, and go to state 659
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 660
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 661
    ">> (T_SR)"                   shift, and go to state 662
    "<< (T_SL)"                   shift, and go to state 663
    '+'                           shift, and go to state 664
    '-'                           shift, and go to state 665
    '.'                           shift, and go to state 666
    '*'                           shift, and go to state 667
    '/'                           shift, and go to state 668
    '%'                           shift, and go to state 669

    $default  reduce using rule 459 (static_operation)


state 773

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  450                 | static_scalar_value '|' static_scalar_value .
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '^'                           shift, and go to state 652
    '&'                           shift, and go to state 653
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 654
    "=== (T_IS_IDENTICAL)"        shift, and go to state 655
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 656
    "== (T_IS_EQUAL)"             shift, and go to state 657
    '<'                           shift, and go to state 658
    '>'                           shift, and go to state 659
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 660
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 661
    ">> (T_SR)"                   shift, and go to state 662
    "<< (T_SL)"                   shift, and go to state 663
    '+'                           shift, and go to state 664
    '-'                           shift, and go to state 665
    '.'                           shift, and go to state 666
    '*'                           shift, and go to state 667
    '/'                           shift, and go to state 668
    '%'                           shift, and go to state 669

    $default  reduce using rule 450 (static_operation)


state 774

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  452                 | static_scalar_value '^' static_scalar_value .
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '&'                           shift, and go to state 653
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 654
    "=== (T_IS_IDENTICAL)"        shift, and go to state 655
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 656
    "== (T_IS_EQUAL)"             shift, and go to state 657
    '<'                           shift, and go to state 658
    '>'                           shift, and go to state 659
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 660
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 661
    ">> (T_SR)"                   shift, and go to state 662
    "<< (T_SL)"                   shift, and go to state 663
    '+'                           shift, and go to state 664
    '-'                           shift, and go to state 665
    '.'                           shift, and go to state 666
    '*'                           shift, and go to state 667
    '/'                           shift, and go to state 668
    '%'                           shift, and go to state 669

    $default  reduce using rule 452 (static_operation)


state 775

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  451                 | static_scalar_value '&' static_scalar_value .
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 654
    "=== (T_IS_IDENTICAL)"        shift, and go to state 655
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 656
    "== (T_IS_EQUAL)"             shift, and go to state 657
    '<'                           shift, and go to state 658
    '>'                           shift, and go to state 659
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 660
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 661
    ">> (T_SR)"                   shift, and go to state 662
    "<< (T_SL)"                   shift, and go to state 663
    '+'                           shift, and go to state 664
    '-'                           shift, and go to state 665
    '.'                           shift, and go to state 666
    '*'                           shift, and go to state 667
    '/'                           shift, and go to state 668
    '%'                           shift, and go to state 669

    $default  reduce using rule 451 (static_operation)


state 776

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value "!== (T_IS_NOT_IDENTICAL)" static_scalar_value .
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '<'                           shift, and go to state 658
    '>'                           shift, and go to state 659
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 660
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 661
    ">> (T_SR)"                   shift, and go to state 662
    "<< (T_SL)"                   shift, and go to state 663
    '+'                           shift, and go to state 664
    '-'                           shift, and go to state 665
    '.'                           shift, and go to state 666
    '*'                           shift, and go to state 667
    '/'                           shift, and go to state 668
    '%'                           shift, and go to state 669

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 462 (static_operation)


state 777

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  461                 | static_scalar_value "=== (T_IS_IDENTICAL)" static_scalar_value .
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '<'                           shift, and go to state 658
    '>'                           shift, and go to state 659
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 660
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 661
    ">> (T_SR)"                   shift, and go to state 662
    "<< (T_SL)"                   shift, and go to state 663
    '+'                           shift, and go to state 664
    '-'                           shift, and go to state 665
    '.'                           shift, and go to state 666
    '*'                           shift, and go to state 667
    '/'                           shift, and go to state 668
    '%'                           shift, and go to state 669

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 461 (static_operation)


state 778

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  464                 | static_scalar_value "!= (T_IS_NOT_EQUAL)" static_scalar_value .
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '<'                           shift, and go to state 658
    '>'                           shift, and go to state 659
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 660
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 661
    ">> (T_SR)"                   shift, and go to state 662
    "<< (T_SL)"                   shift, and go to state 663
    '+'                           shift, and go to state 664
    '-'                           shift, and go to state 665
    '.'                           shift, and go to state 666
    '*'                           shift, and go to state 667
    '/'                           shift, and go to state 668
    '%'                           shift, and go to state 669

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 464 (static_operation)


state 779

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  463                 | static_scalar_value "== (T_IS_EQUAL)" static_scalar_value .
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '<'                           shift, and go to state 658
    '>'                           shift, and go to state 659
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 660
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 661
    ">> (T_SR)"                   shift, and go to state 662
    "<< (T_SL)"                   shift, and go to state 663
    '+'                           shift, and go to state 664
    '-'                           shift, and go to state 665
    '.'                           shift, and go to state 666
    '*'                           shift, and go to state 667
    '/'                           shift, and go to state 668
    '%'                           shift, and go to state 669

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 463 (static_operation)


state 780

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  465                 | static_scalar_value '<' static_scalar_value .
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    ">> (T_SR)"  shift, and go to state 662
    "<< (T_SL)"  shift, and go to state 663
    '+'          shift, and go to state 664
    '-'          shift, and go to state 665
    '.'          shift, and go to state 666
    '*'          shift, and go to state 667
    '/'          shift, and go to state 668
    '%'          shift, and go to state 669

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 465 (static_operation)


state 781

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  466                 | static_scalar_value '>' static_scalar_value .
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    ">> (T_SR)"  shift, and go to state 662
    "<< (T_SL)"  shift, and go to state 663
    '+'          shift, and go to state 664
    '-'          shift, and go to state 665
    '.'          shift, and go to state 666
    '*'          shift, and go to state 667
    '/'          shift, and go to state 668
    '%'          shift, and go to state 669

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 466 (static_operation)


state 782

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value .
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    ">> (T_SR)"  shift, and go to state 662
    "<< (T_SL)"  shift, and go to state 663
    '+'          shift, and go to state 664
    '-'          shift, and go to state 665
    '.'          shift, and go to state 666
    '*'          shift, and go to state 667
    '/'          shift, and go to state 668
    '%'          shift, and go to state 669

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 468 (static_operation)


state 783

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  467                 | static_scalar_value "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value .
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    ">> (T_SR)"  shift, and go to state 662
    "<< (T_SL)"  shift, and go to state 663
    '+'          shift, and go to state 664
    '-'          shift, and go to state 665
    '.'          shift, and go to state 666
    '*'          shift, and go to state 667
    '/'          shift, and go to state 668
    '%'          shift, and go to state 669

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 467 (static_operation)


state 784

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  454                 | static_scalar_value ">> (T_SR)" static_scalar_value .
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '+'  shift, and go to state 664
    '-'  shift, and go to state 665
    '.'  shift, and go to state 666
    '*'  shift, and go to state 667
    '/'  shift, and go to state 668
    '%'  shift, and go to state 669

    $default  reduce using rule 454 (static_operation)


state 785

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  453                 | static_scalar_value "<< (T_SL)" static_scalar_value .
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '+'  shift, and go to state 664
    '-'  shift, and go to state 665
    '.'  shift, and go to state 666
    '*'  shift, and go to state 667
    '/'  shift, and go to state 668
    '%'  shift, and go to state 669

    $default  reduce using rule 453 (static_operation)


state 786

  443 static_operation: static_scalar_value . '+' static_scalar_value
  443                 | static_scalar_value '+' static_scalar_value .
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '*'  shift, and go to state 667
    '/'  shift, and go to state 668
    '%'  shift, and go to state 669

    $default  reduce using rule 443 (static_operation)


state 787

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  444                 | static_scalar_value '-' static_scalar_value .
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '*'  shift, and go to state 667
    '/'  shift, and go to state 668
    '%'  shift, and go to state 669

    $default  reduce using rule 444 (static_operation)


state 788

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  455                 | static_scalar_value '.' static_scalar_value .
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    '*'  shift, and go to state 667
    '/'  shift, and go to state 668
    '%'  shift, and go to state 669

    $default  reduce using rule 455 (static_operation)


state 789

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  445                 | static_scalar_value '*' static_scalar_value .
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    $default  reduce using rule 445 (static_operation)


state 790

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  446                 | static_scalar_value '/' static_scalar_value .
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    $default  reduce using rule 446 (static_operation)


state 791

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  447                 | static_scalar_value '%' static_scalar_value .
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    $default  reduce using rule 447 (static_operation)


state 792

  101 catch_statement: "catch (T_CATCH)" . '(' $@24 fully_qualified_class_name $@25 "variable (T_VARIABLE)" ')' $@26 '{' inner_statement_list '}' $@27 additional_catches

    '('  shift, and go to state 861


state 793

   93 unticked_statement: "try (T_TRY)" $@22 '{' inner_statement_list '}' catch_statement . $@23 finally_statement

    $default  reduce using rule 92 ($@23)

    $@23  go to state 862


state 794

   31 use_function_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 31 (use_function_declaration)


state 795

   37 use_const_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 37 (use_const_declaration)


state 796

  204 static_var_list: static_var_list ',' "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 204 (static_var_list)


state 797

  362 expr_without_variable: "static (T_STATIC)" function is_reference @57 '(' parameter_list . ')' lexical_vars '{' inner_statement_list '}'

    ')'  shift, and go to state 863


state 798

  585 isset_variables: isset_variables ',' $@76 isset_variable .

    $default  reduce using rule 585 (isset_variables)


state 799

  549 assignment_list_element: "list (T_LIST)" '(' $@74 . assignment_list ')'

    "identifier (T_STRING)"    shift, and go to state 123
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 148
    "list (T_LIST)"            shift, and go to state 549
    "namespace (T_NAMESPACE)"  shift, and go to state 149
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 150
    '$'                        shift, and go to state 81

    $default  reduce using rule 550 (assignment_list_element)

    namespace_name                     go to state 151
    function_call                      go to state 101
    class_name                         go to state 152
    variable                           go to state 550
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 155
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    assignment_list                    go to state 864
    assignment_list_element            go to state 552


state 800

  545 assignment_list: assignment_list ',' assignment_list_element .

    $default  reduce using rule 545 (assignment_list)


state 801

  277 expr_without_variable: "list (T_LIST)" '(' $@45 assignment_list ')' '=' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 865
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 802

  567 encaps_var: "variable (T_VARIABLE)" '[' $@75 encaps_var_offset ']' .

    $default  reduce using rule 567 (encaps_var)


state 803

  570 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr ']' . '}'

    '}'  shift, and go to state 866


state 804

   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' $@2 top_statement_list '}' .

    $default  reduce using rule 13 (top_statement)


state 805

  266 chaining_dereference: '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 533 (dim_offset)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 329
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    dim_offset                         go to state 867
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 806

  506 variable_property: "-> (T_OBJECT_OPERATOR)" . object_property $@70 method_or_not

    "identifier (T_STRING)"  shift, and go to state 479
    "variable (T_VARIABLE)"  shift, and go to state 35
    '{'                      shift, and go to state 420
    '$'                      shift, and go to state 81

    variable_without_objects   go to state 605
    reference_variable         go to state 422
    compound_variable          go to state 117
    object_property            go to state 868
    object_dim_list            go to state 607
    variable_name              go to state 608
    simple_indirect_reference  go to state 424


state 807

  263 chaining_method_or_property: chaining_method_or_property . variable_property
  270 chaining_instance_call: chaining_method_or_property .

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 806

    $default  reduce using rule 270 (chaining_instance_call)

    variable_property  go to state 869


state 808

  265 chaining_dereference: chaining_dereference . '[' dim_offset ']'
  268 chaining_instance_call: chaining_dereference . $@42 chaining_method_or_property
  269                       | chaining_dereference .

    '['  shift, and go to state 870

    "-> (T_OBJECT_OPERATOR)"  reduce using rule 267 ($@42)
    $default                  reduce using rule 269 (chaining_instance_call)

    $@42  go to state 871


state 809

  273 instance_call: $@43 chaining_instance_call .

    $default  reduce using rule 273 (instance_call)


state 810

  264 chaining_method_or_property: variable_property .

    $default  reduce using rule 264 (chaining_method_or_property)


state 811

   46 inner_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' . ';'

    ';'  shift, and go to state 872


state 812

  196 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 123
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 148
    "namespace (T_NAMESPACE)"  shift, and go to state 149
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 150
    '$'                        shift, and go to state 81

    namespace_name                     go to state 151
    function_call                      go to state 101
    class_name                         go to state 152
    w_variable                         go to state 873
    variable                           go to state 314
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 155
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118


state 813

  197 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' "... (T_ELLIPSIS)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 874
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 814

  194 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' expr_without_variable .
  493 expr: expr_without_variable .

    ','       reduce using rule 194 (non_empty_function_call_parameter_list)
    ')'       reduce using rule 194 (non_empty_function_call_parameter_list)
    $default  reduce using rule 493 (expr)


state 815

  195 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' variable .
  278 expr_without_variable: variable . '=' expr
  279                      | variable . '=' '&' variable
  281                      | variable . '=' '&' "new (T_NEW)" class_name_reference $@46 ctor_arguments
  283                      | variable . "+= (T_PLUS_EQUAL)" expr
  284                      | variable . "-= (T_MINUS_EQUAL)" expr
  285                      | variable . "*= (T_MUL_EQUAL)" expr
  286                      | variable . "**= (T_POW_EQUAL)" expr
  287                      | variable . "/= (T_DIV_EQUAL)" expr
  288                      | variable . ".= (T_CONCAT_EQUAL)" expr
  289                      | variable . "%= (T_MOD_EQUAL)" expr
  290                      | variable . "&= (T_AND_EQUAL)" expr
  291                      | variable . "|= (T_OR_EQUAL)" expr
  292                      | variable . "^= (T_XOR_EQUAL)" expr
  293                      | variable . "<<= (T_SL_EQUAL)" expr
  294                      | variable . ">>= (T_SR_EQUAL)" expr
  496 r_variable: variable .
  498 rw_variable: variable .

    '='                    shift, and go to state 284
    "**= (T_POW_EQUAL)"    shift, and go to state 285
    ">>= (T_SR_EQUAL)"     shift, and go to state 286
    "<<= (T_SL_EQUAL)"     shift, and go to state 287
    "^= (T_XOR_EQUAL)"     shift, and go to state 288
    "|= (T_OR_EQUAL)"      shift, and go to state 289
    "&= (T_AND_EQUAL)"     shift, and go to state 290
    "%= (T_MOD_EQUAL)"     shift, and go to state 291
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 292
    "/= (T_DIV_EQUAL)"     shift, and go to state 293
    "*= (T_MUL_EQUAL)"     shift, and go to state 294
    "-= (T_MINUS_EQUAL)"   shift, and go to state 295
    "+= (T_PLUS_EQUAL)"    shift, and go to state 296

    ','           reduce using rule 195 (non_empty_function_call_parameter_list)
    "-- (T_DEC)"  reduce using rule 498 (rw_variable)
    "++ (T_INC)"  reduce using rule 498 (rw_variable)
    ')'           reduce using rule 195 (non_empty_function_call_parameter_list)
    $default      reduce using rule 496 (r_variable)


state 816

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  400 fully_qualified_class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 241

    $default  reduce using rule 400 (fully_qualified_class_name)


state 817

  137 implements_list: "implements (T_IMPLEMENTS)" interface_list .
  139 interface_list: interface_list . ',' fully_qualified_class_name

    ','  shift, and go to state 819

    $default  reduce using rule 137 (implements_list)


state 818

  124 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from $@32 implements_list '{' . class_statement_list '}'

    $default  reduce using rule 208 (class_statement_list)

    class_statement_list  go to state 875


state 819

  139 interface_list: interface_list ',' . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 123
    "namespace (T_NAMESPACE)"  shift, and go to state 578
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 579

    namespace_name              go to state 580
    fully_qualified_class_name  go to state 876


state 820

  126 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" $@33 interface_extends_list '{' class_statement_list . '}'
  207 class_statement_list: class_statement_list . class_statement

    "const (T_CONST)"          shift, and go to state 877
    "use (T_USE)"              shift, and go to state 878
    "public (T_PUBLIC)"        shift, and go to state 879
    "protected (T_PROTECTED)"  shift, and go to state 880
    "private (T_PRIVATE)"      shift, and go to state 881
    "final (T_FINAL)"          shift, and go to state 882
    "abstract (T_ABSTRACT)"    shift, and go to state 883
    "static (T_STATIC)"        shift, and go to state 884
    "var (T_VAR)"              shift, and go to state 885
    '}'                        shift, and go to state 886

    $default  reduce using rule 240 (method_modifiers)

    class_statement             go to state 887
    trait_use_statement         go to state 888
    variable_modifiers          go to state 889
    method_modifiers            go to state 890
    non_empty_member_modifiers  go to state 891
    member_modifier             go to state 892
    class_constant_declaration  go to state 893


state 821

  122 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" $@31 '(' parameter_list . ')' '{' inner_statement_list '}'

    ')'  shift, and go to state 894


state 822

  360 expr_without_variable: function is_reference @56 '(' parameter_list ')' . lexical_vars '{' inner_statement_list '}'

    "use (T_USE)"  shift, and go to state 895

    $default  reduce using rule 373 (lexical_vars)

    lexical_vars  go to state 896


state 823

  180 non_empty_parameter_list: non_empty_parameter_list ',' . parameter

    "identifier (T_STRING)"    shift, and go to state 123
    "array (T_ARRAY)"          shift, and go to state 712
    "callable (T_CALLABLE)"    shift, and go to state 713
    "namespace (T_NAMESPACE)"  shift, and go to state 578
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 579

    $default  reduce using rule 183 (optional_class_type)

    namespace_name              go to state 580
    parameter                   go to state 897
    optional_class_type         go to state 717
    fully_qualified_class_name  go to state 718


state 824

  181 parameter: optional_class_type is_reference . is_variadic "variable (T_VARIABLE)"
  182          | optional_class_type is_reference . is_variadic "variable (T_VARIABLE)" '=' static_scalar

    "... (T_ELLIPSIS)"  shift, and go to state 898

    $default  reduce using rule 119 (is_variadic)

    is_variadic  go to state 899


state 825

  339 expr_without_variable: expr '?' $@52 expr ':' $@53 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 900
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 826

  281 expr_without_variable: variable '=' '&' "new (T_NEW)" class_name_reference $@46 . ctor_arguments

    '('  shift, and go to state 407

    $default  reduce using rule 417 (ctor_arguments)

    function_call_parameter_list  go to state 486
    ctor_arguments                go to state 901


state 827

  507 array_method_dereference: array_method_dereference . '[' dim_offset ']'
  512 method_or_not: array_method_dereference .

    '['  shift, and go to state 902

    $default  reduce using rule 512 (method_or_not)


state 828

  508 array_method_dereference: method . '[' dim_offset ']'
  511 method_or_not: method .

    '['  shift, and go to state 903

    $default  reduce using rule 511 (method_or_not)


state 829

  510 method: @71 . function_call_parameter_list

    '('  shift, and go to state 407

    function_call_parameter_list  go to state 904


state 830

  501 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" $@68 object_property $@69 method_or_not . variable_properties

    $default  reduce using rule 504 (variable_properties)

    variable_properties  go to state 905


state 831

  538 object_dim_list: object_dim_list '[' dim_offset . ']'

    ']'  shift, and go to state 906


state 832

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr
  539 object_dim_list: object_dim_list '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280
    '}'                           shift, and go to state 907


state 833

  557 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" '&' w_variable .

    $default  reduce using rule 557 (non_empty_array_pair_list)


state 834

  406 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" $@66 object_property $@67 dynamic_class_name_variable_properties .
  408 dynamic_class_name_variable_properties: dynamic_class_name_variable_properties . dynamic_class_name_variable_property

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 908

    $default  reduce using rule 406 (dynamic_class_name_reference)

    dynamic_class_name_variable_property  go to state 909


state 835

   55 unticked_statement: "if (T_IF)" parenthesis_expr ':' $@7 inner_statement_list $@8 new_elseif_list . new_else_single "endif (T_ENDIF)" ';'
  172 new_elseif_list: new_elseif_list . "elseif (T_ELSEIF)" parenthesis_expr ':' $@38 inner_statement_list

    "elseif (T_ELSEIF)"  shift, and go to state 910
    "else (T_ELSE)"      shift, and go to state 911

    $default  reduce using rule 175 (new_else_single)

    new_else_single  go to state 912


state 836

  169 elseif_list: elseif_list "elseif (T_ELSEIF)" . parenthesis_expr $@37 statement

    '('  shift, and go to state 175

    parenthesis_expr  go to state 913


state 837

  174 else_single: "else (T_ELSE)" . statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 79
    '{'                                           shift, and go to state 80
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    statement                          go to state 914
    unticked_statement                 go to state 88
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    yield_expr                         go to state 97
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 105
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 838

   52 unticked_statement: "if (T_IF)" parenthesis_expr $@5 statement $@6 elseif_list else_single .

    $default  reduce using rule 52 (unticked_statement)


state 839

   61 unticked_statement: "do (T_DO)" $@11 statement "while (T_WHILE)" $@12 parenthesis_expr ';' .

    $default  reduce using rule 61 (unticked_statement)


state 840

  166 while_statement: ':' inner_statement_list "endwhile (T_ENDWHILE)" . ';'

    ';'  shift, and go to state 915


state 841

   65 unticked_statement: "for (T_FOR)" '(' for_expr ';' $@13 for_expr ';' . $@14 for_expr ')' $@15 for_statement

    $default  reduce using rule 63 ($@14)

    $@14  go to state 916


state 842

  143 foreach_variable: '&' variable .

    $default  reduce using rule 143 (foreach_variable)


state 843

  145 foreach_variable: "list (T_LIST)" '(' . $@34 assignment_list ')'

    $default  reduce using rule 144 ($@34)

    $@34  go to state 917


state 844

  141 foreach_optional_arg: "=> (T_DOUBLE_ARROW)" . foreach_variable

    '&'                        shift, and go to state 741
    "identifier (T_STRING)"    shift, and go to state 123
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 148
    "list (T_LIST)"            shift, and go to state 742
    "namespace (T_NAMESPACE)"  shift, and go to state 149
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 150
    '$'                        shift, and go to state 81

    namespace_name                     go to state 151
    foreach_variable                   go to state 918
    function_call                      go to state 101
    class_name                         go to state 152
    variable                           go to state 744
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 155
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118


state 845

   87 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" $@19 foreach_variable foreach_optional_arg . ')' $@20 foreach_statement

    ')'  shift, and go to state 919


state 846

   84 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" $@17 foreach_variable foreach_optional_arg . ')' $@18 foreach_statement

    ')'  shift, and go to state 920


state 847

  153 declare_list: declare_list ',' "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    '['                                           shift, and go to state 509
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "array (T_ARRAY)"                             shift, and go to state 511
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar             go to state 921
    static_scalar_value       go to state 522
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 848

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  151 declare_statement: ':' inner_statement_list . "enddeclare (T_ENDDECLARE)" ';'

    "enddeclare (T_ENDDECLARE)"  shift, and go to state 922

    $default  reduce using rule 40 ($@4)

    $@4  go to state 402


state 849

  157 switch_case_list: ':' ';' case_list "endswitch (T_ENDSWITCH)" . ';'

    ';'  shift, and go to state 923


state 850

  156 switch_case_list: ':' case_list "endswitch (T_ENDSWITCH)" ';' .

    $default  reduce using rule 156 (switch_case_list)


state 851

  160 case_list: case_list "case (T_CASE)" expr . case_separator $@35 inner_statement_list
  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    ':'                           shift, and go to state 852
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280
    ';'                           shift, and go to state 853

    case_separator  go to state 924


state 852

  163 case_separator: ':' .

    $default  reduce using rule 163 (case_separator)


state 853

  164 case_separator: ';' .

    $default  reduce using rule 164 (case_separator)


state 854

  162 case_list: case_list "default (T_DEFAULT)" case_separator . $@36 inner_statement_list

    $default  reduce using rule 161 ($@36)

    $@36  go to state 925


state 855

  155 switch_case_list: '{' ';' case_list '}' .

    $default  reduce using rule 155 (switch_case_list)


state 856

  490 non_empty_static_array_pair_list: static_scalar "=> (T_DOUBLE_ARROW)" static_scalar .

    $default  reduce using rule 490 (non_empty_static_array_pair_list)


state 857

  488 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar . "=> (T_DOUBLE_ARROW)" static_scalar
  489                                 | non_empty_static_array_pair_list ',' static_scalar .

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 926

    $default  reduce using rule 489 (non_empty_static_array_pair_list)


state 858

  433 static_scalar: "array (T_ARRAY)" '(' static_array_pair_list ')' .

    $default  reduce using rule 433 (static_scalar)


state 859

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  469                 | static_scalar_value '?' ':' static_scalar_value .
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value

    "|| (T_BOOLEAN_OR)"           shift, and go to state 649
    "&& (T_BOOLEAN_AND)"          shift, and go to state 650
    '|'                           shift, and go to state 651
    '^'                           shift, and go to state 652
    '&'                           shift, and go to state 653
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 654
    "=== (T_IS_IDENTICAL)"        shift, and go to state 655
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 656
    "== (T_IS_EQUAL)"             shift, and go to state 657
    '<'                           shift, and go to state 658
    '>'                           shift, and go to state 659
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 660
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 661
    ">> (T_SR)"                   shift, and go to state 662
    "<< (T_SL)"                   shift, and go to state 663
    '+'                           shift, and go to state 664
    '-'                           shift, and go to state 665
    '.'                           shift, and go to state 666
    '*'                           shift, and go to state 667
    '/'                           shift, and go to state 668
    '%'                           shift, and go to state 669

    $default  reduce using rule 469 (static_operation)


state 860

  470 static_operation: static_scalar_value '?' static_scalar_value ':' . static_scalar_value

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar_value       go to state 927
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 861

  101 catch_statement: "catch (T_CATCH)" '(' . $@24 fully_qualified_class_name $@25 "variable (T_VARIABLE)" ')' $@26 '{' inner_statement_list '}' $@27 additional_catches

    $default  reduce using rule 97 ($@24)

    $@24  go to state 928


state 862

   93 unticked_statement: "try (T_TRY)" $@22 '{' inner_statement_list '}' catch_statement $@23 . finally_statement

    "finally (T_FINALLY)"  shift, and go to state 929

    $default  reduce using rule 102 (finally_statement)

    finally_statement  go to state 930


state 863

  362 expr_without_variable: "static (T_STATIC)" function is_reference @57 '(' parameter_list ')' . lexical_vars '{' inner_statement_list '}'

    "use (T_USE)"  shift, and go to state 895

    $default  reduce using rule 373 (lexical_vars)

    lexical_vars  go to state 931


state 864

  545 assignment_list: assignment_list . ',' assignment_list_element
  549 assignment_list_element: "list (T_LIST)" '(' $@74 assignment_list . ')'

    ','  shift, and go to state 685
    ')'  shift, and go to state 932


state 865

  277 expr_without_variable: "list (T_LIST)" '(' $@45 assignment_list ')' '=' expr .
  300                      | expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 277 (expr_without_variable)


state 866

  570 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr ']' '}' .

    $default  reduce using rule 570 (encaps_var)


state 867

  266 chaining_dereference: '[' dim_offset . ']'

    ']'  shift, and go to state 933


state 868

  506 variable_property: "-> (T_OBJECT_OPERATOR)" object_property . $@70 method_or_not

    $default  reduce using rule 505 ($@70)

    $@70  go to state 934


state 869

  263 chaining_method_or_property: chaining_method_or_property variable_property .

    $default  reduce using rule 263 (chaining_method_or_property)


state 870

  265 chaining_dereference: chaining_dereference '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 533 (dim_offset)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 329
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    dim_offset                         go to state 935
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 871

  268 chaining_instance_call: chaining_dereference $@42 . chaining_method_or_property

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 806

    chaining_method_or_property  go to state 936
    variable_property            go to state 810


state 872

   46 inner_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';' .

    $default  reduce using rule 46 (inner_statement)


state 873

  196 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' '&' w_variable .

    $default  reduce using rule 196 (non_empty_function_call_parameter_list)


state 874

  197 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' "... (T_ELLIPSIS)" expr .
  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  341                      | expr . '?' ':' $@54 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 254
    "xor (T_LOGICAL_XOR)"         shift, and go to state 255
    "and (T_LOGICAL_AND)"         shift, and go to state 256
    '?'                           shift, and go to state 257
    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 197 (non_empty_function_call_parameter_list)


state 875

  124 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from $@32 implements_list '{' class_statement_list . '}'
  207 class_statement_list: class_statement_list . class_statement

    "const (T_CONST)"          shift, and go to state 877
    "use (T_USE)"              shift, and go to state 878
    "public (T_PUBLIC)"        shift, and go to state 879
    "protected (T_PROTECTED)"  shift, and go to state 880
    "private (T_PRIVATE)"      shift, and go to state 881
    "final (T_FINAL)"          shift, and go to state 882
    "abstract (T_ABSTRACT)"    shift, and go to state 883
    "static (T_STATIC)"        shift, and go to state 884
    "var (T_VAR)"              shift, and go to state 885
    '}'                        shift, and go to state 937

    $default  reduce using rule 240 (method_modifiers)

    class_statement             go to state 887
    trait_use_statement         go to state 888
    variable_modifiers          go to state 889
    method_modifiers            go to state 890
    non_empty_member_modifiers  go to state 891
    member_modifier             go to state 892
    class_constant_declaration  go to state 893


state 876

  139 interface_list: interface_list ',' fully_qualified_class_name .

    $default  reduce using rule 139 (interface_list)


state 877

  255 class_constant_declaration: "const (T_CONST)" . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 938


state 878

  215 trait_use_statement: "use (T_USE)" . trait_list trait_adaptations

    "identifier (T_STRING)"    shift, and go to state 123
    "namespace (T_NAMESPACE)"  shift, and go to state 578
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 579

    namespace_name              go to state 580
    trait_list                  go to state 939
    fully_qualified_class_name  go to state 940


state 879

  244 member_modifier: "public (T_PUBLIC)" .

    $default  reduce using rule 244 (member_modifier)


state 880

  245 member_modifier: "protected (T_PROTECTED)" .

    $default  reduce using rule 245 (member_modifier)


state 881

  246 member_modifier: "private (T_PRIVATE)" .

    $default  reduce using rule 246 (member_modifier)


state 882

  249 member_modifier: "final (T_FINAL)" .

    $default  reduce using rule 249 (member_modifier)


state 883

  248 member_modifier: "abstract (T_ABSTRACT)" .

    $default  reduce using rule 248 (member_modifier)


state 884

  247 member_modifier: "static (T_STATIC)" .

    $default  reduce using rule 247 (member_modifier)


state 885

  239 variable_modifiers: "var (T_VAR)" .

    $default  reduce using rule 239 (variable_modifiers)


state 886

  126 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" $@33 interface_extends_list '{' class_statement_list '}' .

    $default  reduce using rule 126 (unticked_class_declaration_statement)


state 887

  207 class_statement_list: class_statement_list class_statement .

    $default  reduce using rule 207 (class_statement_list)


state 888

  212 class_statement: trait_use_statement .

    $default  reduce using rule 212 (class_statement)


state 889

  210 class_statement: variable_modifiers . $@39 class_variable_declaration ';'

    $default  reduce using rule 209 ($@39)

    $@39  go to state 941


state 890

  214 class_statement: method_modifiers . function is_reference "identifier (T_STRING)" $@40 '(' parameter_list ')' method_body

    "function (T_FUNCTION)"  shift, and go to state 48

    function  go to state 942


state 891

  238 variable_modifiers: non_empty_member_modifiers .
  241 method_modifiers: non_empty_member_modifiers .
  243 non_empty_member_modifiers: non_empty_member_modifiers . member_modifier

    "public (T_PUBLIC)"        shift, and go to state 879
    "protected (T_PROTECTED)"  shift, and go to state 880
    "private (T_PRIVATE)"      shift, and go to state 881
    "final (T_FINAL)"          shift, and go to state 882
    "abstract (T_ABSTRACT)"    shift, and go to state 883
    "static (T_STATIC)"        shift, and go to state 884

    "function (T_FUNCTION)"  reduce using rule 241 (method_modifiers)
    $default                 reduce using rule 238 (variable_modifiers)

    member_modifier  go to state 943


state 892

  242 non_empty_member_modifiers: member_modifier .

    $default  reduce using rule 242 (non_empty_member_modifiers)


state 893

  211 class_statement: class_constant_declaration . ';'
  254 class_constant_declaration: class_constant_declaration . ',' "identifier (T_STRING)" '=' static_scalar

    ','  shift, and go to state 944
    ';'  shift, and go to state 945


state 894

  122 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" $@31 '(' parameter_list ')' . '{' inner_statement_list '}'

    '{'  shift, and go to state 946


state 895

  374 lexical_vars: "use (T_USE)" . '(' lexical_var_list ')'

    '('  shift, and go to state 947


state 896

  360 expr_without_variable: function is_reference @56 '(' parameter_list ')' lexical_vars . '{' inner_statement_list '}'

    '{'  shift, and go to state 948


state 897

  180 non_empty_parameter_list: non_empty_parameter_list ',' parameter .

    $default  reduce using rule 180 (non_empty_parameter_list)


state 898

  120 is_variadic: "... (T_ELLIPSIS)" .

    $default  reduce using rule 120 (is_variadic)


state 899

  181 parameter: optional_class_type is_reference is_variadic . "variable (T_VARIABLE)"
  182          | optional_class_type is_reference is_variadic . "variable (T_VARIABLE)" '=' static_scalar

    "variable (T_VARIABLE)"  shift, and go to state 949


state 900

  300 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" $@47 expr
  302                      | expr . "&& (T_BOOLEAN_AND)" $@48 expr
  304                      | expr . "or (T_LOGICAL_OR)" $@49 expr
  306                      | expr . "and (T_LOGICAL_AND)" $@50 expr
  307                      | expr . "xor (T_LOGICAL_XOR)" expr
  308                      | expr . '|' expr
  309                      | expr . '&' expr
  310                      | expr . '^' expr
  311                      | expr . '.' expr
  312                      | expr . '+' expr
  313                      | expr . '-' expr
  314                      | expr . '*' expr
  315                      | expr . "** (T_POW)" expr
  316                      | expr . '/' expr
  317                      | expr . '%' expr
  318                      | expr . "<< (T_SL)" expr
  319                      | expr . ">> (T_SR)" expr
  324                      | expr . "=== (T_IS_IDENTICAL)" expr
  325                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  326                      | expr . "== (T_IS_EQUAL)" expr
  327                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  328                      | expr . '<' expr
  329                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  330                      | expr . '>' expr
  331                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  332                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  339                      | expr . '?' $@52 expr ':' $@53 expr
  339                      | expr '?' $@52 expr ':' $@53 expr .
  341                      | expr . '?' ':' $@54 expr

    "|| (T_BOOLEAN_OR)"           shift, and go to state 258
    "&& (T_BOOLEAN_AND)"          shift, and go to state 259
    '|'                           shift, and go to state 260
    '^'                           shift, and go to state 261
    '&'                           shift, and go to state 262
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 263
    "=== (T_IS_IDENTICAL)"        shift, and go to state 264
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 265
    "== (T_IS_EQUAL)"             shift, and go to state 266
    '<'                           shift, and go to state 267
    '>'                           shift, and go to state 268
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 269
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 270
    ">> (T_SR)"                   shift, and go to state 271
    "<< (T_SL)"                   shift, and go to state 272
    '+'                           shift, and go to state 273
    '-'                           shift, and go to state 274
    '.'                           shift, and go to state 275
    '*'                           shift, and go to state 276
    '/'                           shift, and go to state 277
    '%'                           shift, and go to state 278
    "instanceof (T_INSTANCEOF)"   shift, and go to state 279
    "** (T_POW)"                  shift, and go to state 280

    $default  reduce using rule 339 (expr_without_variable)


state 901

  281 expr_without_variable: variable '=' '&' "new (T_NEW)" class_name_reference $@46 ctor_arguments .

    $default  reduce using rule 281 (expr_without_variable)


state 902

  507 array_method_dereference: array_method_dereference '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 533 (dim_offset)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 329
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    dim_offset                         go to state 950
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 903

  508 array_method_dereference: method '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 533 (dim_offset)

    namespace_name                     go to state 84
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 329
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    dim_offset                         go to state 951
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 904

  510 method: @71 function_call_parameter_list .

    $default  reduce using rule 510 (method)


state 905

  501 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" $@68 object_property $@69 method_or_not variable_properties .
  503 variable_properties: variable_properties . variable_property

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 806

    $default  reduce using rule 501 (variable)

    variable_property  go to state 952


state 906

  538 object_dim_list: object_dim_list '[' dim_offset ']' .

    $default  reduce using rule 538 (object_dim_list)


state 907

  539 object_dim_list: object_dim_list '{' expr '}' .

    $default  reduce using rule 539 (object_dim_list)


state 908

  410 dynamic_class_name_variable_property: "-> (T_OBJECT_OPERATOR)" . object_property

    "identifier (T_STRING)"  shift, and go to state 479
    "variable (T_VARIABLE)"  shift, and go to state 35
    '{'                      shift, and go to state 420
    '$'                      shift, and go to state 81

    variable_without_objects   go to state 605
    reference_variable         go to state 422
    compound_variable          go to state 117
    object_property            go to state 953
    object_dim_list            go to state 607
    variable_name              go to state 608
    simple_indirect_reference  go to state 424


state 909

  408 dynamic_class_name_variable_properties: dynamic_class_name_variable_properties dynamic_class_name_variable_property .

    $default  reduce using rule 408 (dynamic_class_name_variable_properties)


state 910

  172 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" . parenthesis_expr ':' $@38 inner_statement_list

    '('  shift, and go to state 175

    parenthesis_expr  go to state 954


state 911

  176 new_else_single: "else (T_ELSE)" . ':' inner_statement_list

    ':'  shift, and go to state 955


state 912

   55 unticked_statement: "if (T_IF)" parenthesis_expr ':' $@7 inner_statement_list $@8 new_elseif_list new_else_single . "endif (T_ENDIF)" ';'

    "endif (T_ENDIF)"  shift, and go to state 956


state 913

  169 elseif_list: elseif_list "elseif (T_ELSEIF)" parenthesis_expr . $@37 statement

    $default  reduce using rule 168 ($@37)

    $@37  go to state 957


state 914

  174 else_single: "else (T_ELSE)" statement .

    $default  reduce using rule 174 (else_single)


state 915

  166 while_statement: ':' inner_statement_list "endwhile (T_ENDWHILE)" ';' .

    $default  reduce using rule 166 (while_statement)


state 916

   65 unticked_statement: "for (T_FOR)" '(' for_expr ';' $@13 for_expr ';' $@14 . for_expr ')' $@15 for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 122
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "function (T_FUNCTION)"                       shift, and go to state 48
    "static (T_STATIC)"                           shift, and go to state 124
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    $default  reduce using rule 258 (for_expr)

    namespace_name                     go to state 84
    for_expr                           go to state 958
    non_empty_for_expr                 go to state 336
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 337
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 917

  145 foreach_variable: "list (T_LIST)" '(' $@34 . assignment_list ')'

    "identifier (T_STRING)"    shift, and go to state 123
    "variable (T_VARIABLE)"    shift, and go to state 35
    "static (T_STATIC)"        shift, and go to state 148
    "list (T_LIST)"            shift, and go to state 549
    "namespace (T_NAMESPACE)"  shift, and go to state 149
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 150
    '$'                        shift, and go to state 81

    $default  reduce using rule 550 (assignment_list_element)

    namespace_name                     go to state 151
    function_call                      go to state 101
    class_name                         go to state 152
    variable                           go to state 550
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 155
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    assignment_list                    go to state 959
    assignment_list_element            go to state 552


state 918

  141 foreach_optional_arg: "=> (T_DOUBLE_ARROW)" foreach_variable .

    $default  reduce using rule 141 (foreach_optional_arg)


state 919

   87 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" $@19 foreach_variable foreach_optional_arg ')' . $@20 foreach_statement

    $default  reduce using rule 86 ($@20)

    $@20  go to state 960


state 920

   84 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" $@17 foreach_variable foreach_optional_arg ')' . $@18 foreach_statement

    $default  reduce using rule 83 ($@18)

    $@18  go to state 961


state 921

  153 declare_list: declare_list ',' "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 153 (declare_list)


state 922

  151 declare_statement: ':' inner_statement_list "enddeclare (T_ENDDECLARE)" . ';'

    ';'  shift, and go to state 962


state 923

  157 switch_case_list: ':' ';' case_list "endswitch (T_ENDSWITCH)" ';' .

    $default  reduce using rule 157 (switch_case_list)


state 924

  160 case_list: case_list "case (T_CASE)" expr case_separator . $@35 inner_statement_list

    $default  reduce using rule 159 ($@35)

    $@35  go to state 963


state 925

  162 case_list: case_list "default (T_DEFAULT)" case_separator $@36 . inner_statement_list

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 964


state 926

  488 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar "=> (T_DOUBLE_ARROW)" . static_scalar

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    '['                                           shift, and go to state 509
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "array (T_ARRAY)"                             shift, and go to state 511
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar             go to state 965
    static_scalar_value       go to state 522
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 927

  443 static_operation: static_scalar_value . '+' static_scalar_value
  444                 | static_scalar_value . '-' static_scalar_value
  445                 | static_scalar_value . '*' static_scalar_value
  446                 | static_scalar_value . '/' static_scalar_value
  447                 | static_scalar_value . '%' static_scalar_value
  450                 | static_scalar_value . '|' static_scalar_value
  451                 | static_scalar_value . '&' static_scalar_value
  452                 | static_scalar_value . '^' static_scalar_value
  453                 | static_scalar_value . "<< (T_SL)" static_scalar_value
  454                 | static_scalar_value . ">> (T_SR)" static_scalar_value
  455                 | static_scalar_value . '.' static_scalar_value
  456                 | static_scalar_value . "xor (T_LOGICAL_XOR)" static_scalar_value
  457                 | static_scalar_value . "and (T_LOGICAL_AND)" static_scalar_value
  458                 | static_scalar_value . "or (T_LOGICAL_OR)" static_scalar_value
  459                 | static_scalar_value . "&& (T_BOOLEAN_AND)" static_scalar_value
  460                 | static_scalar_value . "|| (T_BOOLEAN_OR)" static_scalar_value
  461                 | static_scalar_value . "=== (T_IS_IDENTICAL)" static_scalar_value
  462                 | static_scalar_value . "!== (T_IS_NOT_IDENTICAL)" static_scalar_value
  463                 | static_scalar_value . "== (T_IS_EQUAL)" static_scalar_value
  464                 | static_scalar_value . "!= (T_IS_NOT_EQUAL)" static_scalar_value
  465                 | static_scalar_value . '<' static_scalar_value
  466                 | static_scalar_value . '>' static_scalar_value
  467                 | static_scalar_value . "<= (T_IS_SMALLER_OR_EQUAL)" static_scalar_value
  468                 | static_scalar_value . ">= (T_IS_GREATER_OR_EQUAL)" static_scalar_value
  469                 | static_scalar_value . '?' ':' static_scalar_value
  470                 | static_scalar_value . '?' static_scalar_value ':' static_scalar_value
  470                 | static_scalar_value '?' static_scalar_value ':' static_scalar_value .

    "|| (T_BOOLEAN_OR)"           shift, and go to state 649
    "&& (T_BOOLEAN_AND)"          shift, and go to state 650
    '|'                           shift, and go to state 651
    '^'                           shift, and go to state 652
    '&'                           shift, and go to state 653
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 654
    "=== (T_IS_IDENTICAL)"        shift, and go to state 655
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 656
    "== (T_IS_EQUAL)"             shift, and go to state 657
    '<'                           shift, and go to state 658
    '>'                           shift, and go to state 659
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 660
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 661
    ">> (T_SR)"                   shift, and go to state 662
    "<< (T_SL)"                   shift, and go to state 663
    '+'                           shift, and go to state 664
    '-'                           shift, and go to state 665
    '.'                           shift, and go to state 666
    '*'                           shift, and go to state 667
    '/'                           shift, and go to state 668
    '%'                           shift, and go to state 669

    $default  reduce using rule 470 (static_operation)


state 928

  101 catch_statement: "catch (T_CATCH)" '(' $@24 . fully_qualified_class_name $@25 "variable (T_VARIABLE)" ')' $@26 '{' inner_statement_list '}' $@27 additional_catches

    "identifier (T_STRING)"    shift, and go to state 123
    "namespace (T_NAMESPACE)"  shift, and go to state 578
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 579

    namespace_name              go to state 580
    fully_qualified_class_name  go to state 966


state 929

  104 finally_statement: "finally (T_FINALLY)" . $@28 '{' inner_statement_list '}'

    $default  reduce using rule 103 ($@28)

    $@28  go to state 967


state 930

   93 unticked_statement: "try (T_TRY)" $@22 '{' inner_statement_list '}' catch_statement $@23 finally_statement .

    $default  reduce using rule 93 (unticked_statement)


state 931

  362 expr_without_variable: "static (T_STATIC)" function is_reference @57 '(' parameter_list ')' lexical_vars . '{' inner_statement_list '}'

    '{'  shift, and go to state 968


state 932

  549 assignment_list_element: "list (T_LIST)" '(' $@74 assignment_list ')' .

    $default  reduce using rule 549 (assignment_list_element)


state 933

  266 chaining_dereference: '[' dim_offset ']' .

    $default  reduce using rule 266 (chaining_dereference)


state 934

  506 variable_property: "-> (T_OBJECT_OPERATOR)" object_property $@70 . method_or_not

    '('       reduce using rule 509 (@71)
    $default  reduce using rule 513 (method_or_not)

    array_method_dereference  go to state 827
    method                    go to state 828
    @71                       go to state 829
    method_or_not             go to state 969


state 935

  265 chaining_dereference: chaining_dereference '[' dim_offset . ']'

    ']'  shift, and go to state 970


state 936

  263 chaining_method_or_property: chaining_method_or_property . variable_property
  268 chaining_instance_call: chaining_dereference $@42 chaining_method_or_property .

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 806

    $default  reduce using rule 268 (chaining_instance_call)

    variable_property  go to state 869


state 937

  124 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from $@32 implements_list '{' class_statement_list '}' .

    $default  reduce using rule 124 (unticked_class_declaration_statement)


state 938

  255 class_constant_declaration: "const (T_CONST)" "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 971


state 939

  215 trait_use_statement: "use (T_USE)" trait_list . trait_adaptations
  217 trait_list: trait_list . ',' fully_qualified_class_name

    ','  shift, and go to state 972
    ';'  shift, and go to state 973
    '{'  shift, and go to state 974

    trait_adaptations  go to state 975


state 940

  216 trait_list: fully_qualified_class_name .

    $default  reduce using rule 216 (trait_list)


state 941

  210 class_statement: variable_modifiers $@39 . class_variable_declaration ';'

    "variable (T_VARIABLE)"  shift, and go to state 976

    class_variable_declaration  go to state 977


state 942

  214 class_statement: method_modifiers function . is_reference "identifier (T_STRING)" $@40 '(' parameter_list ')' method_body

    '&'  shift, and go to state 250

    $default  reduce using rule 117 (is_reference)

    is_reference  go to state 978


state 943

  243 non_empty_member_modifiers: non_empty_member_modifiers member_modifier .

    $default  reduce using rule 243 (non_empty_member_modifiers)


state 944

  254 class_constant_declaration: class_constant_declaration ',' . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 979


state 945

  211 class_statement: class_constant_declaration ';' .

    $default  reduce using rule 211 (class_statement)


state 946

  122 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" $@31 '(' parameter_list ')' '{' . inner_statement_list '}'

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 980


state 947

  374 lexical_vars: "use (T_USE)" '(' . lexical_var_list ')'

    '&'                      shift, and go to state 981
    "variable (T_VARIABLE)"  shift, and go to state 982

    lexical_var_list  go to state 983


state 948

  360 expr_without_variable: function is_reference @56 '(' parameter_list ')' lexical_vars '{' . inner_statement_list '}'

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 984


state 949

  181 parameter: optional_class_type is_reference is_variadic "variable (T_VARIABLE)" .
  182          | optional_class_type is_reference is_variadic "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 985

    $default  reduce using rule 181 (parameter)


state 950

  507 array_method_dereference: array_method_dereference '[' dim_offset . ']'

    ']'  shift, and go to state 986


state 951

  508 array_method_dereference: method '[' dim_offset . ']'

    ']'  shift, and go to state 987


state 952

  503 variable_properties: variable_properties variable_property .

    $default  reduce using rule 503 (variable_properties)


state 953

  410 dynamic_class_name_variable_property: "-> (T_OBJECT_OPERATOR)" object_property .

    $default  reduce using rule 410 (dynamic_class_name_variable_property)


state 954

  172 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" parenthesis_expr . ':' $@38 inner_statement_list

    ':'  shift, and go to state 988


state 955

  176 new_else_single: "else (T_ELSE)" ':' . inner_statement_list

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 989


state 956

   55 unticked_statement: "if (T_IF)" parenthesis_expr ':' $@7 inner_statement_list $@8 new_elseif_list new_else_single "endif (T_ENDIF)" . ';'

    ';'  shift, and go to state 990


state 957

  169 elseif_list: elseif_list "elseif (T_ELSEIF)" parenthesis_expr $@37 . statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 79
    '{'                                           shift, and go to state 80
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    statement                          go to state 991
    unticked_statement                 go to state 88
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    yield_expr                         go to state 97
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 105
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 958

   65 unticked_statement: "for (T_FOR)" '(' for_expr ';' $@13 for_expr ';' $@14 for_expr . ')' $@15 for_statement

    ')'  shift, and go to state 992


state 959

  145 foreach_variable: "list (T_LIST)" '(' $@34 assignment_list . ')'
  545 assignment_list: assignment_list . ',' assignment_list_element

    ','  shift, and go to state 685
    ')'  shift, and go to state 993


state 960

   87 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" $@19 foreach_variable foreach_optional_arg ')' $@20 . foreach_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    ':'                                           shift, and go to state 994
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 79
    '{'                                           shift, and go to state 80
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    statement                          go to state 995
    unticked_statement                 go to state 88
    foreach_statement                  go to state 996
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    yield_expr                         go to state 97
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 105
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 961

   84 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" $@17 foreach_variable foreach_optional_arg ')' $@18 . foreach_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    ':'                                           shift, and go to state 994
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 79
    '{'                                           shift, and go to state 80
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    statement                          go to state 995
    unticked_statement                 go to state 88
    foreach_statement                  go to state 997
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    yield_expr                         go to state 97
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 105
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 962

  151 declare_statement: ':' inner_statement_list "enddeclare (T_ENDDECLARE)" ';' .

    $default  reduce using rule 151 (declare_statement)


state 963

  160 case_list: case_list "case (T_CASE)" expr case_separator $@35 . inner_statement_list

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 998


state 964

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  162 case_list: case_list "default (T_DEFAULT)" case_separator $@36 inner_statement_list .

    "endswitch (T_ENDSWITCH)"  reduce using rule 162 (case_list)
    "case (T_CASE)"            reduce using rule 162 (case_list)
    "default (T_DEFAULT)"      reduce using rule 162 (case_list)
    '}'                        reduce using rule 162 (case_list)
    $default                   reduce using rule 40 ($@4)

    $@4  go to state 402


state 965

  488 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar "=> (T_DOUBLE_ARROW)" static_scalar .

    $default  reduce using rule 488 (non_empty_static_array_pair_list)


state 966

  101 catch_statement: "catch (T_CATCH)" '(' $@24 fully_qualified_class_name . $@25 "variable (T_VARIABLE)" ')' $@26 '{' inner_statement_list '}' $@27 additional_catches

    $default  reduce using rule 98 ($@25)

    $@25  go to state 999


state 967

  104 finally_statement: "finally (T_FINALLY)" $@28 . '{' inner_statement_list '}'

    '{'  shift, and go to state 1000


state 968

  362 expr_without_variable: "static (T_STATIC)" function is_reference @57 '(' parameter_list ')' lexical_vars '{' . inner_statement_list '}'

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 1001


state 969

  506 variable_property: "-> (T_OBJECT_OPERATOR)" object_property $@70 method_or_not .

    $default  reduce using rule 506 (variable_property)


state 970

  265 chaining_dereference: chaining_dereference '[' dim_offset ']' .

    $default  reduce using rule 265 (chaining_dereference)


state 971

  255 class_constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    '['                                           shift, and go to state 509
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "array (T_ARRAY)"                             shift, and go to state 511
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar             go to state 1002
    static_scalar_value       go to state 522
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 972

  217 trait_list: trait_list ',' . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 123
    "namespace (T_NAMESPACE)"  shift, and go to state 578
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 579

    namespace_name              go to state 580
    fully_qualified_class_name  go to state 1003


state 973

  218 trait_adaptations: ';' .

    $default  reduce using rule 218 (trait_adaptations)


state 974

  219 trait_adaptations: '{' . trait_adaptation_list '}'

    "identifier (T_STRING)"    shift, and go to state 1004
    "namespace (T_NAMESPACE)"  shift, and go to state 578
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 579

    $default  reduce using rule 220 (trait_adaptation_list)

    namespace_name                          go to state 580
    trait_adaptation_list                   go to state 1005
    non_empty_trait_adaptation_list         go to state 1006
    trait_adaptation_statement              go to state 1007
    trait_precedence                        go to state 1008
    trait_method_reference                  go to state 1009
    trait_method_reference_fully_qualified  go to state 1010
    trait_alias                             go to state 1011
    fully_qualified_class_name              go to state 1012


state 975

  215 trait_use_statement: "use (T_USE)" trait_list trait_adaptations .

    $default  reduce using rule 215 (trait_use_statement)


state 976

  252 class_variable_declaration: "variable (T_VARIABLE)" .
  253                           | "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 1013

    $default  reduce using rule 252 (class_variable_declaration)


state 977

  210 class_statement: variable_modifiers $@39 class_variable_declaration . ';'
  250 class_variable_declaration: class_variable_declaration . ',' "variable (T_VARIABLE)"
  251                           | class_variable_declaration . ',' "variable (T_VARIABLE)" '=' static_scalar

    ','  shift, and go to state 1014
    ';'  shift, and go to state 1015


state 978

  214 class_statement: method_modifiers function is_reference . "identifier (T_STRING)" $@40 '(' parameter_list ')' method_body

    "identifier (T_STRING)"  shift, and go to state 1016


state 979

  254 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 1017


state 980

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  122 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" $@31 '(' parameter_list ')' '{' inner_statement_list . '}'

    '}'  shift, and go to state 1018

    $default  reduce using rule 40 ($@4)

    $@4  go to state 402


state 981

  378 lexical_var_list: '&' . "variable (T_VARIABLE)"

    "variable (T_VARIABLE)"  shift, and go to state 1019


state 982

  377 lexical_var_list: "variable (T_VARIABLE)" .

    $default  reduce using rule 377 (lexical_var_list)


state 983

  374 lexical_vars: "use (T_USE)" '(' lexical_var_list . ')'
  375 lexical_var_list: lexical_var_list . ',' "variable (T_VARIABLE)"
  376                 | lexical_var_list . ',' '&' "variable (T_VARIABLE)"

    ','  shift, and go to state 1020
    ')'  shift, and go to state 1021


state 984

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  360 expr_without_variable: function is_reference @56 '(' parameter_list ')' lexical_vars '{' inner_statement_list . '}'

    '}'  shift, and go to state 1022

    $default  reduce using rule 40 ($@4)

    $@4  go to state 402


state 985

  182 parameter: optional_class_type is_reference is_variadic "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    '['                                           shift, and go to state 509
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "array (T_ARRAY)"                             shift, and go to state 511
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar             go to state 1023
    static_scalar_value       go to state 522
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 986

  507 array_method_dereference: array_method_dereference '[' dim_offset ']' .

    $default  reduce using rule 507 (array_method_dereference)


state 987

  508 array_method_dereference: method '[' dim_offset ']' .

    $default  reduce using rule 508 (array_method_dereference)


state 988

  172 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" parenthesis_expr ':' . $@38 inner_statement_list

    $default  reduce using rule 171 ($@38)

    $@38  go to state 1024


state 989

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  176 new_else_single: "else (T_ELSE)" ':' inner_statement_list .

    "endif (T_ENDIF)"  reduce using rule 176 (new_else_single)
    $default           reduce using rule 40 ($@4)

    $@4  go to state 402


state 990

   55 unticked_statement: "if (T_IF)" parenthesis_expr ':' $@7 inner_statement_list $@8 new_elseif_list new_else_single "endif (T_ENDIF)" ';' .

    $default  reduce using rule 55 (unticked_statement)


state 991

  169 elseif_list: elseif_list "elseif (T_ELSEIF)" parenthesis_expr $@37 statement .

    $default  reduce using rule 169 (elseif_list)


state 992

   65 unticked_statement: "for (T_FOR)" '(' for_expr ';' $@13 for_expr ';' $@14 for_expr ')' . $@15 for_statement

    $default  reduce using rule 64 ($@15)

    $@15  go to state 1025


state 993

  145 foreach_variable: "list (T_LIST)" '(' $@34 assignment_list ')' .

    $default  reduce using rule 145 (foreach_variable)


state 994

  149 foreach_statement: ':' . inner_statement_list "endforeach (T_ENDFOREACH)" ';'

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 1026


state 995

  148 foreach_statement: statement .

    $default  reduce using rule 148 (foreach_statement)


state 996

   87 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" $@19 foreach_variable foreach_optional_arg ')' $@20 foreach_statement .

    $default  reduce using rule 87 (unticked_statement)


state 997

   84 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" $@17 foreach_variable foreach_optional_arg ')' $@18 foreach_statement .

    $default  reduce using rule 84 (unticked_statement)


state 998

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  160 case_list: case_list "case (T_CASE)" expr case_separator $@35 inner_statement_list .

    "endswitch (T_ENDSWITCH)"  reduce using rule 160 (case_list)
    "case (T_CASE)"            reduce using rule 160 (case_list)
    "default (T_DEFAULT)"      reduce using rule 160 (case_list)
    '}'                        reduce using rule 160 (case_list)
    $default                   reduce using rule 40 ($@4)

    $@4  go to state 402


state 999

  101 catch_statement: "catch (T_CATCH)" '(' $@24 fully_qualified_class_name $@25 . "variable (T_VARIABLE)" ')' $@26 '{' inner_statement_list '}' $@27 additional_catches

    "variable (T_VARIABLE)"  shift, and go to state 1027


state 1000

  104 finally_statement: "finally (T_FINALLY)" $@28 '{' . inner_statement_list '}'

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 1028


state 1001

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  362 expr_without_variable: "static (T_STATIC)" function is_reference @57 '(' parameter_list ')' lexical_vars '{' inner_statement_list . '}'

    '}'  shift, and go to state 1029

    $default  reduce using rule 40 ($@4)

    $@4  go to state 402


state 1002

  255 class_constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 255 (class_constant_declaration)


state 1003

  217 trait_list: trait_list ',' fully_qualified_class_name .

    $default  reduce using rule 217 (trait_list)


state 1004

    5 namespace_name: "identifier (T_STRING)" .
  229 trait_method_reference: "identifier (T_STRING)" .

    "as (T_AS)"  reduce using rule 229 (trait_method_reference)
    $default     reduce using rule 5 (namespace_name)


state 1005

  219 trait_adaptations: '{' trait_adaptation_list . '}'

    '}'  shift, and go to state 1030


state 1006

  221 trait_adaptation_list: non_empty_trait_adaptation_list .
  223 non_empty_trait_adaptation_list: non_empty_trait_adaptation_list . trait_adaptation_statement

    "identifier (T_STRING)"    shift, and go to state 1004
    "namespace (T_NAMESPACE)"  shift, and go to state 578
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 579

    $default  reduce using rule 221 (trait_adaptation_list)

    namespace_name                          go to state 580
    trait_adaptation_statement              go to state 1031
    trait_precedence                        go to state 1008
    trait_method_reference                  go to state 1009
    trait_method_reference_fully_qualified  go to state 1010
    trait_alias                             go to state 1011
    fully_qualified_class_name              go to state 1012


state 1007

  222 non_empty_trait_adaptation_list: trait_adaptation_statement .

    $default  reduce using rule 222 (non_empty_trait_adaptation_list)


state 1008

  224 trait_adaptation_statement: trait_precedence . ';'

    ';'  shift, and go to state 1032


state 1009

  232 trait_alias: trait_method_reference . "as (T_AS)" trait_modifiers "identifier (T_STRING)"
  233            | trait_method_reference . "as (T_AS)" member_modifier

    "as (T_AS)"  shift, and go to state 1033


state 1010

  226 trait_precedence: trait_method_reference_fully_qualified . "insteadof (T_INSTEADOF)" trait_reference_list
  230 trait_method_reference: trait_method_reference_fully_qualified .

    "insteadof (T_INSTEADOF)"  shift, and go to state 1034

    $default  reduce using rule 230 (trait_method_reference)


state 1011

  225 trait_adaptation_statement: trait_alias . ';'

    ';'  shift, and go to state 1035


state 1012

  231 trait_method_reference_fully_qualified: fully_qualified_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 1036


state 1013

  253 class_variable_declaration: "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    '['                                           shift, and go to state 509
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "array (T_ARRAY)"                             shift, and go to state 511
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar             go to state 1037
    static_scalar_value       go to state 522
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 1014

  250 class_variable_declaration: class_variable_declaration ',' . "variable (T_VARIABLE)"
  251                           | class_variable_declaration ',' . "variable (T_VARIABLE)" '=' static_scalar

    "variable (T_VARIABLE)"  shift, and go to state 1038


state 1015

  210 class_statement: variable_modifiers $@39 class_variable_declaration ';' .

    $default  reduce using rule 210 (class_statement)


state 1016

  214 class_statement: method_modifiers function is_reference "identifier (T_STRING)" . $@40 '(' parameter_list ')' method_body

    $default  reduce using rule 213 ($@40)

    $@40  go to state 1039


state 1017

  254 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    '['                                           shift, and go to state 509
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "array (T_ARRAY)"                             shift, and go to state 511
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar             go to state 1040
    static_scalar_value       go to state 522
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 1018

  122 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" $@31 '(' parameter_list ')' '{' inner_statement_list '}' .

    $default  reduce using rule 122 (unticked_function_declaration_statement)


state 1019

  378 lexical_var_list: '&' "variable (T_VARIABLE)" .

    $default  reduce using rule 378 (lexical_var_list)


state 1020

  375 lexical_var_list: lexical_var_list ',' . "variable (T_VARIABLE)"
  376                 | lexical_var_list ',' . '&' "variable (T_VARIABLE)"

    '&'                      shift, and go to state 1041
    "variable (T_VARIABLE)"  shift, and go to state 1042


state 1021

  374 lexical_vars: "use (T_USE)" '(' lexical_var_list ')' .

    $default  reduce using rule 374 (lexical_vars)


state 1022

  360 expr_without_variable: function is_reference @56 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}' .

    $default  reduce using rule 360 (expr_without_variable)


state 1023

  182 parameter: optional_class_type is_reference is_variadic "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 182 (parameter)


state 1024

  172 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" parenthesis_expr ':' $@38 . inner_statement_list

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 1043


state 1025

   65 unticked_statement: "for (T_FOR)" '(' for_expr ';' $@13 for_expr ';' $@14 for_expr ')' $@15 . for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    "yield (T_YIELD)"                             shift, and go to state 11
    ':'                                           shift, and go to state 1044
    '+'                                           shift, and go to state 12
    '-'                                           shift, and go to state 13
    '!'                                           shift, and go to state 14
    '~'                                           shift, and go to state 15
    '@'                                           shift, and go to state 16
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 17
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 18
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 19
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 20
    "(string) (T_STRING_CAST)"                    shift, and go to state 21
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 22
    "(int) (T_INT_CAST)"                          shift, and go to state 23
    "-- (T_DEC)"                                  shift, and go to state 24
    "++ (T_INC)"                                  shift, and go to state 25
    '['                                           shift, and go to state 26
    "clone (T_CLONE)"                             shift, and go to state 27
    "new (T_NEW)"                                 shift, and go to state 28
    "exit (T_EXIT)"                               shift, and go to state 29
    "if (T_IF)"                                   shift, and go to state 30
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 33
    "variable name (T_STRING_VARNAME)"            shift, and go to state 34
    "variable (T_VARIABLE)"                       shift, and go to state 35
    T_INLINE_HTML                                 shift, and go to state 36
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 37
    "echo (T_ECHO)"                               shift, and go to state 38
    "do (T_DO)"                                   shift, and go to state 39
    "while (T_WHILE)"                             shift, and go to state 40
    "for (T_FOR)"                                 shift, and go to state 41
    "foreach (T_FOREACH)"                         shift, and go to state 42
    "declare (T_DECLARE)"                         shift, and go to state 43
    "switch (T_SWITCH)"                           shift, and go to state 44
    "break (T_BREAK)"                             shift, and go to state 45
    "continue (T_CONTINUE)"                       shift, and go to state 46
    "goto (T_GOTO)"                               shift, and go to state 47
    "function (T_FUNCTION)"                       shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 50
    "try (T_TRY)"                                 shift, and go to state 51
    "throw (T_THROW)"                             shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 54
    "static (T_STATIC)"                           shift, and go to state 57
    "unset (T_UNSET)"                             shift, and go to state 58
    "isset (T_ISSET)"                             shift, and go to state 59
    "empty (T_EMPTY)"                             shift, and go to state 60
    "list (T_LIST)"                               shift, and go to state 65
    "array (T_ARRAY)"                             shift, and go to state 66
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 67
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 73
    "namespace (T_NAMESPACE)"                     shift, and go to state 125
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 77
    '('                                           shift, and go to state 78
    ';'                                           shift, and go to state 79
    '{'                                           shift, and go to state 80
    '$'                                           shift, and go to state 81
    '`'                                           shift, and go to state 82
    '"'                                           shift, and go to state 83

    namespace_name                     go to state 84
    statement                          go to state 1045
    unticked_statement                 go to state 88
    for_statement                      go to state 1046
    new_expr                           go to state 95
    expr_without_variable              go to state 96
    yield_expr                         go to state 97
    combined_scalar_offset             go to state 98
    combined_scalar                    go to state 99
    function                           go to state 126
    function_call                      go to state 101
    class_name                         go to state 102
    common_scalar                      go to state 103
    scalar                             go to state 104
    expr                               go to state 105
    parenthesis_expr                   go to state 106
    r_variable                         go to state 107
    rw_variable                        go to state 108
    variable                           go to state 109
    variable_without_objects           go to state 110
    static_member                      go to state 111
    variable_class_name                go to state 112
    array_function_dereference         go to state 113
    base_variable_with_function_calls  go to state 114
    base_variable                      go to state 115
    reference_variable                 go to state 116
    compound_variable                  go to state 117
    simple_indirect_reference          go to state 118
    internal_functions_in_yacc         go to state 119
    class_constant                     go to state 120
    class_name_scalar                  go to state 121


state 1026

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  149 foreach_statement: ':' inner_statement_list . "endforeach (T_ENDFOREACH)" ';'

    "endforeach (T_ENDFOREACH)"  shift, and go to state 1047

    $default  reduce using rule 40 ($@4)

    $@4  go to state 402


state 1027

  101 catch_statement: "catch (T_CATCH)" '(' $@24 fully_qualified_class_name $@25 "variable (T_VARIABLE)" . ')' $@26 '{' inner_statement_list '}' $@27 additional_catches

    ')'  shift, and go to state 1048


state 1028

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  104 finally_statement: "finally (T_FINALLY)" $@28 '{' inner_statement_list . '}'

    '}'  shift, and go to state 1049

    $default  reduce using rule 40 ($@4)

    $@4  go to state 402


state 1029

  362 expr_without_variable: "static (T_STATIC)" function is_reference @57 '(' parameter_list ')' lexical_vars '{' inner_statement_list '}' .

    $default  reduce using rule 362 (expr_without_variable)


state 1030

  219 trait_adaptations: '{' trait_adaptation_list '}' .

    $default  reduce using rule 219 (trait_adaptations)


state 1031

  223 non_empty_trait_adaptation_list: non_empty_trait_adaptation_list trait_adaptation_statement .

    $default  reduce using rule 223 (non_empty_trait_adaptation_list)


state 1032

  224 trait_adaptation_statement: trait_precedence ';' .

    $default  reduce using rule 224 (trait_adaptation_statement)


state 1033

  232 trait_alias: trait_method_reference "as (T_AS)" . trait_modifiers "identifier (T_STRING)"
  233            | trait_method_reference "as (T_AS)" . member_modifier

    "public (T_PUBLIC)"        shift, and go to state 879
    "protected (T_PROTECTED)"  shift, and go to state 880
    "private (T_PRIVATE)"      shift, and go to state 881
    "final (T_FINAL)"          shift, and go to state 882
    "abstract (T_ABSTRACT)"    shift, and go to state 883
    "static (T_STATIC)"        shift, and go to state 884

    $default  reduce using rule 234 (trait_modifiers)

    trait_modifiers  go to state 1050
    member_modifier  go to state 1051


state 1034

  226 trait_precedence: trait_method_reference_fully_qualified "insteadof (T_INSTEADOF)" . trait_reference_list

    "identifier (T_STRING)"    shift, and go to state 123
    "namespace (T_NAMESPACE)"  shift, and go to state 578
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 579

    namespace_name              go to state 580
    trait_reference_list        go to state 1052
    fully_qualified_class_name  go to state 1053


state 1035

  225 trait_adaptation_statement: trait_alias ';' .

    $default  reduce using rule 225 (trait_adaptation_statement)


state 1036

  231 trait_method_reference_fully_qualified: fully_qualified_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 1054


state 1037

  253 class_variable_declaration: "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 253 (class_variable_declaration)


state 1038

  250 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)" .
  251                           | class_variable_declaration ',' "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 1055

    $default  reduce using rule 250 (class_variable_declaration)


state 1039

  214 class_statement: method_modifiers function is_reference "identifier (T_STRING)" $@40 . '(' parameter_list ')' method_body

    '('  shift, and go to state 1056


state 1040

  254 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 254 (class_constant_declaration)


state 1041

  376 lexical_var_list: lexical_var_list ',' '&' . "variable (T_VARIABLE)"

    "variable (T_VARIABLE)"  shift, and go to state 1057


state 1042

  375 lexical_var_list: lexical_var_list ',' "variable (T_VARIABLE)" .

    $default  reduce using rule 375 (lexical_var_list)


state 1043

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  172 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" parenthesis_expr ':' $@38 inner_statement_list .

    "elseif (T_ELSEIF)"  reduce using rule 172 (new_elseif_list)
    "else (T_ELSE)"      reduce using rule 172 (new_elseif_list)
    "endif (T_ENDIF)"    reduce using rule 172 (new_elseif_list)
    $default             reduce using rule 40 ($@4)

    $@4  go to state 402


state 1044

  147 for_statement: ':' . inner_statement_list "endfor (T_ENDFOR)" ';'

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 1058


state 1045

  146 for_statement: statement .

    $default  reduce using rule 146 (for_statement)


state 1046

   65 unticked_statement: "for (T_FOR)" '(' for_expr ';' $@13 for_expr ';' $@14 for_expr ')' $@15 for_statement .

    $default  reduce using rule 65 (unticked_statement)


state 1047

  149 foreach_statement: ':' inner_statement_list "endforeach (T_ENDFOREACH)" . ';'

    ';'  shift, and go to state 1059


state 1048

  101 catch_statement: "catch (T_CATCH)" '(' $@24 fully_qualified_class_name $@25 "variable (T_VARIABLE)" ')' . $@26 '{' inner_statement_list '}' $@27 additional_catches

    $default  reduce using rule 99 ($@26)

    $@26  go to state 1060


state 1049

  104 finally_statement: "finally (T_FINALLY)" $@28 '{' inner_statement_list '}' .

    $default  reduce using rule 104 (finally_statement)


state 1050

  232 trait_alias: trait_method_reference "as (T_AS)" trait_modifiers . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 1061


state 1051

  233 trait_alias: trait_method_reference "as (T_AS)" member_modifier .
  235 trait_modifiers: member_modifier .

    "identifier (T_STRING)"  reduce using rule 235 (trait_modifiers)
    $default                 reduce using rule 233 (trait_alias)


state 1052

  226 trait_precedence: trait_method_reference_fully_qualified "insteadof (T_INSTEADOF)" trait_reference_list .
  228 trait_reference_list: trait_reference_list . ',' fully_qualified_class_name

    ','  shift, and go to state 1062

    $default  reduce using rule 226 (trait_precedence)


state 1053

  227 trait_reference_list: fully_qualified_class_name .

    $default  reduce using rule 227 (trait_reference_list)


state 1054

  231 trait_method_reference_fully_qualified: fully_qualified_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    $default  reduce using rule 231 (trait_method_reference_fully_qualified)


state 1055

  251 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 505
    '-'                                           shift, and go to state 506
    '!'                                           shift, and go to state 507
    '~'                                           shift, and go to state 508
    '['                                           shift, and go to state 509
    "integer number (T_LNUMBER)"                  shift, and go to state 31
    "floating-point number (T_DNUMBER)"           shift, and go to state 32
    "identifier (T_STRING)"                       shift, and go to state 123
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 510
    "static (T_STATIC)"                           shift, and go to state 148
    "array (T_ARRAY)"                             shift, and go to state 511
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 512
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 68
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 69
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 70
    "__LINE__ (T_LINE)"                           shift, and go to state 71
    "__FILE__ (T_FILE)"                           shift, and go to state 72
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 513
    "namespace (T_NAMESPACE)"                     shift, and go to state 514
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 75
    "__DIR__ (T_DIR)"                             shift, and go to state 76
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 515
    '('                                           shift, and go to state 516

    namespace_name            go to state 517
    class_name                go to state 518
    common_scalar             go to state 519
    static_class_constant     go to state 520
    static_scalar             go to state 1063
    static_scalar_value       go to state 522
    static_operation          go to state 523
    static_class_name_scalar  go to state 524


state 1056

  214 class_statement: method_modifiers function is_reference "identifier (T_STRING)" $@40 '(' . parameter_list ')' method_body

    "identifier (T_STRING)"    shift, and go to state 123
    "array (T_ARRAY)"          shift, and go to state 712
    "callable (T_CALLABLE)"    shift, and go to state 713
    "namespace (T_NAMESPACE)"  shift, and go to state 578
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 579

    ')'       reduce using rule 178 (parameter_list)
    $default  reduce using rule 183 (optional_class_type)

    namespace_name              go to state 580
    parameter_list              go to state 1064
    non_empty_parameter_list    go to state 715
    parameter                   go to state 716
    optional_class_type         go to state 717
    fully_qualified_class_name  go to state 718


state 1057

  376 lexical_var_list: lexical_var_list ',' '&' "variable (T_VARIABLE)" .

    $default  reduce using rule 376 (lexical_var_list)


state 1058

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  147 for_statement: ':' inner_statement_list . "endfor (T_ENDFOR)" ';'

    "endfor (T_ENDFOR)"  shift, and go to state 1065

    $default  reduce using rule 40 ($@4)

    $@4  go to state 402


state 1059

  149 foreach_statement: ':' inner_statement_list "endforeach (T_ENDFOREACH)" ';' .

    $default  reduce using rule 149 (foreach_statement)


state 1060

  101 catch_statement: "catch (T_CATCH)" '(' $@24 fully_qualified_class_name $@25 "variable (T_VARIABLE)" ')' $@26 . '{' inner_statement_list '}' $@27 additional_catches

    '{'  shift, and go to state 1066


state 1061

  232 trait_alias: trait_method_reference "as (T_AS)" trait_modifiers "identifier (T_STRING)" .

    $default  reduce using rule 232 (trait_alias)


state 1062

  228 trait_reference_list: trait_reference_list ',' . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 123
    "namespace (T_NAMESPACE)"  shift, and go to state 578
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 579

    namespace_name              go to state 580
    fully_qualified_class_name  go to state 1067


state 1063

  251 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 251 (class_variable_declaration)


state 1064

  214 class_statement: method_modifiers function is_reference "identifier (T_STRING)" $@40 '(' parameter_list . ')' method_body

    ')'  shift, and go to state 1068


state 1065

  147 for_statement: ':' inner_statement_list "endfor (T_ENDFOR)" . ';'

    ';'  shift, and go to state 1069


state 1066

  101 catch_statement: "catch (T_CATCH)" '(' $@24 fully_qualified_class_name $@25 "variable (T_VARIABLE)" ')' $@26 '{' . inner_statement_list '}' $@27 additional_catches

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 1070


state 1067

  228 trait_reference_list: trait_reference_list ',' fully_qualified_class_name .

    $default  reduce using rule 228 (trait_reference_list)


state 1068

  214 class_statement: method_modifiers function is_reference "identifier (T_STRING)" $@40 '(' parameter_list ')' . method_body

    ';'  shift, and go to state 1071
    '{'  shift, and go to state 1072

    method_body  go to state 1073


state 1069

  147 for_statement: ':' inner_statement_list "endfor (T_ENDFOR)" ';' .

    $default  reduce using rule 147 (for_statement)


state 1070

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  101 catch_statement: "catch (T_CATCH)" '(' $@24 fully_qualified_class_name $@25 "variable (T_VARIABLE)" ')' $@26 '{' inner_statement_list . '}' $@27 additional_catches

    '}'  shift, and go to state 1074

    $default  reduce using rule 40 ($@4)

    $@4  go to state 402


state 1071

  236 method_body: ';' .

    $default  reduce using rule 236 (method_body)


state 1072

  237 method_body: '{' . inner_statement_list '}'

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 1075


state 1073

  214 class_statement: method_modifiers function is_reference "identifier (T_STRING)" $@40 '(' parameter_list ')' method_body .

    $default  reduce using rule 214 (class_statement)


state 1074

  101 catch_statement: "catch (T_CATCH)" '(' $@24 fully_qualified_class_name $@25 "variable (T_VARIABLE)" ')' $@26 '{' inner_statement_list '}' . $@27 additional_catches

    $default  reduce using rule 100 ($@27)

    $@27  go to state 1076


state 1075

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  237 method_body: '{' inner_statement_list . '}'

    '}'  shift, and go to state 1077

    $default  reduce using rule 40 ($@4)

    $@4  go to state 402


state 1076

  101 catch_statement: "catch (T_CATCH)" '(' $@24 fully_qualified_class_name $@25 "variable (T_VARIABLE)" ')' $@26 '{' inner_statement_list '}' $@27 . additional_catches

    "catch (T_CATCH)"  shift, and go to state 1078

    $default  reduce using rule 106 (additional_catches)

    additional_catches            go to state 1079
    non_empty_additional_catches  go to state 1080
    additional_catch              go to state 1081


state 1077

  237 method_body: '{' inner_statement_list '}' .

    $default  reduce using rule 237 (method_body)


state 1078

  111 additional_catch: "catch (T_CATCH)" . '(' fully_qualified_class_name @29 "variable (T_VARIABLE)" ')' $@30 '{' inner_statement_list '}'

    '('  shift, and go to state 1082


state 1079

  101 catch_statement: "catch (T_CATCH)" '(' $@24 fully_qualified_class_name $@25 "variable (T_VARIABLE)" ')' $@26 '{' inner_statement_list '}' $@27 additional_catches .

    $default  reduce using rule 101 (catch_statement)


state 1080

  105 additional_catches: non_empty_additional_catches .
  108 non_empty_additional_catches: non_empty_additional_catches . additional_catch

    "catch (T_CATCH)"  shift, and go to state 1078

    $default  reduce using rule 105 (additional_catches)

    additional_catch  go to state 1083


state 1081

  107 non_empty_additional_catches: additional_catch .

    $default  reduce using rule 107 (non_empty_additional_catches)


state 1082

  111 additional_catch: "catch (T_CATCH)" '(' . fully_qualified_class_name @29 "variable (T_VARIABLE)" ')' $@30 '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 123
    "namespace (T_NAMESPACE)"  shift, and go to state 578
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 579

    namespace_name              go to state 580
    fully_qualified_class_name  go to state 1084


state 1083

  108 non_empty_additional_catches: non_empty_additional_catches additional_catch .

    $default  reduce using rule 108 (non_empty_additional_catches)


state 1084

  111 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name . @29 "variable (T_VARIABLE)" ')' $@30 '{' inner_statement_list '}'

    $default  reduce using rule 109 (@29)

    @29  go to state 1085


state 1085

  111 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @29 . "variable (T_VARIABLE)" ')' $@30 '{' inner_statement_list '}'

    "variable (T_VARIABLE)"  shift, and go to state 1086


state 1086

  111 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @29 "variable (T_VARIABLE)" . ')' $@30 '{' inner_statement_list '}'

    ')'  shift, and go to state 1087


state 1087

  111 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @29 "variable (T_VARIABLE)" ')' . $@30 '{' inner_statement_list '}'

    $default  reduce using rule 110 ($@30)

    $@30  go to state 1088


state 1088

  111 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @29 "variable (T_VARIABLE)" ')' $@30 . '{' inner_statement_list '}'

    '{'  shift, and go to state 1089


state 1089

  111 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @29 "variable (T_VARIABLE)" ')' $@30 '{' . inner_statement_list '}'

    $default  reduce using rule 42 (inner_statement_list)

    inner_statement_list  go to state 1090


state 1090

   41 inner_statement_list: inner_statement_list . $@4 inner_statement
  111 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @29 "variable (T_VARIABLE)" ')' $@30 '{' inner_statement_list . '}'

    '}'  shift, and go to state 1091

    $default  reduce using rule 40 ($@4)

    $@4  go to state 402


state 1091

  111 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @29 "variable (T_VARIABLE)" ')' $@30 '{' inner_statement_list '}' .

    $default  reduce using rule 111 (additional_catch)
